// Bitcoin Tycoon - Prisma Schema
// Game database models for mining empire simulation

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & AUTHENTICATION
// ============================================================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  username  String   @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())

  company  Company?
  sessions Session[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  @@map("sessions")
}

// ============================================================================
// COMPANY & CORE GAME STATE
// ============================================================================

model Company {
  id          String  @id @default(cuid())
  ownerId     String  @unique
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  description String?
  region      String  @default("US_WEST")

  // Resources
  usdBalance Float @default(50000)
  btcBalance Float @default(0)

  // Reputation (0-100 per faction)
  repMiners     Int @default(50)
  repTraders    Int @default(50)
  repRegulators Int @default(50)
  repAnarchists Int @default(50)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sites     Site[]
  positions Position[]
  research  Research[]
  votes     Vote[]
  quests    CompanyQuest[]
  alerts    Alert[]

  @@map("companies")
}

// ============================================================================
// MINING INFRASTRUCTURE
// ============================================================================

model Site {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  name        String
  region      String
  gridTier    Int    @default(1) // 1-5, affects power reliability
  coolingType String @default("AIR") // AIR, LIQUID, IMMERSION

  // Stats
  uptime        Float @default(100) // percentage
  totalHashrate Float @default(0) // TH/s
  powerUsage    Float @default(0) // kW

  // Layout
  gridWidth  Int @default(10)
  gridHeight Int @default(10)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rigs            Rig[]
  energyContracts EnergyContract[]

  @@map("sites")
}

model Rig {
  id     String @id @default(cuid())
  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  type String // "ANTMINER_S19", "WHATSMINER_M30S", etc.

  // Position in site grid
  gridX Int
  gridY Int

  // Stats
  hashrate   Float // TH/s
  efficiency Float // J/TH (watts per terahash)
  wear       Float  @default(0) // 0-100, affects performance
  firmware   String @default("STOCK")

  status String @default("ACTIVE") // ACTIVE, OFFLINE, MAINTENANCE

  purchasePrice Float
  purchasedAt   DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([siteId, gridX, gridY])
  @@map("rigs")
}

model EnergyContract {
  id     String @id @default(cuid())
  siteId String
  site   Site   @relation(fields: [siteId], references: [id], onDelete: Cascade)

  provider    String
  pricePerKWh Float // USD per kWh
  capacity    Float // kW

  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())

  @@map("energy_contracts")
}

// ============================================================================
// TRADING & MARKETS
// ============================================================================

model Position {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  instrument String // "BTC_SPOT", "BTC_PERP", "BTC_CALL_45000_30D"
  side       String // "LONG", "SHORT"
  quantity   Float
  entryPrice Float

  // For leveraged positions
  leverage         Float  @default(1)
  margin           Float?
  liquidationPrice Float?

  status String @default("OPEN") // OPEN, CLOSED, LIQUIDATED

  pnl Float @default(0)

  openedAt DateTime  @default(now())
  closedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("positions")
}

// ============================================================================
// RESEARCH & DEVELOPMENT
// ============================================================================

model Research {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  nodeId   String // "MINING_EFFICIENCY_1", "COOLING_OPTIMIZATION_2"
  category String // "MINING", "TRADING", "AUTOMATION", "COMPLIANCE"

  level    Int   @default(1)
  progress Float @default(0) // 0-100

  status String @default("LOCKED") // LOCKED, IN_PROGRESS, COMPLETED

  startedAt   DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, nodeId])
  @@map("research")
}

// ============================================================================
// GOVERNANCE
// ============================================================================

model Proposal {
  id          String @id @default(cuid())
  type        String // "REGULATION", "SUBSIDY", "EVENT"
  title       String
  description String

  // Voting
  votesFor     Int @default(0)
  votesAgainst Int @default(0)
  votesAbstain Int @default(0)

  deadline DateTime
  outcome  String? // "PASSED", "FAILED", null if pending

  createdAt  DateTime  @default(now())
  resolvedAt DateTime?

  votes Vote[]

  @@map("proposals")
}

model Vote {
  id         String   @id @default(cuid())
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  choice String // "FOR", "AGAINST", "ABSTAIN"
  weight Int    @default(1) // Based on reputation

  createdAt DateTime @default(now())

  @@unique([proposalId, companyId])
  @@map("votes")
}

// ============================================================================
// QUESTS & EVENTS
// ============================================================================

model Quest {
  id       String @id @default(cuid())
  type     String // "MAIN", "DAILY", "WEEKLY", "SPECIAL"
  category String // "MINING", "TRADING", "RESEARCH", "GOVERNANCE"

  title       String
  description String

  // Requirements
  requirements Json // { "hashrate": 100, "btc_mined": 0.5, etc. }

  // Rewards
  rewardUsd      Float @default(0)
  rewardBtc      Float @default(0)
  rewardRep      Json? // { "miners": 10, "traders": 5 }
  rewardResearch Int   @default(0)

  // Availability
  startDate DateTime?
  endDate   DateTime?

  createdAt DateTime @default(now())

  companies CompanyQuest[]

  @@map("quests")
}

model CompanyQuest {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  questId String
  quest   Quest  @relation(fields: [questId], references: [id], onDelete: Cascade)

  status   String @default("ACTIVE") // ACTIVE, COMPLETED, FAILED
  progress Json? // Current progress toward requirements

  startedAt   DateTime  @default(now())
  completedAt DateTime?

  @@unique([companyId, questId])
  @@map("company_quests")
}

model Event {
  id       String @id @default(cuid())
  type     String // "POWER_OUTAGE", "MARKET_CRASH", "DIFFICULTY_SPIKE"
  severity String // "LOW", "MEDIUM", "HIGH", "CRITICAL"

  title       String
  description String

  // Affected entities
  region            String?
  affectedCompanies Json? // Array of company IDs

  payload Json? // Event-specific data

  createdAt  DateTime  @default(now())
  resolvedAt DateTime?

  @@map("events")
}

model Alert {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  type     String // "WARNING", "CRITICAL", "INFO"
  category String // "MINING", "TRADING", "ENERGY", "SYSTEM"

  message String
  data    Json?

  read Boolean @default(false)

  createdAt DateTime @default(now())

  @@map("alerts")
}

// ============================================================================
// SIMULATION DATA
// ============================================================================

model TickSnapshot {
  id         String @id @default(cuid())
  tickNumber Int    @unique

  // Market data
  btcPrice        Float
  difficulty      Float
  networkHashrate Float

  // Regional data
  regionalData Json // { "US_WEST": { "energyPrice": 0.08, ... }, ... }

  // Events this tick
  events Json?

  timestamp DateTime @default(now())

  @@map("tick_snapshots")
}
