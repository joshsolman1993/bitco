
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Company
 * 
 */
export type Company = $Result.DefaultSelection<Prisma.$CompanyPayload>
/**
 * Model Site
 * 
 */
export type Site = $Result.DefaultSelection<Prisma.$SitePayload>
/**
 * Model Rig
 * 
 */
export type Rig = $Result.DefaultSelection<Prisma.$RigPayload>
/**
 * Model EnergyContract
 * 
 */
export type EnergyContract = $Result.DefaultSelection<Prisma.$EnergyContractPayload>
/**
 * Model Position
 * 
 */
export type Position = $Result.DefaultSelection<Prisma.$PositionPayload>
/**
 * Model Research
 * 
 */
export type Research = $Result.DefaultSelection<Prisma.$ResearchPayload>
/**
 * Model Proposal
 * 
 */
export type Proposal = $Result.DefaultSelection<Prisma.$ProposalPayload>
/**
 * Model Vote
 * 
 */
export type Vote = $Result.DefaultSelection<Prisma.$VotePayload>
/**
 * Model Quest
 * 
 */
export type Quest = $Result.DefaultSelection<Prisma.$QuestPayload>
/**
 * Model CompanyQuest
 * 
 */
export type CompanyQuest = $Result.DefaultSelection<Prisma.$CompanyQuestPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Alert
 * 
 */
export type Alert = $Result.DefaultSelection<Prisma.$AlertPayload>
/**
 * Model TickSnapshot
 * 
 */
export type TickSnapshot = $Result.DefaultSelection<Prisma.$TickSnapshotPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate<ExtArgs>;

  /**
   * `prisma.site`: Exposes CRUD operations for the **Site** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sites
    * const sites = await prisma.site.findMany()
    * ```
    */
  get site(): Prisma.SiteDelegate<ExtArgs>;

  /**
   * `prisma.rig`: Exposes CRUD operations for the **Rig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rigs
    * const rigs = await prisma.rig.findMany()
    * ```
    */
  get rig(): Prisma.RigDelegate<ExtArgs>;

  /**
   * `prisma.energyContract`: Exposes CRUD operations for the **EnergyContract** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EnergyContracts
    * const energyContracts = await prisma.energyContract.findMany()
    * ```
    */
  get energyContract(): Prisma.EnergyContractDelegate<ExtArgs>;

  /**
   * `prisma.position`: Exposes CRUD operations for the **Position** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Positions
    * const positions = await prisma.position.findMany()
    * ```
    */
  get position(): Prisma.PositionDelegate<ExtArgs>;

  /**
   * `prisma.research`: Exposes CRUD operations for the **Research** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Research
    * const research = await prisma.research.findMany()
    * ```
    */
  get research(): Prisma.ResearchDelegate<ExtArgs>;

  /**
   * `prisma.proposal`: Exposes CRUD operations for the **Proposal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proposals
    * const proposals = await prisma.proposal.findMany()
    * ```
    */
  get proposal(): Prisma.ProposalDelegate<ExtArgs>;

  /**
   * `prisma.vote`: Exposes CRUD operations for the **Vote** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Votes
    * const votes = await prisma.vote.findMany()
    * ```
    */
  get vote(): Prisma.VoteDelegate<ExtArgs>;

  /**
   * `prisma.quest`: Exposes CRUD operations for the **Quest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quests
    * const quests = await prisma.quest.findMany()
    * ```
    */
  get quest(): Prisma.QuestDelegate<ExtArgs>;

  /**
   * `prisma.companyQuest`: Exposes CRUD operations for the **CompanyQuest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompanyQuests
    * const companyQuests = await prisma.companyQuest.findMany()
    * ```
    */
  get companyQuest(): Prisma.CompanyQuestDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.alert`: Exposes CRUD operations for the **Alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alerts
    * const alerts = await prisma.alert.findMany()
    * ```
    */
  get alert(): Prisma.AlertDelegate<ExtArgs>;

  /**
   * `prisma.tickSnapshot`: Exposes CRUD operations for the **TickSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TickSnapshots
    * const tickSnapshots = await prisma.tickSnapshot.findMany()
    * ```
    */
  get tickSnapshot(): Prisma.TickSnapshotDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Company: 'Company',
    Site: 'Site',
    Rig: 'Rig',
    EnergyContract: 'EnergyContract',
    Position: 'Position',
    Research: 'Research',
    Proposal: 'Proposal',
    Vote: 'Vote',
    Quest: 'Quest',
    CompanyQuest: 'CompanyQuest',
    Event: 'Event',
    Alert: 'Alert',
    TickSnapshot: 'TickSnapshot'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "session" | "company" | "site" | "rig" | "energyContract" | "position" | "research" | "proposal" | "vote" | "quest" | "companyQuest" | "event" | "alert" | "tickSnapshot"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Company: {
        payload: Prisma.$CompanyPayload<ExtArgs>
        fields: Prisma.CompanyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findFirst: {
            args: Prisma.CompanyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          findMany: {
            args: Prisma.CompanyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          create: {
            args: Prisma.CompanyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          createMany: {
            args: Prisma.CompanyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>[]
          }
          delete: {
            args: Prisma.CompanyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          update: {
            args: Prisma.CompanyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          deleteMany: {
            args: Prisma.CompanyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyPayload>
          }
          aggregate: {
            args: Prisma.CompanyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany>
          }
          groupBy: {
            args: Prisma.CompanyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyCountAggregateOutputType> | number
          }
        }
      }
      Site: {
        payload: Prisma.$SitePayload<ExtArgs>
        fields: Prisma.SiteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SiteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SiteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findFirst: {
            args: Prisma.SiteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SiteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          findMany: {
            args: Prisma.SiteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          create: {
            args: Prisma.SiteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          createMany: {
            args: Prisma.SiteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SiteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>[]
          }
          delete: {
            args: Prisma.SiteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          update: {
            args: Prisma.SiteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          deleteMany: {
            args: Prisma.SiteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SiteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SiteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SitePayload>
          }
          aggregate: {
            args: Prisma.SiteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSite>
          }
          groupBy: {
            args: Prisma.SiteGroupByArgs<ExtArgs>
            result: $Utils.Optional<SiteGroupByOutputType>[]
          }
          count: {
            args: Prisma.SiteCountArgs<ExtArgs>
            result: $Utils.Optional<SiteCountAggregateOutputType> | number
          }
        }
      }
      Rig: {
        payload: Prisma.$RigPayload<ExtArgs>
        fields: Prisma.RigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>
          }
          findFirst: {
            args: Prisma.RigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>
          }
          findMany: {
            args: Prisma.RigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>[]
          }
          create: {
            args: Prisma.RigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>
          }
          createMany: {
            args: Prisma.RigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>[]
          }
          delete: {
            args: Prisma.RigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>
          }
          update: {
            args: Prisma.RigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>
          }
          deleteMany: {
            args: Prisma.RigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RigPayload>
          }
          aggregate: {
            args: Prisma.RigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRig>
          }
          groupBy: {
            args: Prisma.RigGroupByArgs<ExtArgs>
            result: $Utils.Optional<RigGroupByOutputType>[]
          }
          count: {
            args: Prisma.RigCountArgs<ExtArgs>
            result: $Utils.Optional<RigCountAggregateOutputType> | number
          }
        }
      }
      EnergyContract: {
        payload: Prisma.$EnergyContractPayload<ExtArgs>
        fields: Prisma.EnergyContractFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnergyContractFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnergyContractFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>
          }
          findFirst: {
            args: Prisma.EnergyContractFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnergyContractFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>
          }
          findMany: {
            args: Prisma.EnergyContractFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>[]
          }
          create: {
            args: Prisma.EnergyContractCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>
          }
          createMany: {
            args: Prisma.EnergyContractCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnergyContractCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>[]
          }
          delete: {
            args: Prisma.EnergyContractDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>
          }
          update: {
            args: Prisma.EnergyContractUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>
          }
          deleteMany: {
            args: Prisma.EnergyContractDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnergyContractUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnergyContractUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnergyContractPayload>
          }
          aggregate: {
            args: Prisma.EnergyContractAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnergyContract>
          }
          groupBy: {
            args: Prisma.EnergyContractGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnergyContractGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnergyContractCountArgs<ExtArgs>
            result: $Utils.Optional<EnergyContractCountAggregateOutputType> | number
          }
        }
      }
      Position: {
        payload: Prisma.$PositionPayload<ExtArgs>
        fields: Prisma.PositionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PositionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PositionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findFirst: {
            args: Prisma.PositionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PositionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          findMany: {
            args: Prisma.PositionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          create: {
            args: Prisma.PositionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          createMany: {
            args: Prisma.PositionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PositionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>[]
          }
          delete: {
            args: Prisma.PositionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          update: {
            args: Prisma.PositionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          deleteMany: {
            args: Prisma.PositionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PositionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PositionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PositionPayload>
          }
          aggregate: {
            args: Prisma.PositionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePosition>
          }
          groupBy: {
            args: Prisma.PositionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PositionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PositionCountArgs<ExtArgs>
            result: $Utils.Optional<PositionCountAggregateOutputType> | number
          }
        }
      }
      Research: {
        payload: Prisma.$ResearchPayload<ExtArgs>
        fields: Prisma.ResearchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResearchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResearchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          findFirst: {
            args: Prisma.ResearchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResearchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          findMany: {
            args: Prisma.ResearchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>[]
          }
          create: {
            args: Prisma.ResearchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          createMany: {
            args: Prisma.ResearchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResearchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>[]
          }
          delete: {
            args: Prisma.ResearchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          update: {
            args: Prisma.ResearchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          deleteMany: {
            args: Prisma.ResearchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResearchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ResearchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResearchPayload>
          }
          aggregate: {
            args: Prisma.ResearchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResearch>
          }
          groupBy: {
            args: Prisma.ResearchGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResearchGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResearchCountArgs<ExtArgs>
            result: $Utils.Optional<ResearchCountAggregateOutputType> | number
          }
        }
      }
      Proposal: {
        payload: Prisma.$ProposalPayload<ExtArgs>
        fields: Prisma.ProposalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProposalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProposalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findFirst: {
            args: Prisma.ProposalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProposalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          findMany: {
            args: Prisma.ProposalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          create: {
            args: Prisma.ProposalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          createMany: {
            args: Prisma.ProposalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProposalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>[]
          }
          delete: {
            args: Prisma.ProposalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          update: {
            args: Prisma.ProposalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          deleteMany: {
            args: Prisma.ProposalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProposalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProposalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProposalPayload>
          }
          aggregate: {
            args: Prisma.ProposalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProposal>
          }
          groupBy: {
            args: Prisma.ProposalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProposalGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProposalCountArgs<ExtArgs>
            result: $Utils.Optional<ProposalCountAggregateOutputType> | number
          }
        }
      }
      Vote: {
        payload: Prisma.$VotePayload<ExtArgs>
        fields: Prisma.VoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findFirst: {
            args: Prisma.VoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          findMany: {
            args: Prisma.VoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          create: {
            args: Prisma.VoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          createMany: {
            args: Prisma.VoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>[]
          }
          delete: {
            args: Prisma.VoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          update: {
            args: Prisma.VoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          deleteMany: {
            args: Prisma.VoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VotePayload>
          }
          aggregate: {
            args: Prisma.VoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVote>
          }
          groupBy: {
            args: Prisma.VoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<VoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.VoteCountArgs<ExtArgs>
            result: $Utils.Optional<VoteCountAggregateOutputType> | number
          }
        }
      }
      Quest: {
        payload: Prisma.$QuestPayload<ExtArgs>
        fields: Prisma.QuestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>
          }
          findFirst: {
            args: Prisma.QuestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>
          }
          findMany: {
            args: Prisma.QuestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>[]
          }
          create: {
            args: Prisma.QuestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>
          }
          createMany: {
            args: Prisma.QuestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>[]
          }
          delete: {
            args: Prisma.QuestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>
          }
          update: {
            args: Prisma.QuestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>
          }
          deleteMany: {
            args: Prisma.QuestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestPayload>
          }
          aggregate: {
            args: Prisma.QuestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuest>
          }
          groupBy: {
            args: Prisma.QuestGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestCountArgs<ExtArgs>
            result: $Utils.Optional<QuestCountAggregateOutputType> | number
          }
        }
      }
      CompanyQuest: {
        payload: Prisma.$CompanyQuestPayload<ExtArgs>
        fields: Prisma.CompanyQuestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompanyQuestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompanyQuestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>
          }
          findFirst: {
            args: Prisma.CompanyQuestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompanyQuestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>
          }
          findMany: {
            args: Prisma.CompanyQuestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>[]
          }
          create: {
            args: Prisma.CompanyQuestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>
          }
          createMany: {
            args: Prisma.CompanyQuestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompanyQuestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>[]
          }
          delete: {
            args: Prisma.CompanyQuestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>
          }
          update: {
            args: Prisma.CompanyQuestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>
          }
          deleteMany: {
            args: Prisma.CompanyQuestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompanyQuestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompanyQuestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompanyQuestPayload>
          }
          aggregate: {
            args: Prisma.CompanyQuestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanyQuest>
          }
          groupBy: {
            args: Prisma.CompanyQuestGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompanyQuestGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompanyQuestCountArgs<ExtArgs>
            result: $Utils.Optional<CompanyQuestCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Alert: {
        payload: Prisma.$AlertPayload<ExtArgs>
        fields: Prisma.AlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findFirst: {
            args: Prisma.AlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findMany: {
            args: Prisma.AlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          create: {
            args: Prisma.AlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          createMany: {
            args: Prisma.AlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlertCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          delete: {
            args: Prisma.AlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          update: {
            args: Prisma.AlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          deleteMany: {
            args: Prisma.AlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          aggregate: {
            args: Prisma.AlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert>
          }
          groupBy: {
            args: Prisma.AlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertCountArgs<ExtArgs>
            result: $Utils.Optional<AlertCountAggregateOutputType> | number
          }
        }
      }
      TickSnapshot: {
        payload: Prisma.$TickSnapshotPayload<ExtArgs>
        fields: Prisma.TickSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TickSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TickSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>
          }
          findFirst: {
            args: Prisma.TickSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TickSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>
          }
          findMany: {
            args: Prisma.TickSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>[]
          }
          create: {
            args: Prisma.TickSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>
          }
          createMany: {
            args: Prisma.TickSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TickSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>[]
          }
          delete: {
            args: Prisma.TickSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>
          }
          update: {
            args: Prisma.TickSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.TickSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TickSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TickSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TickSnapshotPayload>
          }
          aggregate: {
            args: Prisma.TickSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTickSnapshot>
          }
          groupBy: {
            args: Prisma.TickSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<TickSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.TickSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<TickSnapshotCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type CompanyCountOutputType
   */

  export type CompanyCountOutputType = {
    sites: number
    positions: number
    research: number
    votes: number
    quests: number
    alerts: number
  }

  export type CompanyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sites?: boolean | CompanyCountOutputTypeCountSitesArgs
    positions?: boolean | CompanyCountOutputTypeCountPositionsArgs
    research?: boolean | CompanyCountOutputTypeCountResearchArgs
    votes?: boolean | CompanyCountOutputTypeCountVotesArgs
    quests?: boolean | CompanyCountOutputTypeCountQuestsArgs
    alerts?: boolean | CompanyCountOutputTypeCountAlertsArgs
  }

  // Custom InputTypes
  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyCountOutputType
     */
    select?: CompanyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountSitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountPositionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearchWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountQuestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyQuestWhereInput
  }

  /**
   * CompanyCountOutputType without action
   */
  export type CompanyCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }


  /**
   * Count Type SiteCountOutputType
   */

  export type SiteCountOutputType = {
    rigs: number
    energyContracts: number
  }

  export type SiteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rigs?: boolean | SiteCountOutputTypeCountRigsArgs
    energyContracts?: boolean | SiteCountOutputTypeCountEnergyContractsArgs
  }

  // Custom InputTypes
  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SiteCountOutputType
     */
    select?: SiteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountRigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RigWhereInput
  }

  /**
   * SiteCountOutputType without action
   */
  export type SiteCountOutputTypeCountEnergyContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnergyContractWhereInput
  }


  /**
   * Count Type ProposalCountOutputType
   */

  export type ProposalCountOutputType = {
    votes: number
  }

  export type ProposalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | ProposalCountOutputTypeCountVotesArgs
  }

  // Custom InputTypes
  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProposalCountOutputType
     */
    select?: ProposalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProposalCountOutputType without action
   */
  export type ProposalCountOutputTypeCountVotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
  }


  /**
   * Count Type QuestCountOutputType
   */

  export type QuestCountOutputType = {
    companies: number
  }

  export type QuestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | QuestCountOutputTypeCountCompaniesArgs
  }

  // Custom InputTypes
  /**
   * QuestCountOutputType without action
   */
  export type QuestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestCountOutputType
     */
    select?: QuestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestCountOutputType without action
   */
  export type QuestCountOutputTypeCountCompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyQuestWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    username: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    username: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLogin: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    username: number
    avatar: number
    createdAt: number
    updatedAt: number
    lastLogin: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    username?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    lastLogin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    username: string
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    lastLogin: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
    company?: boolean | User$companyArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    username?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLogin?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | User$companyArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs> | null
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      username: string
      avatar: string | null
      createdAt: Date
      updatedAt: Date
      lastLogin: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends User$companyArgs<ExtArgs> = {}>(args?: Subset<T, User$companyArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.company
   */
  export type User$companyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    where?: CompanyWhereInput
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    refreshToken: string | null
    expiresAt: Date | null
    createdAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    refreshToken: number
    expiresAt: number
    createdAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    refreshToken?: true
    expiresAt?: true
    createdAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    refreshToken: string
    expiresAt: Date
    createdAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    refreshToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      refreshToken: string
      expiresAt: Date
      createdAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly refreshToken: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Company
   */

  export type AggregateCompany = {
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    usdBalance: number | null
    btcBalance: number | null
    repMiners: number | null
    repTraders: number | null
    repRegulators: number | null
    repAnarchists: number | null
  }

  export type CompanySumAggregateOutputType = {
    usdBalance: number | null
    btcBalance: number | null
    repMiners: number | null
    repTraders: number | null
    repRegulators: number | null
    repAnarchists: number | null
  }

  export type CompanyMinAggregateOutputType = {
    id: string | null
    ownerId: string | null
    name: string | null
    description: string | null
    region: string | null
    usdBalance: number | null
    btcBalance: number | null
    repMiners: number | null
    repTraders: number | null
    repRegulators: number | null
    repAnarchists: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: string | null
    ownerId: string | null
    name: string | null
    description: string | null
    region: string | null
    usdBalance: number | null
    btcBalance: number | null
    repMiners: number | null
    repTraders: number | null
    repRegulators: number | null
    repAnarchists: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    ownerId: number
    name: number
    description: number
    region: number
    usdBalance: number
    btcBalance: number
    repMiners: number
    repTraders: number
    repRegulators: number
    repAnarchists: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    usdBalance?: true
    btcBalance?: true
    repMiners?: true
    repTraders?: true
    repRegulators?: true
    repAnarchists?: true
  }

  export type CompanySumAggregateInputType = {
    usdBalance?: true
    btcBalance?: true
    repMiners?: true
    repTraders?: true
    repRegulators?: true
    repAnarchists?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    ownerId?: true
    name?: true
    description?: true
    region?: true
    usdBalance?: true
    btcBalance?: true
    repMiners?: true
    repTraders?: true
    repRegulators?: true
    repAnarchists?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    ownerId?: true
    name?: true
    description?: true
    region?: true
    usdBalance?: true
    btcBalance?: true
    repMiners?: true
    repTraders?: true
    repRegulators?: true
    repAnarchists?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    ownerId?: true
    name?: true
    description?: true
    region?: true
    usdBalance?: true
    btcBalance?: true
    repMiners?: true
    repTraders?: true
    repRegulators?: true
    repAnarchists?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompanyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Company to aggregate.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    _count?: true | CompanyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends CompanyAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany[P]>
      : GetScalarType<T[P], AggregateCompany[P]>
  }




  export type CompanyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyWhereInput
    orderBy?: CompanyOrderByWithAggregationInput | CompanyOrderByWithAggregationInput[]
    by: CompanyScalarFieldEnum[] | CompanyScalarFieldEnum
    having?: CompanyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyCountAggregateInputType | true
    _avg?: CompanyAvgAggregateInputType
    _sum?: CompanySumAggregateInputType
    _min?: CompanyMinAggregateInputType
    _max?: CompanyMaxAggregateInputType
  }

  export type CompanyGroupByOutputType = {
    id: string
    ownerId: string
    name: string
    description: string | null
    region: string
    usdBalance: number
    btcBalance: number
    repMiners: number
    repTraders: number
    repRegulators: number
    repAnarchists: number
    createdAt: Date
    updatedAt: Date
    _count: CompanyCountAggregateOutputType | null
    _avg: CompanyAvgAggregateOutputType | null
    _sum: CompanySumAggregateOutputType | null
    _min: CompanyMinAggregateOutputType | null
    _max: CompanyMaxAggregateOutputType | null
  }

  type GetCompanyGroupByPayload<T extends CompanyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyGroupByOutputType[P]>
        }
      >
    >


  export type CompanySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    name?: boolean
    description?: boolean
    region?: boolean
    usdBalance?: boolean
    btcBalance?: boolean
    repMiners?: boolean
    repTraders?: boolean
    repRegulators?: boolean
    repAnarchists?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    sites?: boolean | Company$sitesArgs<ExtArgs>
    positions?: boolean | Company$positionsArgs<ExtArgs>
    research?: boolean | Company$researchArgs<ExtArgs>
    votes?: boolean | Company$votesArgs<ExtArgs>
    quests?: boolean | Company$questsArgs<ExtArgs>
    alerts?: boolean | Company$alertsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ownerId?: boolean
    name?: boolean
    description?: boolean
    region?: boolean
    usdBalance?: boolean
    btcBalance?: boolean
    repMiners?: boolean
    repTraders?: boolean
    repRegulators?: boolean
    repAnarchists?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["company"]>

  export type CompanySelectScalar = {
    id?: boolean
    ownerId?: boolean
    name?: boolean
    description?: boolean
    region?: boolean
    usdBalance?: boolean
    btcBalance?: boolean
    repMiners?: boolean
    repTraders?: boolean
    repRegulators?: boolean
    repAnarchists?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    sites?: boolean | Company$sitesArgs<ExtArgs>
    positions?: boolean | Company$positionsArgs<ExtArgs>
    research?: boolean | Company$researchArgs<ExtArgs>
    votes?: boolean | Company$votesArgs<ExtArgs>
    quests?: boolean | Company$questsArgs<ExtArgs>
    alerts?: boolean | Company$alertsArgs<ExtArgs>
    _count?: boolean | CompanyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CompanyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CompanyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Company"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      sites: Prisma.$SitePayload<ExtArgs>[]
      positions: Prisma.$PositionPayload<ExtArgs>[]
      research: Prisma.$ResearchPayload<ExtArgs>[]
      votes: Prisma.$VotePayload<ExtArgs>[]
      quests: Prisma.$CompanyQuestPayload<ExtArgs>[]
      alerts: Prisma.$AlertPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ownerId: string
      name: string
      description: string | null
      region: string
      usdBalance: number
      btcBalance: number
      repMiners: number
      repTraders: number
      repRegulators: number
      repAnarchists: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["company"]>
    composites: {}
  }

  type CompanyGetPayload<S extends boolean | null | undefined | CompanyDefaultArgs> = $Result.GetResult<Prisma.$CompanyPayload, S>

  type CompanyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyCountAggregateInputType | true
    }

  export interface CompanyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Company'], meta: { name: 'Company' } }
    /**
     * Find zero or one Company that matches the filter.
     * @param {CompanyFindUniqueArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyFindUniqueArgs>(args: SelectSubset<T, CompanyFindUniqueArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyFindUniqueOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyFindFirstArgs>(args?: SelectSubset<T, CompanyFindFirstArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindFirstOrThrowArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyFindManyArgs>(args?: SelectSubset<T, CompanyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
     */
    create<T extends CompanyCreateArgs>(args: SelectSubset<T, CompanyCreateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {CompanyCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyCreateManyArgs>(args?: SelectSubset<T, CompanyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {CompanyCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const company = await prisma.company.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companyWithIdOnly = await prisma.company.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
     */
    delete<T extends CompanyDeleteArgs>(args: SelectSubset<T, CompanyDeleteArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyUpdateArgs>(args: SelectSubset<T, CompanyUpdateArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyDeleteManyArgs>(args?: SelectSubset<T, CompanyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyUpdateManyArgs>(args: SelectSubset<T, CompanyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
     */
    upsert<T extends CompanyUpsertArgs>(args: SelectSubset<T, CompanyUpsertArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends CompanyCountArgs>(
      args?: Subset<T, CompanyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyAggregateArgs>(args: Subset<T, CompanyAggregateArgs>): Prisma.PrismaPromise<GetCompanyAggregateType<T>>

    /**
     * Group by Company.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyGroupByArgs['orderBy'] }
        : { orderBy?: CompanyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Company model
   */
  readonly fields: CompanyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sites<T extends Company$sitesArgs<ExtArgs> = {}>(args?: Subset<T, Company$sitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany"> | Null>
    positions<T extends Company$positionsArgs<ExtArgs> = {}>(args?: Subset<T, Company$positionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany"> | Null>
    research<T extends Company$researchArgs<ExtArgs> = {}>(args?: Subset<T, Company$researchArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "findMany"> | Null>
    votes<T extends Company$votesArgs<ExtArgs> = {}>(args?: Subset<T, Company$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany"> | Null>
    quests<T extends Company$questsArgs<ExtArgs> = {}>(args?: Subset<T, Company$questsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "findMany"> | Null>
    alerts<T extends Company$alertsArgs<ExtArgs> = {}>(args?: Subset<T, Company$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Company model
   */ 
  interface CompanyFieldRefs {
    readonly id: FieldRef<"Company", 'String'>
    readonly ownerId: FieldRef<"Company", 'String'>
    readonly name: FieldRef<"Company", 'String'>
    readonly description: FieldRef<"Company", 'String'>
    readonly region: FieldRef<"Company", 'String'>
    readonly usdBalance: FieldRef<"Company", 'Float'>
    readonly btcBalance: FieldRef<"Company", 'Float'>
    readonly repMiners: FieldRef<"Company", 'Int'>
    readonly repTraders: FieldRef<"Company", 'Int'>
    readonly repRegulators: FieldRef<"Company", 'Int'>
    readonly repAnarchists: FieldRef<"Company", 'Int'>
    readonly createdAt: FieldRef<"Company", 'DateTime'>
    readonly updatedAt: FieldRef<"Company", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Company findUnique
   */
  export type CompanyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findUniqueOrThrow
   */
  export type CompanyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company findFirst
   */
  export type CompanyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findFirstOrThrow
   */
  export type CompanyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Company to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Companies.
     */
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company findMany
   */
  export type CompanyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter, which Companies to fetch.
     */
    where?: CompanyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Companies to fetch.
     */
    orderBy?: CompanyOrderByWithRelationInput | CompanyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
     */
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
     */
    skip?: number
    distinct?: CompanyScalarFieldEnum | CompanyScalarFieldEnum[]
  }

  /**
   * Company create
   */
  export type CompanyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to create a Company.
     */
    data: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
  }

  /**
   * Company createMany
   */
  export type CompanyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Company createManyAndReturn
   */
  export type CompanyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Companies.
     */
    data: CompanyCreateManyInput | CompanyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Company update
   */
  export type CompanyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The data needed to update a Company.
     */
    data: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
    /**
     * Choose, which Company to update.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Companies.
     */
    data: XOR<CompanyUpdateManyMutationInput, CompanyUncheckedUpdateManyInput>
    /**
     * Filter which Companies to update
     */
    where?: CompanyWhereInput
  }

  /**
   * Company upsert
   */
  export type CompanyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * The filter to search for the Company to update in case it exists.
     */
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
     */
    create: XOR<CompanyCreateInput, CompanyUncheckedCreateInput>
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyUpdateInput, CompanyUncheckedUpdateInput>
  }

  /**
   * Company delete
   */
  export type CompanyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
    /**
     * Filter which Company to delete.
     */
    where: CompanyWhereUniqueInput
  }

  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Companies to delete
     */
    where?: CompanyWhereInput
  }

  /**
   * Company.sites
   */
  export type Company$sitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    cursor?: SiteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Company.positions
   */
  export type Company$positionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    cursor?: PositionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Company.research
   */
  export type Company$researchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    where?: ResearchWhereInput
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    cursor?: ResearchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }

  /**
   * Company.votes
   */
  export type Company$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Company.quests
   */
  export type Company$questsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    where?: CompanyQuestWhereInput
    orderBy?: CompanyQuestOrderByWithRelationInput | CompanyQuestOrderByWithRelationInput[]
    cursor?: CompanyQuestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyQuestScalarFieldEnum | CompanyQuestScalarFieldEnum[]
  }

  /**
   * Company.alerts
   */
  export type Company$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Company without action
   */
  export type CompanyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Company
     */
    select?: CompanySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyInclude<ExtArgs> | null
  }


  /**
   * Model Site
   */

  export type AggregateSite = {
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  export type SiteAvgAggregateOutputType = {
    gridTier: number | null
    uptime: number | null
    totalHashrate: number | null
    powerUsage: number | null
    gridWidth: number | null
    gridHeight: number | null
  }

  export type SiteSumAggregateOutputType = {
    gridTier: number | null
    uptime: number | null
    totalHashrate: number | null
    powerUsage: number | null
    gridWidth: number | null
    gridHeight: number | null
  }

  export type SiteMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    region: string | null
    gridTier: number | null
    coolingType: string | null
    uptime: number | null
    totalHashrate: number | null
    powerUsage: number | null
    gridWidth: number | null
    gridHeight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    name: string | null
    region: string | null
    gridTier: number | null
    coolingType: string | null
    uptime: number | null
    totalHashrate: number | null
    powerUsage: number | null
    gridWidth: number | null
    gridHeight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SiteCountAggregateOutputType = {
    id: number
    companyId: number
    name: number
    region: number
    gridTier: number
    coolingType: number
    uptime: number
    totalHashrate: number
    powerUsage: number
    gridWidth: number
    gridHeight: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SiteAvgAggregateInputType = {
    gridTier?: true
    uptime?: true
    totalHashrate?: true
    powerUsage?: true
    gridWidth?: true
    gridHeight?: true
  }

  export type SiteSumAggregateInputType = {
    gridTier?: true
    uptime?: true
    totalHashrate?: true
    powerUsage?: true
    gridWidth?: true
    gridHeight?: true
  }

  export type SiteMinAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    region?: true
    gridTier?: true
    coolingType?: true
    uptime?: true
    totalHashrate?: true
    powerUsage?: true
    gridWidth?: true
    gridHeight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteMaxAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    region?: true
    gridTier?: true
    coolingType?: true
    uptime?: true
    totalHashrate?: true
    powerUsage?: true
    gridWidth?: true
    gridHeight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SiteCountAggregateInputType = {
    id?: true
    companyId?: true
    name?: true
    region?: true
    gridTier?: true
    coolingType?: true
    uptime?: true
    totalHashrate?: true
    powerUsage?: true
    gridWidth?: true
    gridHeight?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SiteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Site to aggregate.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sites
    **/
    _count?: true | SiteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SiteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SiteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SiteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SiteMaxAggregateInputType
  }

  export type GetSiteAggregateType<T extends SiteAggregateArgs> = {
        [P in keyof T & keyof AggregateSite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSite[P]>
      : GetScalarType<T[P], AggregateSite[P]>
  }




  export type SiteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SiteWhereInput
    orderBy?: SiteOrderByWithAggregationInput | SiteOrderByWithAggregationInput[]
    by: SiteScalarFieldEnum[] | SiteScalarFieldEnum
    having?: SiteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SiteCountAggregateInputType | true
    _avg?: SiteAvgAggregateInputType
    _sum?: SiteSumAggregateInputType
    _min?: SiteMinAggregateInputType
    _max?: SiteMaxAggregateInputType
  }

  export type SiteGroupByOutputType = {
    id: string
    companyId: string
    name: string
    region: string
    gridTier: number
    coolingType: string
    uptime: number
    totalHashrate: number
    powerUsage: number
    gridWidth: number
    gridHeight: number
    createdAt: Date
    updatedAt: Date
    _count: SiteCountAggregateOutputType | null
    _avg: SiteAvgAggregateOutputType | null
    _sum: SiteSumAggregateOutputType | null
    _min: SiteMinAggregateOutputType | null
    _max: SiteMaxAggregateOutputType | null
  }

  type GetSiteGroupByPayload<T extends SiteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SiteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SiteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SiteGroupByOutputType[P]>
            : GetScalarType<T[P], SiteGroupByOutputType[P]>
        }
      >
    >


  export type SiteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    region?: boolean
    gridTier?: boolean
    coolingType?: boolean
    uptime?: boolean
    totalHashrate?: boolean
    powerUsage?: boolean
    gridWidth?: boolean
    gridHeight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    rigs?: boolean | Site$rigsArgs<ExtArgs>
    energyContracts?: boolean | Site$energyContractsArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    name?: boolean
    region?: boolean
    gridTier?: boolean
    coolingType?: boolean
    uptime?: boolean
    totalHashrate?: boolean
    powerUsage?: boolean
    gridWidth?: boolean
    gridHeight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["site"]>

  export type SiteSelectScalar = {
    id?: boolean
    companyId?: boolean
    name?: boolean
    region?: boolean
    gridTier?: boolean
    coolingType?: boolean
    uptime?: boolean
    totalHashrate?: boolean
    powerUsage?: boolean
    gridWidth?: boolean
    gridHeight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SiteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    rigs?: boolean | Site$rigsArgs<ExtArgs>
    energyContracts?: boolean | Site$energyContractsArgs<ExtArgs>
    _count?: boolean | SiteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SiteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $SitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Site"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      rigs: Prisma.$RigPayload<ExtArgs>[]
      energyContracts: Prisma.$EnergyContractPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      name: string
      region: string
      gridTier: number
      coolingType: string
      uptime: number
      totalHashrate: number
      powerUsage: number
      gridWidth: number
      gridHeight: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["site"]>
    composites: {}
  }

  type SiteGetPayload<S extends boolean | null | undefined | SiteDefaultArgs> = $Result.GetResult<Prisma.$SitePayload, S>

  type SiteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SiteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SiteCountAggregateInputType | true
    }

  export interface SiteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Site'], meta: { name: 'Site' } }
    /**
     * Find zero or one Site that matches the filter.
     * @param {SiteFindUniqueArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SiteFindUniqueArgs>(args: SelectSubset<T, SiteFindUniqueArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Site that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SiteFindUniqueOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SiteFindUniqueOrThrowArgs>(args: SelectSubset<T, SiteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Site that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SiteFindFirstArgs>(args?: SelectSubset<T, SiteFindFirstArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Site that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindFirstOrThrowArgs} args - Arguments to find a Site
     * @example
     * // Get one Site
     * const site = await prisma.site.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SiteFindFirstOrThrowArgs>(args?: SelectSubset<T, SiteFindFirstOrThrowArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sites
     * const sites = await prisma.site.findMany()
     * 
     * // Get first 10 Sites
     * const sites = await prisma.site.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const siteWithIdOnly = await prisma.site.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SiteFindManyArgs>(args?: SelectSubset<T, SiteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Site.
     * @param {SiteCreateArgs} args - Arguments to create a Site.
     * @example
     * // Create one Site
     * const Site = await prisma.site.create({
     *   data: {
     *     // ... data to create a Site
     *   }
     * })
     * 
     */
    create<T extends SiteCreateArgs>(args: SelectSubset<T, SiteCreateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sites.
     * @param {SiteCreateManyArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SiteCreateManyArgs>(args?: SelectSubset<T, SiteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sites and returns the data saved in the database.
     * @param {SiteCreateManyAndReturnArgs} args - Arguments to create many Sites.
     * @example
     * // Create many Sites
     * const site = await prisma.site.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sites and only return the `id`
     * const siteWithIdOnly = await prisma.site.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SiteCreateManyAndReturnArgs>(args?: SelectSubset<T, SiteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Site.
     * @param {SiteDeleteArgs} args - Arguments to delete one Site.
     * @example
     * // Delete one Site
     * const Site = await prisma.site.delete({
     *   where: {
     *     // ... filter to delete one Site
     *   }
     * })
     * 
     */
    delete<T extends SiteDeleteArgs>(args: SelectSubset<T, SiteDeleteArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Site.
     * @param {SiteUpdateArgs} args - Arguments to update one Site.
     * @example
     * // Update one Site
     * const site = await prisma.site.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SiteUpdateArgs>(args: SelectSubset<T, SiteUpdateArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sites.
     * @param {SiteDeleteManyArgs} args - Arguments to filter Sites to delete.
     * @example
     * // Delete a few Sites
     * const { count } = await prisma.site.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SiteDeleteManyArgs>(args?: SelectSubset<T, SiteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sites
     * const site = await prisma.site.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SiteUpdateManyArgs>(args: SelectSubset<T, SiteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Site.
     * @param {SiteUpsertArgs} args - Arguments to update or create a Site.
     * @example
     * // Update or create a Site
     * const site = await prisma.site.upsert({
     *   create: {
     *     // ... data to create a Site
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Site we want to update
     *   }
     * })
     */
    upsert<T extends SiteUpsertArgs>(args: SelectSubset<T, SiteUpsertArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteCountArgs} args - Arguments to filter Sites to count.
     * @example
     * // Count the number of Sites
     * const count = await prisma.site.count({
     *   where: {
     *     // ... the filter for the Sites we want to count
     *   }
     * })
    **/
    count<T extends SiteCountArgs>(
      args?: Subset<T, SiteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SiteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SiteAggregateArgs>(args: Subset<T, SiteAggregateArgs>): Prisma.PrismaPromise<GetSiteAggregateType<T>>

    /**
     * Group by Site.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SiteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SiteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SiteGroupByArgs['orderBy'] }
        : { orderBy?: SiteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SiteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSiteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Site model
   */
  readonly fields: SiteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Site.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SiteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    rigs<T extends Site$rigsArgs<ExtArgs> = {}>(args?: Subset<T, Site$rigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "findMany"> | Null>
    energyContracts<T extends Site$energyContractsArgs<ExtArgs> = {}>(args?: Subset<T, Site$energyContractsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Site model
   */ 
  interface SiteFieldRefs {
    readonly id: FieldRef<"Site", 'String'>
    readonly companyId: FieldRef<"Site", 'String'>
    readonly name: FieldRef<"Site", 'String'>
    readonly region: FieldRef<"Site", 'String'>
    readonly gridTier: FieldRef<"Site", 'Int'>
    readonly coolingType: FieldRef<"Site", 'String'>
    readonly uptime: FieldRef<"Site", 'Float'>
    readonly totalHashrate: FieldRef<"Site", 'Float'>
    readonly powerUsage: FieldRef<"Site", 'Float'>
    readonly gridWidth: FieldRef<"Site", 'Int'>
    readonly gridHeight: FieldRef<"Site", 'Int'>
    readonly createdAt: FieldRef<"Site", 'DateTime'>
    readonly updatedAt: FieldRef<"Site", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Site findUnique
   */
  export type SiteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findUniqueOrThrow
   */
  export type SiteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site findFirst
   */
  export type SiteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findFirstOrThrow
   */
  export type SiteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Site to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sites.
     */
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site findMany
   */
  export type SiteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter, which Sites to fetch.
     */
    where?: SiteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sites to fetch.
     */
    orderBy?: SiteOrderByWithRelationInput | SiteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sites.
     */
    cursor?: SiteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sites.
     */
    skip?: number
    distinct?: SiteScalarFieldEnum | SiteScalarFieldEnum[]
  }

  /**
   * Site create
   */
  export type SiteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to create a Site.
     */
    data: XOR<SiteCreateInput, SiteUncheckedCreateInput>
  }

  /**
   * Site createMany
   */
  export type SiteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Site createManyAndReturn
   */
  export type SiteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sites.
     */
    data: SiteCreateManyInput | SiteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Site update
   */
  export type SiteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The data needed to update a Site.
     */
    data: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
    /**
     * Choose, which Site to update.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site updateMany
   */
  export type SiteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sites.
     */
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyInput>
    /**
     * Filter which Sites to update
     */
    where?: SiteWhereInput
  }

  /**
   * Site upsert
   */
  export type SiteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * The filter to search for the Site to update in case it exists.
     */
    where: SiteWhereUniqueInput
    /**
     * In case the Site found by the `where` argument doesn't exist, create a new Site with this data.
     */
    create: XOR<SiteCreateInput, SiteUncheckedCreateInput>
    /**
     * In case the Site was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SiteUpdateInput, SiteUncheckedUpdateInput>
  }

  /**
   * Site delete
   */
  export type SiteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
    /**
     * Filter which Site to delete.
     */
    where: SiteWhereUniqueInput
  }

  /**
   * Site deleteMany
   */
  export type SiteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sites to delete
     */
    where?: SiteWhereInput
  }

  /**
   * Site.rigs
   */
  export type Site$rigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    where?: RigWhereInput
    orderBy?: RigOrderByWithRelationInput | RigOrderByWithRelationInput[]
    cursor?: RigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RigScalarFieldEnum | RigScalarFieldEnum[]
  }

  /**
   * Site.energyContracts
   */
  export type Site$energyContractsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    where?: EnergyContractWhereInput
    orderBy?: EnergyContractOrderByWithRelationInput | EnergyContractOrderByWithRelationInput[]
    cursor?: EnergyContractWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnergyContractScalarFieldEnum | EnergyContractScalarFieldEnum[]
  }

  /**
   * Site without action
   */
  export type SiteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Site
     */
    select?: SiteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SiteInclude<ExtArgs> | null
  }


  /**
   * Model Rig
   */

  export type AggregateRig = {
    _count: RigCountAggregateOutputType | null
    _avg: RigAvgAggregateOutputType | null
    _sum: RigSumAggregateOutputType | null
    _min: RigMinAggregateOutputType | null
    _max: RigMaxAggregateOutputType | null
  }

  export type RigAvgAggregateOutputType = {
    gridX: number | null
    gridY: number | null
    hashrate: number | null
    efficiency: number | null
    wear: number | null
    purchasePrice: number | null
  }

  export type RigSumAggregateOutputType = {
    gridX: number | null
    gridY: number | null
    hashrate: number | null
    efficiency: number | null
    wear: number | null
    purchasePrice: number | null
  }

  export type RigMinAggregateOutputType = {
    id: string | null
    siteId: string | null
    type: string | null
    gridX: number | null
    gridY: number | null
    hashrate: number | null
    efficiency: number | null
    wear: number | null
    firmware: string | null
    status: string | null
    purchasePrice: number | null
    purchasedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RigMaxAggregateOutputType = {
    id: string | null
    siteId: string | null
    type: string | null
    gridX: number | null
    gridY: number | null
    hashrate: number | null
    efficiency: number | null
    wear: number | null
    firmware: string | null
    status: string | null
    purchasePrice: number | null
    purchasedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RigCountAggregateOutputType = {
    id: number
    siteId: number
    type: number
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear: number
    firmware: number
    status: number
    purchasePrice: number
    purchasedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RigAvgAggregateInputType = {
    gridX?: true
    gridY?: true
    hashrate?: true
    efficiency?: true
    wear?: true
    purchasePrice?: true
  }

  export type RigSumAggregateInputType = {
    gridX?: true
    gridY?: true
    hashrate?: true
    efficiency?: true
    wear?: true
    purchasePrice?: true
  }

  export type RigMinAggregateInputType = {
    id?: true
    siteId?: true
    type?: true
    gridX?: true
    gridY?: true
    hashrate?: true
    efficiency?: true
    wear?: true
    firmware?: true
    status?: true
    purchasePrice?: true
    purchasedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RigMaxAggregateInputType = {
    id?: true
    siteId?: true
    type?: true
    gridX?: true
    gridY?: true
    hashrate?: true
    efficiency?: true
    wear?: true
    firmware?: true
    status?: true
    purchasePrice?: true
    purchasedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RigCountAggregateInputType = {
    id?: true
    siteId?: true
    type?: true
    gridX?: true
    gridY?: true
    hashrate?: true
    efficiency?: true
    wear?: true
    firmware?: true
    status?: true
    purchasePrice?: true
    purchasedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rig to aggregate.
     */
    where?: RigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rigs to fetch.
     */
    orderBy?: RigOrderByWithRelationInput | RigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rigs
    **/
    _count?: true | RigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RigMaxAggregateInputType
  }

  export type GetRigAggregateType<T extends RigAggregateArgs> = {
        [P in keyof T & keyof AggregateRig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRig[P]>
      : GetScalarType<T[P], AggregateRig[P]>
  }




  export type RigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RigWhereInput
    orderBy?: RigOrderByWithAggregationInput | RigOrderByWithAggregationInput[]
    by: RigScalarFieldEnum[] | RigScalarFieldEnum
    having?: RigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RigCountAggregateInputType | true
    _avg?: RigAvgAggregateInputType
    _sum?: RigSumAggregateInputType
    _min?: RigMinAggregateInputType
    _max?: RigMaxAggregateInputType
  }

  export type RigGroupByOutputType = {
    id: string
    siteId: string
    type: string
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear: number
    firmware: string
    status: string
    purchasePrice: number
    purchasedAt: Date
    createdAt: Date
    updatedAt: Date
    _count: RigCountAggregateOutputType | null
    _avg: RigAvgAggregateOutputType | null
    _sum: RigSumAggregateOutputType | null
    _min: RigMinAggregateOutputType | null
    _max: RigMaxAggregateOutputType | null
  }

  type GetRigGroupByPayload<T extends RigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RigGroupByOutputType[P]>
            : GetScalarType<T[P], RigGroupByOutputType[P]>
        }
      >
    >


  export type RigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    type?: boolean
    gridX?: boolean
    gridY?: boolean
    hashrate?: boolean
    efficiency?: boolean
    wear?: boolean
    firmware?: boolean
    status?: boolean
    purchasePrice?: boolean
    purchasedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rig"]>

  export type RigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    type?: boolean
    gridX?: boolean
    gridY?: boolean
    hashrate?: boolean
    efficiency?: boolean
    wear?: boolean
    firmware?: boolean
    status?: boolean
    purchasePrice?: boolean
    purchasedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rig"]>

  export type RigSelectScalar = {
    id?: boolean
    siteId?: boolean
    type?: boolean
    gridX?: boolean
    gridY?: boolean
    hashrate?: boolean
    efficiency?: boolean
    wear?: boolean
    firmware?: boolean
    status?: boolean
    purchasePrice?: boolean
    purchasedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }
  export type RigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }

  export type $RigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rig"
    objects: {
      site: Prisma.$SitePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      siteId: string
      type: string
      gridX: number
      gridY: number
      hashrate: number
      efficiency: number
      wear: number
      firmware: string
      status: string
      purchasePrice: number
      purchasedAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["rig"]>
    composites: {}
  }

  type RigGetPayload<S extends boolean | null | undefined | RigDefaultArgs> = $Result.GetResult<Prisma.$RigPayload, S>

  type RigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RigFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RigCountAggregateInputType | true
    }

  export interface RigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rig'], meta: { name: 'Rig' } }
    /**
     * Find zero or one Rig that matches the filter.
     * @param {RigFindUniqueArgs} args - Arguments to find a Rig
     * @example
     * // Get one Rig
     * const rig = await prisma.rig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RigFindUniqueArgs>(args: SelectSubset<T, RigFindUniqueArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Rig that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RigFindUniqueOrThrowArgs} args - Arguments to find a Rig
     * @example
     * // Get one Rig
     * const rig = await prisma.rig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RigFindUniqueOrThrowArgs>(args: SelectSubset<T, RigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Rig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RigFindFirstArgs} args - Arguments to find a Rig
     * @example
     * // Get one Rig
     * const rig = await prisma.rig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RigFindFirstArgs>(args?: SelectSubset<T, RigFindFirstArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Rig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RigFindFirstOrThrowArgs} args - Arguments to find a Rig
     * @example
     * // Get one Rig
     * const rig = await prisma.rig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RigFindFirstOrThrowArgs>(args?: SelectSubset<T, RigFindFirstOrThrowArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rigs
     * const rigs = await prisma.rig.findMany()
     * 
     * // Get first 10 Rigs
     * const rigs = await prisma.rig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rigWithIdOnly = await prisma.rig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RigFindManyArgs>(args?: SelectSubset<T, RigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Rig.
     * @param {RigCreateArgs} args - Arguments to create a Rig.
     * @example
     * // Create one Rig
     * const Rig = await prisma.rig.create({
     *   data: {
     *     // ... data to create a Rig
     *   }
     * })
     * 
     */
    create<T extends RigCreateArgs>(args: SelectSubset<T, RigCreateArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rigs.
     * @param {RigCreateManyArgs} args - Arguments to create many Rigs.
     * @example
     * // Create many Rigs
     * const rig = await prisma.rig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RigCreateManyArgs>(args?: SelectSubset<T, RigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rigs and returns the data saved in the database.
     * @param {RigCreateManyAndReturnArgs} args - Arguments to create many Rigs.
     * @example
     * // Create many Rigs
     * const rig = await prisma.rig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rigs and only return the `id`
     * const rigWithIdOnly = await prisma.rig.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RigCreateManyAndReturnArgs>(args?: SelectSubset<T, RigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Rig.
     * @param {RigDeleteArgs} args - Arguments to delete one Rig.
     * @example
     * // Delete one Rig
     * const Rig = await prisma.rig.delete({
     *   where: {
     *     // ... filter to delete one Rig
     *   }
     * })
     * 
     */
    delete<T extends RigDeleteArgs>(args: SelectSubset<T, RigDeleteArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Rig.
     * @param {RigUpdateArgs} args - Arguments to update one Rig.
     * @example
     * // Update one Rig
     * const rig = await prisma.rig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RigUpdateArgs>(args: SelectSubset<T, RigUpdateArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rigs.
     * @param {RigDeleteManyArgs} args - Arguments to filter Rigs to delete.
     * @example
     * // Delete a few Rigs
     * const { count } = await prisma.rig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RigDeleteManyArgs>(args?: SelectSubset<T, RigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rigs
     * const rig = await prisma.rig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RigUpdateManyArgs>(args: SelectSubset<T, RigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rig.
     * @param {RigUpsertArgs} args - Arguments to update or create a Rig.
     * @example
     * // Update or create a Rig
     * const rig = await prisma.rig.upsert({
     *   create: {
     *     // ... data to create a Rig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rig we want to update
     *   }
     * })
     */
    upsert<T extends RigUpsertArgs>(args: SelectSubset<T, RigUpsertArgs<ExtArgs>>): Prisma__RigClient<$Result.GetResult<Prisma.$RigPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RigCountArgs} args - Arguments to filter Rigs to count.
     * @example
     * // Count the number of Rigs
     * const count = await prisma.rig.count({
     *   where: {
     *     // ... the filter for the Rigs we want to count
     *   }
     * })
    **/
    count<T extends RigCountArgs>(
      args?: Subset<T, RigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RigAggregateArgs>(args: Subset<T, RigAggregateArgs>): Prisma.PrismaPromise<GetRigAggregateType<T>>

    /**
     * Group by Rig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RigGroupByArgs['orderBy'] }
        : { orderBy?: RigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rig model
   */
  readonly fields: RigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    site<T extends SiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiteDefaultArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rig model
   */ 
  interface RigFieldRefs {
    readonly id: FieldRef<"Rig", 'String'>
    readonly siteId: FieldRef<"Rig", 'String'>
    readonly type: FieldRef<"Rig", 'String'>
    readonly gridX: FieldRef<"Rig", 'Int'>
    readonly gridY: FieldRef<"Rig", 'Int'>
    readonly hashrate: FieldRef<"Rig", 'Float'>
    readonly efficiency: FieldRef<"Rig", 'Float'>
    readonly wear: FieldRef<"Rig", 'Float'>
    readonly firmware: FieldRef<"Rig", 'String'>
    readonly status: FieldRef<"Rig", 'String'>
    readonly purchasePrice: FieldRef<"Rig", 'Float'>
    readonly purchasedAt: FieldRef<"Rig", 'DateTime'>
    readonly createdAt: FieldRef<"Rig", 'DateTime'>
    readonly updatedAt: FieldRef<"Rig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Rig findUnique
   */
  export type RigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * Filter, which Rig to fetch.
     */
    where: RigWhereUniqueInput
  }

  /**
   * Rig findUniqueOrThrow
   */
  export type RigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * Filter, which Rig to fetch.
     */
    where: RigWhereUniqueInput
  }

  /**
   * Rig findFirst
   */
  export type RigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * Filter, which Rig to fetch.
     */
    where?: RigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rigs to fetch.
     */
    orderBy?: RigOrderByWithRelationInput | RigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rigs.
     */
    cursor?: RigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rigs.
     */
    distinct?: RigScalarFieldEnum | RigScalarFieldEnum[]
  }

  /**
   * Rig findFirstOrThrow
   */
  export type RigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * Filter, which Rig to fetch.
     */
    where?: RigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rigs to fetch.
     */
    orderBy?: RigOrderByWithRelationInput | RigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rigs.
     */
    cursor?: RigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rigs.
     */
    distinct?: RigScalarFieldEnum | RigScalarFieldEnum[]
  }

  /**
   * Rig findMany
   */
  export type RigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * Filter, which Rigs to fetch.
     */
    where?: RigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rigs to fetch.
     */
    orderBy?: RigOrderByWithRelationInput | RigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rigs.
     */
    cursor?: RigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rigs.
     */
    skip?: number
    distinct?: RigScalarFieldEnum | RigScalarFieldEnum[]
  }

  /**
   * Rig create
   */
  export type RigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * The data needed to create a Rig.
     */
    data: XOR<RigCreateInput, RigUncheckedCreateInput>
  }

  /**
   * Rig createMany
   */
  export type RigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rigs.
     */
    data: RigCreateManyInput | RigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rig createManyAndReturn
   */
  export type RigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rigs.
     */
    data: RigCreateManyInput | RigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Rig update
   */
  export type RigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * The data needed to update a Rig.
     */
    data: XOR<RigUpdateInput, RigUncheckedUpdateInput>
    /**
     * Choose, which Rig to update.
     */
    where: RigWhereUniqueInput
  }

  /**
   * Rig updateMany
   */
  export type RigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rigs.
     */
    data: XOR<RigUpdateManyMutationInput, RigUncheckedUpdateManyInput>
    /**
     * Filter which Rigs to update
     */
    where?: RigWhereInput
  }

  /**
   * Rig upsert
   */
  export type RigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * The filter to search for the Rig to update in case it exists.
     */
    where: RigWhereUniqueInput
    /**
     * In case the Rig found by the `where` argument doesn't exist, create a new Rig with this data.
     */
    create: XOR<RigCreateInput, RigUncheckedCreateInput>
    /**
     * In case the Rig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RigUpdateInput, RigUncheckedUpdateInput>
  }

  /**
   * Rig delete
   */
  export type RigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
    /**
     * Filter which Rig to delete.
     */
    where: RigWhereUniqueInput
  }

  /**
   * Rig deleteMany
   */
  export type RigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rigs to delete
     */
    where?: RigWhereInput
  }

  /**
   * Rig without action
   */
  export type RigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rig
     */
    select?: RigSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RigInclude<ExtArgs> | null
  }


  /**
   * Model EnergyContract
   */

  export type AggregateEnergyContract = {
    _count: EnergyContractCountAggregateOutputType | null
    _avg: EnergyContractAvgAggregateOutputType | null
    _sum: EnergyContractSumAggregateOutputType | null
    _min: EnergyContractMinAggregateOutputType | null
    _max: EnergyContractMaxAggregateOutputType | null
  }

  export type EnergyContractAvgAggregateOutputType = {
    pricePerKWh: number | null
    capacity: number | null
  }

  export type EnergyContractSumAggregateOutputType = {
    pricePerKWh: number | null
    capacity: number | null
  }

  export type EnergyContractMinAggregateOutputType = {
    id: string | null
    siteId: string | null
    provider: string | null
    pricePerKWh: number | null
    capacity: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type EnergyContractMaxAggregateOutputType = {
    id: string | null
    siteId: string | null
    provider: string | null
    pricePerKWh: number | null
    capacity: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type EnergyContractCountAggregateOutputType = {
    id: number
    siteId: number
    provider: number
    pricePerKWh: number
    capacity: number
    startDate: number
    endDate: number
    createdAt: number
    _all: number
  }


  export type EnergyContractAvgAggregateInputType = {
    pricePerKWh?: true
    capacity?: true
  }

  export type EnergyContractSumAggregateInputType = {
    pricePerKWh?: true
    capacity?: true
  }

  export type EnergyContractMinAggregateInputType = {
    id?: true
    siteId?: true
    provider?: true
    pricePerKWh?: true
    capacity?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type EnergyContractMaxAggregateInputType = {
    id?: true
    siteId?: true
    provider?: true
    pricePerKWh?: true
    capacity?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type EnergyContractCountAggregateInputType = {
    id?: true
    siteId?: true
    provider?: true
    pricePerKWh?: true
    capacity?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    _all?: true
  }

  export type EnergyContractAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnergyContract to aggregate.
     */
    where?: EnergyContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnergyContracts to fetch.
     */
    orderBy?: EnergyContractOrderByWithRelationInput | EnergyContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnergyContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnergyContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnergyContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EnergyContracts
    **/
    _count?: true | EnergyContractCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnergyContractAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnergyContractSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnergyContractMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnergyContractMaxAggregateInputType
  }

  export type GetEnergyContractAggregateType<T extends EnergyContractAggregateArgs> = {
        [P in keyof T & keyof AggregateEnergyContract]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnergyContract[P]>
      : GetScalarType<T[P], AggregateEnergyContract[P]>
  }




  export type EnergyContractGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnergyContractWhereInput
    orderBy?: EnergyContractOrderByWithAggregationInput | EnergyContractOrderByWithAggregationInput[]
    by: EnergyContractScalarFieldEnum[] | EnergyContractScalarFieldEnum
    having?: EnergyContractScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnergyContractCountAggregateInputType | true
    _avg?: EnergyContractAvgAggregateInputType
    _sum?: EnergyContractSumAggregateInputType
    _min?: EnergyContractMinAggregateInputType
    _max?: EnergyContractMaxAggregateInputType
  }

  export type EnergyContractGroupByOutputType = {
    id: string
    siteId: string
    provider: string
    pricePerKWh: number
    capacity: number
    startDate: Date
    endDate: Date
    createdAt: Date
    _count: EnergyContractCountAggregateOutputType | null
    _avg: EnergyContractAvgAggregateOutputType | null
    _sum: EnergyContractSumAggregateOutputType | null
    _min: EnergyContractMinAggregateOutputType | null
    _max: EnergyContractMaxAggregateOutputType | null
  }

  type GetEnergyContractGroupByPayload<T extends EnergyContractGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnergyContractGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnergyContractGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnergyContractGroupByOutputType[P]>
            : GetScalarType<T[P], EnergyContractGroupByOutputType[P]>
        }
      >
    >


  export type EnergyContractSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    provider?: boolean
    pricePerKWh?: boolean
    capacity?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["energyContract"]>

  export type EnergyContractSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    siteId?: boolean
    provider?: boolean
    pricePerKWh?: boolean
    capacity?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["energyContract"]>

  export type EnergyContractSelectScalar = {
    id?: boolean
    siteId?: boolean
    provider?: boolean
    pricePerKWh?: boolean
    capacity?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }

  export type EnergyContractInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }
  export type EnergyContractIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    site?: boolean | SiteDefaultArgs<ExtArgs>
  }

  export type $EnergyContractPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EnergyContract"
    objects: {
      site: Prisma.$SitePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      siteId: string
      provider: string
      pricePerKWh: number
      capacity: number
      startDate: Date
      endDate: Date
      createdAt: Date
    }, ExtArgs["result"]["energyContract"]>
    composites: {}
  }

  type EnergyContractGetPayload<S extends boolean | null | undefined | EnergyContractDefaultArgs> = $Result.GetResult<Prisma.$EnergyContractPayload, S>

  type EnergyContractCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnergyContractFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnergyContractCountAggregateInputType | true
    }

  export interface EnergyContractDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EnergyContract'], meta: { name: 'EnergyContract' } }
    /**
     * Find zero or one EnergyContract that matches the filter.
     * @param {EnergyContractFindUniqueArgs} args - Arguments to find a EnergyContract
     * @example
     * // Get one EnergyContract
     * const energyContract = await prisma.energyContract.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnergyContractFindUniqueArgs>(args: SelectSubset<T, EnergyContractFindUniqueArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EnergyContract that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnergyContractFindUniqueOrThrowArgs} args - Arguments to find a EnergyContract
     * @example
     * // Get one EnergyContract
     * const energyContract = await prisma.energyContract.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnergyContractFindUniqueOrThrowArgs>(args: SelectSubset<T, EnergyContractFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EnergyContract that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnergyContractFindFirstArgs} args - Arguments to find a EnergyContract
     * @example
     * // Get one EnergyContract
     * const energyContract = await prisma.energyContract.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnergyContractFindFirstArgs>(args?: SelectSubset<T, EnergyContractFindFirstArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EnergyContract that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnergyContractFindFirstOrThrowArgs} args - Arguments to find a EnergyContract
     * @example
     * // Get one EnergyContract
     * const energyContract = await prisma.energyContract.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnergyContractFindFirstOrThrowArgs>(args?: SelectSubset<T, EnergyContractFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EnergyContracts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnergyContractFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EnergyContracts
     * const energyContracts = await prisma.energyContract.findMany()
     * 
     * // Get first 10 EnergyContracts
     * const energyContracts = await prisma.energyContract.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const energyContractWithIdOnly = await prisma.energyContract.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnergyContractFindManyArgs>(args?: SelectSubset<T, EnergyContractFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EnergyContract.
     * @param {EnergyContractCreateArgs} args - Arguments to create a EnergyContract.
     * @example
     * // Create one EnergyContract
     * const EnergyContract = await prisma.energyContract.create({
     *   data: {
     *     // ... data to create a EnergyContract
     *   }
     * })
     * 
     */
    create<T extends EnergyContractCreateArgs>(args: SelectSubset<T, EnergyContractCreateArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EnergyContracts.
     * @param {EnergyContractCreateManyArgs} args - Arguments to create many EnergyContracts.
     * @example
     * // Create many EnergyContracts
     * const energyContract = await prisma.energyContract.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnergyContractCreateManyArgs>(args?: SelectSubset<T, EnergyContractCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EnergyContracts and returns the data saved in the database.
     * @param {EnergyContractCreateManyAndReturnArgs} args - Arguments to create many EnergyContracts.
     * @example
     * // Create many EnergyContracts
     * const energyContract = await prisma.energyContract.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EnergyContracts and only return the `id`
     * const energyContractWithIdOnly = await prisma.energyContract.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnergyContractCreateManyAndReturnArgs>(args?: SelectSubset<T, EnergyContractCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EnergyContract.
     * @param {EnergyContractDeleteArgs} args - Arguments to delete one EnergyContract.
     * @example
     * // Delete one EnergyContract
     * const EnergyContract = await prisma.energyContract.delete({
     *   where: {
     *     // ... filter to delete one EnergyContract
     *   }
     * })
     * 
     */
    delete<T extends EnergyContractDeleteArgs>(args: SelectSubset<T, EnergyContractDeleteArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EnergyContract.
     * @param {EnergyContractUpdateArgs} args - Arguments to update one EnergyContract.
     * @example
     * // Update one EnergyContract
     * const energyContract = await prisma.energyContract.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnergyContractUpdateArgs>(args: SelectSubset<T, EnergyContractUpdateArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EnergyContracts.
     * @param {EnergyContractDeleteManyArgs} args - Arguments to filter EnergyContracts to delete.
     * @example
     * // Delete a few EnergyContracts
     * const { count } = await prisma.energyContract.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnergyContractDeleteManyArgs>(args?: SelectSubset<T, EnergyContractDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EnergyContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnergyContractUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EnergyContracts
     * const energyContract = await prisma.energyContract.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnergyContractUpdateManyArgs>(args: SelectSubset<T, EnergyContractUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EnergyContract.
     * @param {EnergyContractUpsertArgs} args - Arguments to update or create a EnergyContract.
     * @example
     * // Update or create a EnergyContract
     * const energyContract = await prisma.energyContract.upsert({
     *   create: {
     *     // ... data to create a EnergyContract
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EnergyContract we want to update
     *   }
     * })
     */
    upsert<T extends EnergyContractUpsertArgs>(args: SelectSubset<T, EnergyContractUpsertArgs<ExtArgs>>): Prisma__EnergyContractClient<$Result.GetResult<Prisma.$EnergyContractPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EnergyContracts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnergyContractCountArgs} args - Arguments to filter EnergyContracts to count.
     * @example
     * // Count the number of EnergyContracts
     * const count = await prisma.energyContract.count({
     *   where: {
     *     // ... the filter for the EnergyContracts we want to count
     *   }
     * })
    **/
    count<T extends EnergyContractCountArgs>(
      args?: Subset<T, EnergyContractCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnergyContractCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EnergyContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnergyContractAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnergyContractAggregateArgs>(args: Subset<T, EnergyContractAggregateArgs>): Prisma.PrismaPromise<GetEnergyContractAggregateType<T>>

    /**
     * Group by EnergyContract.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnergyContractGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnergyContractGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnergyContractGroupByArgs['orderBy'] }
        : { orderBy?: EnergyContractGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnergyContractGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnergyContractGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EnergyContract model
   */
  readonly fields: EnergyContractFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EnergyContract.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnergyContractClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    site<T extends SiteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SiteDefaultArgs<ExtArgs>>): Prisma__SiteClient<$Result.GetResult<Prisma.$SitePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EnergyContract model
   */ 
  interface EnergyContractFieldRefs {
    readonly id: FieldRef<"EnergyContract", 'String'>
    readonly siteId: FieldRef<"EnergyContract", 'String'>
    readonly provider: FieldRef<"EnergyContract", 'String'>
    readonly pricePerKWh: FieldRef<"EnergyContract", 'Float'>
    readonly capacity: FieldRef<"EnergyContract", 'Float'>
    readonly startDate: FieldRef<"EnergyContract", 'DateTime'>
    readonly endDate: FieldRef<"EnergyContract", 'DateTime'>
    readonly createdAt: FieldRef<"EnergyContract", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EnergyContract findUnique
   */
  export type EnergyContractFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * Filter, which EnergyContract to fetch.
     */
    where: EnergyContractWhereUniqueInput
  }

  /**
   * EnergyContract findUniqueOrThrow
   */
  export type EnergyContractFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * Filter, which EnergyContract to fetch.
     */
    where: EnergyContractWhereUniqueInput
  }

  /**
   * EnergyContract findFirst
   */
  export type EnergyContractFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * Filter, which EnergyContract to fetch.
     */
    where?: EnergyContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnergyContracts to fetch.
     */
    orderBy?: EnergyContractOrderByWithRelationInput | EnergyContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnergyContracts.
     */
    cursor?: EnergyContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnergyContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnergyContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnergyContracts.
     */
    distinct?: EnergyContractScalarFieldEnum | EnergyContractScalarFieldEnum[]
  }

  /**
   * EnergyContract findFirstOrThrow
   */
  export type EnergyContractFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * Filter, which EnergyContract to fetch.
     */
    where?: EnergyContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnergyContracts to fetch.
     */
    orderBy?: EnergyContractOrderByWithRelationInput | EnergyContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EnergyContracts.
     */
    cursor?: EnergyContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnergyContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnergyContracts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EnergyContracts.
     */
    distinct?: EnergyContractScalarFieldEnum | EnergyContractScalarFieldEnum[]
  }

  /**
   * EnergyContract findMany
   */
  export type EnergyContractFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * Filter, which EnergyContracts to fetch.
     */
    where?: EnergyContractWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EnergyContracts to fetch.
     */
    orderBy?: EnergyContractOrderByWithRelationInput | EnergyContractOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EnergyContracts.
     */
    cursor?: EnergyContractWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EnergyContracts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EnergyContracts.
     */
    skip?: number
    distinct?: EnergyContractScalarFieldEnum | EnergyContractScalarFieldEnum[]
  }

  /**
   * EnergyContract create
   */
  export type EnergyContractCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * The data needed to create a EnergyContract.
     */
    data: XOR<EnergyContractCreateInput, EnergyContractUncheckedCreateInput>
  }

  /**
   * EnergyContract createMany
   */
  export type EnergyContractCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EnergyContracts.
     */
    data: EnergyContractCreateManyInput | EnergyContractCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EnergyContract createManyAndReturn
   */
  export type EnergyContractCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EnergyContracts.
     */
    data: EnergyContractCreateManyInput | EnergyContractCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EnergyContract update
   */
  export type EnergyContractUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * The data needed to update a EnergyContract.
     */
    data: XOR<EnergyContractUpdateInput, EnergyContractUncheckedUpdateInput>
    /**
     * Choose, which EnergyContract to update.
     */
    where: EnergyContractWhereUniqueInput
  }

  /**
   * EnergyContract updateMany
   */
  export type EnergyContractUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EnergyContracts.
     */
    data: XOR<EnergyContractUpdateManyMutationInput, EnergyContractUncheckedUpdateManyInput>
    /**
     * Filter which EnergyContracts to update
     */
    where?: EnergyContractWhereInput
  }

  /**
   * EnergyContract upsert
   */
  export type EnergyContractUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * The filter to search for the EnergyContract to update in case it exists.
     */
    where: EnergyContractWhereUniqueInput
    /**
     * In case the EnergyContract found by the `where` argument doesn't exist, create a new EnergyContract with this data.
     */
    create: XOR<EnergyContractCreateInput, EnergyContractUncheckedCreateInput>
    /**
     * In case the EnergyContract was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnergyContractUpdateInput, EnergyContractUncheckedUpdateInput>
  }

  /**
   * EnergyContract delete
   */
  export type EnergyContractDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
    /**
     * Filter which EnergyContract to delete.
     */
    where: EnergyContractWhereUniqueInput
  }

  /**
   * EnergyContract deleteMany
   */
  export type EnergyContractDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EnergyContracts to delete
     */
    where?: EnergyContractWhereInput
  }

  /**
   * EnergyContract without action
   */
  export type EnergyContractDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EnergyContract
     */
    select?: EnergyContractSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnergyContractInclude<ExtArgs> | null
  }


  /**
   * Model Position
   */

  export type AggregatePosition = {
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  export type PositionAvgAggregateOutputType = {
    quantity: number | null
    entryPrice: number | null
    leverage: number | null
    margin: number | null
    liquidationPrice: number | null
    pnl: number | null
  }

  export type PositionSumAggregateOutputType = {
    quantity: number | null
    entryPrice: number | null
    leverage: number | null
    margin: number | null
    liquidationPrice: number | null
    pnl: number | null
  }

  export type PositionMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    instrument: string | null
    side: string | null
    quantity: number | null
    entryPrice: number | null
    leverage: number | null
    margin: number | null
    liquidationPrice: number | null
    status: string | null
    pnl: number | null
    openedAt: Date | null
    closedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PositionMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    instrument: string | null
    side: string | null
    quantity: number | null
    entryPrice: number | null
    leverage: number | null
    margin: number | null
    liquidationPrice: number | null
    status: string | null
    pnl: number | null
    openedAt: Date | null
    closedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PositionCountAggregateOutputType = {
    id: number
    companyId: number
    instrument: number
    side: number
    quantity: number
    entryPrice: number
    leverage: number
    margin: number
    liquidationPrice: number
    status: number
    pnl: number
    openedAt: number
    closedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PositionAvgAggregateInputType = {
    quantity?: true
    entryPrice?: true
    leverage?: true
    margin?: true
    liquidationPrice?: true
    pnl?: true
  }

  export type PositionSumAggregateInputType = {
    quantity?: true
    entryPrice?: true
    leverage?: true
    margin?: true
    liquidationPrice?: true
    pnl?: true
  }

  export type PositionMinAggregateInputType = {
    id?: true
    companyId?: true
    instrument?: true
    side?: true
    quantity?: true
    entryPrice?: true
    leverage?: true
    margin?: true
    liquidationPrice?: true
    status?: true
    pnl?: true
    openedAt?: true
    closedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PositionMaxAggregateInputType = {
    id?: true
    companyId?: true
    instrument?: true
    side?: true
    quantity?: true
    entryPrice?: true
    leverage?: true
    margin?: true
    liquidationPrice?: true
    status?: true
    pnl?: true
    openedAt?: true
    closedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PositionCountAggregateInputType = {
    id?: true
    companyId?: true
    instrument?: true
    side?: true
    quantity?: true
    entryPrice?: true
    leverage?: true
    margin?: true
    liquidationPrice?: true
    status?: true
    pnl?: true
    openedAt?: true
    closedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PositionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Position to aggregate.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Positions
    **/
    _count?: true | PositionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PositionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PositionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PositionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PositionMaxAggregateInputType
  }

  export type GetPositionAggregateType<T extends PositionAggregateArgs> = {
        [P in keyof T & keyof AggregatePosition]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosition[P]>
      : GetScalarType<T[P], AggregatePosition[P]>
  }




  export type PositionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PositionWhereInput
    orderBy?: PositionOrderByWithAggregationInput | PositionOrderByWithAggregationInput[]
    by: PositionScalarFieldEnum[] | PositionScalarFieldEnum
    having?: PositionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PositionCountAggregateInputType | true
    _avg?: PositionAvgAggregateInputType
    _sum?: PositionSumAggregateInputType
    _min?: PositionMinAggregateInputType
    _max?: PositionMaxAggregateInputType
  }

  export type PositionGroupByOutputType = {
    id: string
    companyId: string
    instrument: string
    side: string
    quantity: number
    entryPrice: number
    leverage: number
    margin: number | null
    liquidationPrice: number | null
    status: string
    pnl: number
    openedAt: Date
    closedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PositionCountAggregateOutputType | null
    _avg: PositionAvgAggregateOutputType | null
    _sum: PositionSumAggregateOutputType | null
    _min: PositionMinAggregateOutputType | null
    _max: PositionMaxAggregateOutputType | null
  }

  type GetPositionGroupByPayload<T extends PositionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PositionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PositionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PositionGroupByOutputType[P]>
            : GetScalarType<T[P], PositionGroupByOutputType[P]>
        }
      >
    >


  export type PositionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    instrument?: boolean
    side?: boolean
    quantity?: boolean
    entryPrice?: boolean
    leverage?: boolean
    margin?: boolean
    liquidationPrice?: boolean
    status?: boolean
    pnl?: boolean
    openedAt?: boolean
    closedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    instrument?: boolean
    side?: boolean
    quantity?: boolean
    entryPrice?: boolean
    leverage?: boolean
    margin?: boolean
    liquidationPrice?: boolean
    status?: boolean
    pnl?: boolean
    openedAt?: boolean
    closedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["position"]>

  export type PositionSelectScalar = {
    id?: boolean
    companyId?: boolean
    instrument?: boolean
    side?: boolean
    quantity?: boolean
    entryPrice?: boolean
    leverage?: boolean
    margin?: boolean
    liquidationPrice?: boolean
    status?: boolean
    pnl?: boolean
    openedAt?: boolean
    closedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PositionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type PositionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $PositionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Position"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      instrument: string
      side: string
      quantity: number
      entryPrice: number
      leverage: number
      margin: number | null
      liquidationPrice: number | null
      status: string
      pnl: number
      openedAt: Date
      closedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["position"]>
    composites: {}
  }

  type PositionGetPayload<S extends boolean | null | undefined | PositionDefaultArgs> = $Result.GetResult<Prisma.$PositionPayload, S>

  type PositionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PositionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PositionCountAggregateInputType | true
    }

  export interface PositionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Position'], meta: { name: 'Position' } }
    /**
     * Find zero or one Position that matches the filter.
     * @param {PositionFindUniqueArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PositionFindUniqueArgs>(args: SelectSubset<T, PositionFindUniqueArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Position that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PositionFindUniqueOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PositionFindUniqueOrThrowArgs>(args: SelectSubset<T, PositionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Position that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PositionFindFirstArgs>(args?: SelectSubset<T, PositionFindFirstArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Position that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindFirstOrThrowArgs} args - Arguments to find a Position
     * @example
     * // Get one Position
     * const position = await prisma.position.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PositionFindFirstOrThrowArgs>(args?: SelectSubset<T, PositionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Positions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Positions
     * const positions = await prisma.position.findMany()
     * 
     * // Get first 10 Positions
     * const positions = await prisma.position.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const positionWithIdOnly = await prisma.position.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PositionFindManyArgs>(args?: SelectSubset<T, PositionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Position.
     * @param {PositionCreateArgs} args - Arguments to create a Position.
     * @example
     * // Create one Position
     * const Position = await prisma.position.create({
     *   data: {
     *     // ... data to create a Position
     *   }
     * })
     * 
     */
    create<T extends PositionCreateArgs>(args: SelectSubset<T, PositionCreateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Positions.
     * @param {PositionCreateManyArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PositionCreateManyArgs>(args?: SelectSubset<T, PositionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Positions and returns the data saved in the database.
     * @param {PositionCreateManyAndReturnArgs} args - Arguments to create many Positions.
     * @example
     * // Create many Positions
     * const position = await prisma.position.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Positions and only return the `id`
     * const positionWithIdOnly = await prisma.position.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PositionCreateManyAndReturnArgs>(args?: SelectSubset<T, PositionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Position.
     * @param {PositionDeleteArgs} args - Arguments to delete one Position.
     * @example
     * // Delete one Position
     * const Position = await prisma.position.delete({
     *   where: {
     *     // ... filter to delete one Position
     *   }
     * })
     * 
     */
    delete<T extends PositionDeleteArgs>(args: SelectSubset<T, PositionDeleteArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Position.
     * @param {PositionUpdateArgs} args - Arguments to update one Position.
     * @example
     * // Update one Position
     * const position = await prisma.position.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PositionUpdateArgs>(args: SelectSubset<T, PositionUpdateArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Positions.
     * @param {PositionDeleteManyArgs} args - Arguments to filter Positions to delete.
     * @example
     * // Delete a few Positions
     * const { count } = await prisma.position.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PositionDeleteManyArgs>(args?: SelectSubset<T, PositionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Positions
     * const position = await prisma.position.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PositionUpdateManyArgs>(args: SelectSubset<T, PositionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Position.
     * @param {PositionUpsertArgs} args - Arguments to update or create a Position.
     * @example
     * // Update or create a Position
     * const position = await prisma.position.upsert({
     *   create: {
     *     // ... data to create a Position
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Position we want to update
     *   }
     * })
     */
    upsert<T extends PositionUpsertArgs>(args: SelectSubset<T, PositionUpsertArgs<ExtArgs>>): Prisma__PositionClient<$Result.GetResult<Prisma.$PositionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Positions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionCountArgs} args - Arguments to filter Positions to count.
     * @example
     * // Count the number of Positions
     * const count = await prisma.position.count({
     *   where: {
     *     // ... the filter for the Positions we want to count
     *   }
     * })
    **/
    count<T extends PositionCountArgs>(
      args?: Subset<T, PositionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PositionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PositionAggregateArgs>(args: Subset<T, PositionAggregateArgs>): Prisma.PrismaPromise<GetPositionAggregateType<T>>

    /**
     * Group by Position.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PositionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PositionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PositionGroupByArgs['orderBy'] }
        : { orderBy?: PositionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PositionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPositionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Position model
   */
  readonly fields: PositionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Position.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PositionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Position model
   */ 
  interface PositionFieldRefs {
    readonly id: FieldRef<"Position", 'String'>
    readonly companyId: FieldRef<"Position", 'String'>
    readonly instrument: FieldRef<"Position", 'String'>
    readonly side: FieldRef<"Position", 'String'>
    readonly quantity: FieldRef<"Position", 'Float'>
    readonly entryPrice: FieldRef<"Position", 'Float'>
    readonly leverage: FieldRef<"Position", 'Float'>
    readonly margin: FieldRef<"Position", 'Float'>
    readonly liquidationPrice: FieldRef<"Position", 'Float'>
    readonly status: FieldRef<"Position", 'String'>
    readonly pnl: FieldRef<"Position", 'Float'>
    readonly openedAt: FieldRef<"Position", 'DateTime'>
    readonly closedAt: FieldRef<"Position", 'DateTime'>
    readonly createdAt: FieldRef<"Position", 'DateTime'>
    readonly updatedAt: FieldRef<"Position", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Position findUnique
   */
  export type PositionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findUniqueOrThrow
   */
  export type PositionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position findFirst
   */
  export type PositionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findFirstOrThrow
   */
  export type PositionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Position to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Positions.
     */
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position findMany
   */
  export type PositionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter, which Positions to fetch.
     */
    where?: PositionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Positions to fetch.
     */
    orderBy?: PositionOrderByWithRelationInput | PositionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Positions.
     */
    cursor?: PositionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Positions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Positions.
     */
    skip?: number
    distinct?: PositionScalarFieldEnum | PositionScalarFieldEnum[]
  }

  /**
   * Position create
   */
  export type PositionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to create a Position.
     */
    data: XOR<PositionCreateInput, PositionUncheckedCreateInput>
  }

  /**
   * Position createMany
   */
  export type PositionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Position createManyAndReturn
   */
  export type PositionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Positions.
     */
    data: PositionCreateManyInput | PositionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Position update
   */
  export type PositionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The data needed to update a Position.
     */
    data: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
    /**
     * Choose, which Position to update.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position updateMany
   */
  export type PositionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Positions.
     */
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyInput>
    /**
     * Filter which Positions to update
     */
    where?: PositionWhereInput
  }

  /**
   * Position upsert
   */
  export type PositionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * The filter to search for the Position to update in case it exists.
     */
    where: PositionWhereUniqueInput
    /**
     * In case the Position found by the `where` argument doesn't exist, create a new Position with this data.
     */
    create: XOR<PositionCreateInput, PositionUncheckedCreateInput>
    /**
     * In case the Position was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PositionUpdateInput, PositionUncheckedUpdateInput>
  }

  /**
   * Position delete
   */
  export type PositionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
    /**
     * Filter which Position to delete.
     */
    where: PositionWhereUniqueInput
  }

  /**
   * Position deleteMany
   */
  export type PositionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Positions to delete
     */
    where?: PositionWhereInput
  }

  /**
   * Position without action
   */
  export type PositionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Position
     */
    select?: PositionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PositionInclude<ExtArgs> | null
  }


  /**
   * Model Research
   */

  export type AggregateResearch = {
    _count: ResearchCountAggregateOutputType | null
    _avg: ResearchAvgAggregateOutputType | null
    _sum: ResearchSumAggregateOutputType | null
    _min: ResearchMinAggregateOutputType | null
    _max: ResearchMaxAggregateOutputType | null
  }

  export type ResearchAvgAggregateOutputType = {
    level: number | null
    progress: number | null
  }

  export type ResearchSumAggregateOutputType = {
    level: number | null
    progress: number | null
  }

  export type ResearchMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    nodeId: string | null
    category: string | null
    level: number | null
    progress: number | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResearchMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    nodeId: string | null
    category: string | null
    level: number | null
    progress: number | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ResearchCountAggregateOutputType = {
    id: number
    companyId: number
    nodeId: number
    category: number
    level: number
    progress: number
    status: number
    startedAt: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ResearchAvgAggregateInputType = {
    level?: true
    progress?: true
  }

  export type ResearchSumAggregateInputType = {
    level?: true
    progress?: true
  }

  export type ResearchMinAggregateInputType = {
    id?: true
    companyId?: true
    nodeId?: true
    category?: true
    level?: true
    progress?: true
    status?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResearchMaxAggregateInputType = {
    id?: true
    companyId?: true
    nodeId?: true
    category?: true
    level?: true
    progress?: true
    status?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ResearchCountAggregateInputType = {
    id?: true
    companyId?: true
    nodeId?: true
    category?: true
    level?: true
    progress?: true
    status?: true
    startedAt?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ResearchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Research to aggregate.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Research
    **/
    _count?: true | ResearchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResearchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResearchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResearchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResearchMaxAggregateInputType
  }

  export type GetResearchAggregateType<T extends ResearchAggregateArgs> = {
        [P in keyof T & keyof AggregateResearch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResearch[P]>
      : GetScalarType<T[P], AggregateResearch[P]>
  }




  export type ResearchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResearchWhereInput
    orderBy?: ResearchOrderByWithAggregationInput | ResearchOrderByWithAggregationInput[]
    by: ResearchScalarFieldEnum[] | ResearchScalarFieldEnum
    having?: ResearchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResearchCountAggregateInputType | true
    _avg?: ResearchAvgAggregateInputType
    _sum?: ResearchSumAggregateInputType
    _min?: ResearchMinAggregateInputType
    _max?: ResearchMaxAggregateInputType
  }

  export type ResearchGroupByOutputType = {
    id: string
    companyId: string
    nodeId: string
    category: string
    level: number
    progress: number
    status: string
    startedAt: Date | null
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ResearchCountAggregateOutputType | null
    _avg: ResearchAvgAggregateOutputType | null
    _sum: ResearchSumAggregateOutputType | null
    _min: ResearchMinAggregateOutputType | null
    _max: ResearchMaxAggregateOutputType | null
  }

  type GetResearchGroupByPayload<T extends ResearchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResearchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResearchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResearchGroupByOutputType[P]>
            : GetScalarType<T[P], ResearchGroupByOutputType[P]>
        }
      >
    >


  export type ResearchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    nodeId?: boolean
    category?: boolean
    level?: boolean
    progress?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["research"]>

  export type ResearchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    nodeId?: boolean
    category?: boolean
    level?: boolean
    progress?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["research"]>

  export type ResearchSelectScalar = {
    id?: boolean
    companyId?: boolean
    nodeId?: boolean
    category?: boolean
    level?: boolean
    progress?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ResearchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type ResearchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $ResearchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Research"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      nodeId: string
      category: string
      level: number
      progress: number
      status: string
      startedAt: Date | null
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["research"]>
    composites: {}
  }

  type ResearchGetPayload<S extends boolean | null | undefined | ResearchDefaultArgs> = $Result.GetResult<Prisma.$ResearchPayload, S>

  type ResearchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ResearchFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ResearchCountAggregateInputType | true
    }

  export interface ResearchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Research'], meta: { name: 'Research' } }
    /**
     * Find zero or one Research that matches the filter.
     * @param {ResearchFindUniqueArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResearchFindUniqueArgs>(args: SelectSubset<T, ResearchFindUniqueArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Research that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ResearchFindUniqueOrThrowArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResearchFindUniqueOrThrowArgs>(args: SelectSubset<T, ResearchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Research that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchFindFirstArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResearchFindFirstArgs>(args?: SelectSubset<T, ResearchFindFirstArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Research that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchFindFirstOrThrowArgs} args - Arguments to find a Research
     * @example
     * // Get one Research
     * const research = await prisma.research.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResearchFindFirstOrThrowArgs>(args?: SelectSubset<T, ResearchFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Research that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Research
     * const research = await prisma.research.findMany()
     * 
     * // Get first 10 Research
     * const research = await prisma.research.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const researchWithIdOnly = await prisma.research.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResearchFindManyArgs>(args?: SelectSubset<T, ResearchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Research.
     * @param {ResearchCreateArgs} args - Arguments to create a Research.
     * @example
     * // Create one Research
     * const Research = await prisma.research.create({
     *   data: {
     *     // ... data to create a Research
     *   }
     * })
     * 
     */
    create<T extends ResearchCreateArgs>(args: SelectSubset<T, ResearchCreateArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Research.
     * @param {ResearchCreateManyArgs} args - Arguments to create many Research.
     * @example
     * // Create many Research
     * const research = await prisma.research.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResearchCreateManyArgs>(args?: SelectSubset<T, ResearchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Research and returns the data saved in the database.
     * @param {ResearchCreateManyAndReturnArgs} args - Arguments to create many Research.
     * @example
     * // Create many Research
     * const research = await prisma.research.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Research and only return the `id`
     * const researchWithIdOnly = await prisma.research.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResearchCreateManyAndReturnArgs>(args?: SelectSubset<T, ResearchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Research.
     * @param {ResearchDeleteArgs} args - Arguments to delete one Research.
     * @example
     * // Delete one Research
     * const Research = await prisma.research.delete({
     *   where: {
     *     // ... filter to delete one Research
     *   }
     * })
     * 
     */
    delete<T extends ResearchDeleteArgs>(args: SelectSubset<T, ResearchDeleteArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Research.
     * @param {ResearchUpdateArgs} args - Arguments to update one Research.
     * @example
     * // Update one Research
     * const research = await prisma.research.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResearchUpdateArgs>(args: SelectSubset<T, ResearchUpdateArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Research.
     * @param {ResearchDeleteManyArgs} args - Arguments to filter Research to delete.
     * @example
     * // Delete a few Research
     * const { count } = await prisma.research.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResearchDeleteManyArgs>(args?: SelectSubset<T, ResearchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Research
     * const research = await prisma.research.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResearchUpdateManyArgs>(args: SelectSubset<T, ResearchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Research.
     * @param {ResearchUpsertArgs} args - Arguments to update or create a Research.
     * @example
     * // Update or create a Research
     * const research = await prisma.research.upsert({
     *   create: {
     *     // ... data to create a Research
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Research we want to update
     *   }
     * })
     */
    upsert<T extends ResearchUpsertArgs>(args: SelectSubset<T, ResearchUpsertArgs<ExtArgs>>): Prisma__ResearchClient<$Result.GetResult<Prisma.$ResearchPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchCountArgs} args - Arguments to filter Research to count.
     * @example
     * // Count the number of Research
     * const count = await prisma.research.count({
     *   where: {
     *     // ... the filter for the Research we want to count
     *   }
     * })
    **/
    count<T extends ResearchCountArgs>(
      args?: Subset<T, ResearchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResearchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResearchAggregateArgs>(args: Subset<T, ResearchAggregateArgs>): Prisma.PrismaPromise<GetResearchAggregateType<T>>

    /**
     * Group by Research.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResearchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResearchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResearchGroupByArgs['orderBy'] }
        : { orderBy?: ResearchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResearchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResearchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Research model
   */
  readonly fields: ResearchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Research.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResearchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Research model
   */ 
  interface ResearchFieldRefs {
    readonly id: FieldRef<"Research", 'String'>
    readonly companyId: FieldRef<"Research", 'String'>
    readonly nodeId: FieldRef<"Research", 'String'>
    readonly category: FieldRef<"Research", 'String'>
    readonly level: FieldRef<"Research", 'Int'>
    readonly progress: FieldRef<"Research", 'Float'>
    readonly status: FieldRef<"Research", 'String'>
    readonly startedAt: FieldRef<"Research", 'DateTime'>
    readonly completedAt: FieldRef<"Research", 'DateTime'>
    readonly createdAt: FieldRef<"Research", 'DateTime'>
    readonly updatedAt: FieldRef<"Research", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Research findUnique
   */
  export type ResearchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where: ResearchWhereUniqueInput
  }

  /**
   * Research findUniqueOrThrow
   */
  export type ResearchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where: ResearchWhereUniqueInput
  }

  /**
   * Research findFirst
   */
  export type ResearchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Research.
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Research.
     */
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }

  /**
   * Research findFirstOrThrow
   */
  export type ResearchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Research.
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Research.
     */
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }

  /**
   * Research findMany
   */
  export type ResearchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter, which Research to fetch.
     */
    where?: ResearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Research to fetch.
     */
    orderBy?: ResearchOrderByWithRelationInput | ResearchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Research.
     */
    cursor?: ResearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Research from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Research.
     */
    skip?: number
    distinct?: ResearchScalarFieldEnum | ResearchScalarFieldEnum[]
  }

  /**
   * Research create
   */
  export type ResearchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * The data needed to create a Research.
     */
    data: XOR<ResearchCreateInput, ResearchUncheckedCreateInput>
  }

  /**
   * Research createMany
   */
  export type ResearchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Research.
     */
    data: ResearchCreateManyInput | ResearchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Research createManyAndReturn
   */
  export type ResearchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Research.
     */
    data: ResearchCreateManyInput | ResearchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Research update
   */
  export type ResearchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * The data needed to update a Research.
     */
    data: XOR<ResearchUpdateInput, ResearchUncheckedUpdateInput>
    /**
     * Choose, which Research to update.
     */
    where: ResearchWhereUniqueInput
  }

  /**
   * Research updateMany
   */
  export type ResearchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Research.
     */
    data: XOR<ResearchUpdateManyMutationInput, ResearchUncheckedUpdateManyInput>
    /**
     * Filter which Research to update
     */
    where?: ResearchWhereInput
  }

  /**
   * Research upsert
   */
  export type ResearchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * The filter to search for the Research to update in case it exists.
     */
    where: ResearchWhereUniqueInput
    /**
     * In case the Research found by the `where` argument doesn't exist, create a new Research with this data.
     */
    create: XOR<ResearchCreateInput, ResearchUncheckedCreateInput>
    /**
     * In case the Research was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResearchUpdateInput, ResearchUncheckedUpdateInput>
  }

  /**
   * Research delete
   */
  export type ResearchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
    /**
     * Filter which Research to delete.
     */
    where: ResearchWhereUniqueInput
  }

  /**
   * Research deleteMany
   */
  export type ResearchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Research to delete
     */
    where?: ResearchWhereInput
  }

  /**
   * Research without action
   */
  export type ResearchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Research
     */
    select?: ResearchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResearchInclude<ExtArgs> | null
  }


  /**
   * Model Proposal
   */

  export type AggregateProposal = {
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  export type ProposalAvgAggregateOutputType = {
    votesFor: number | null
    votesAgainst: number | null
    votesAbstain: number | null
  }

  export type ProposalSumAggregateOutputType = {
    votesFor: number | null
    votesAgainst: number | null
    votesAbstain: number | null
  }

  export type ProposalMinAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    votesFor: number | null
    votesAgainst: number | null
    votesAbstain: number | null
    deadline: Date | null
    outcome: string | null
    createdAt: Date | null
    resolvedAt: Date | null
  }

  export type ProposalMaxAggregateOutputType = {
    id: string | null
    type: string | null
    title: string | null
    description: string | null
    votesFor: number | null
    votesAgainst: number | null
    votesAbstain: number | null
    deadline: Date | null
    outcome: string | null
    createdAt: Date | null
    resolvedAt: Date | null
  }

  export type ProposalCountAggregateOutputType = {
    id: number
    type: number
    title: number
    description: number
    votesFor: number
    votesAgainst: number
    votesAbstain: number
    deadline: number
    outcome: number
    createdAt: number
    resolvedAt: number
    _all: number
  }


  export type ProposalAvgAggregateInputType = {
    votesFor?: true
    votesAgainst?: true
    votesAbstain?: true
  }

  export type ProposalSumAggregateInputType = {
    votesFor?: true
    votesAgainst?: true
    votesAbstain?: true
  }

  export type ProposalMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    votesFor?: true
    votesAgainst?: true
    votesAbstain?: true
    deadline?: true
    outcome?: true
    createdAt?: true
    resolvedAt?: true
  }

  export type ProposalMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    votesFor?: true
    votesAgainst?: true
    votesAbstain?: true
    deadline?: true
    outcome?: true
    createdAt?: true
    resolvedAt?: true
  }

  export type ProposalCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    description?: true
    votesFor?: true
    votesAgainst?: true
    votesAbstain?: true
    deadline?: true
    outcome?: true
    createdAt?: true
    resolvedAt?: true
    _all?: true
  }

  export type ProposalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposal to aggregate.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proposals
    **/
    _count?: true | ProposalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProposalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProposalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProposalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProposalMaxAggregateInputType
  }

  export type GetProposalAggregateType<T extends ProposalAggregateArgs> = {
        [P in keyof T & keyof AggregateProposal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProposal[P]>
      : GetScalarType<T[P], AggregateProposal[P]>
  }




  export type ProposalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProposalWhereInput
    orderBy?: ProposalOrderByWithAggregationInput | ProposalOrderByWithAggregationInput[]
    by: ProposalScalarFieldEnum[] | ProposalScalarFieldEnum
    having?: ProposalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProposalCountAggregateInputType | true
    _avg?: ProposalAvgAggregateInputType
    _sum?: ProposalSumAggregateInputType
    _min?: ProposalMinAggregateInputType
    _max?: ProposalMaxAggregateInputType
  }

  export type ProposalGroupByOutputType = {
    id: string
    type: string
    title: string
    description: string
    votesFor: number
    votesAgainst: number
    votesAbstain: number
    deadline: Date
    outcome: string | null
    createdAt: Date
    resolvedAt: Date | null
    _count: ProposalCountAggregateOutputType | null
    _avg: ProposalAvgAggregateOutputType | null
    _sum: ProposalSumAggregateOutputType | null
    _min: ProposalMinAggregateOutputType | null
    _max: ProposalMaxAggregateOutputType | null
  }

  type GetProposalGroupByPayload<T extends ProposalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProposalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProposalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProposalGroupByOutputType[P]>
            : GetScalarType<T[P], ProposalGroupByOutputType[P]>
        }
      >
    >


  export type ProposalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    votesFor?: boolean
    votesAgainst?: boolean
    votesAbstain?: boolean
    deadline?: boolean
    outcome?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
    votes?: boolean | Proposal$votesArgs<ExtArgs>
    _count?: boolean | ProposalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    votesFor?: boolean
    votesAgainst?: boolean
    votesAbstain?: boolean
    deadline?: boolean
    outcome?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
  }, ExtArgs["result"]["proposal"]>

  export type ProposalSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    description?: boolean
    votesFor?: boolean
    votesAgainst?: boolean
    votesAbstain?: boolean
    deadline?: boolean
    outcome?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
  }

  export type ProposalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    votes?: boolean | Proposal$votesArgs<ExtArgs>
    _count?: boolean | ProposalCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProposalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProposalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proposal"
    objects: {
      votes: Prisma.$VotePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      title: string
      description: string
      votesFor: number
      votesAgainst: number
      votesAbstain: number
      deadline: Date
      outcome: string | null
      createdAt: Date
      resolvedAt: Date | null
    }, ExtArgs["result"]["proposal"]>
    composites: {}
  }

  type ProposalGetPayload<S extends boolean | null | undefined | ProposalDefaultArgs> = $Result.GetResult<Prisma.$ProposalPayload, S>

  type ProposalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProposalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProposalCountAggregateInputType | true
    }

  export interface ProposalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proposal'], meta: { name: 'Proposal' } }
    /**
     * Find zero or one Proposal that matches the filter.
     * @param {ProposalFindUniqueArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProposalFindUniqueArgs>(args: SelectSubset<T, ProposalFindUniqueArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Proposal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProposalFindUniqueOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProposalFindUniqueOrThrowArgs>(args: SelectSubset<T, ProposalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Proposal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProposalFindFirstArgs>(args?: SelectSubset<T, ProposalFindFirstArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Proposal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindFirstOrThrowArgs} args - Arguments to find a Proposal
     * @example
     * // Get one Proposal
     * const proposal = await prisma.proposal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProposalFindFirstOrThrowArgs>(args?: SelectSubset<T, ProposalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Proposals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proposals
     * const proposals = await prisma.proposal.findMany()
     * 
     * // Get first 10 Proposals
     * const proposals = await prisma.proposal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proposalWithIdOnly = await prisma.proposal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProposalFindManyArgs>(args?: SelectSubset<T, ProposalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Proposal.
     * @param {ProposalCreateArgs} args - Arguments to create a Proposal.
     * @example
     * // Create one Proposal
     * const Proposal = await prisma.proposal.create({
     *   data: {
     *     // ... data to create a Proposal
     *   }
     * })
     * 
     */
    create<T extends ProposalCreateArgs>(args: SelectSubset<T, ProposalCreateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Proposals.
     * @param {ProposalCreateManyArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProposalCreateManyArgs>(args?: SelectSubset<T, ProposalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Proposals and returns the data saved in the database.
     * @param {ProposalCreateManyAndReturnArgs} args - Arguments to create many Proposals.
     * @example
     * // Create many Proposals
     * const proposal = await prisma.proposal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Proposals and only return the `id`
     * const proposalWithIdOnly = await prisma.proposal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProposalCreateManyAndReturnArgs>(args?: SelectSubset<T, ProposalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Proposal.
     * @param {ProposalDeleteArgs} args - Arguments to delete one Proposal.
     * @example
     * // Delete one Proposal
     * const Proposal = await prisma.proposal.delete({
     *   where: {
     *     // ... filter to delete one Proposal
     *   }
     * })
     * 
     */
    delete<T extends ProposalDeleteArgs>(args: SelectSubset<T, ProposalDeleteArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Proposal.
     * @param {ProposalUpdateArgs} args - Arguments to update one Proposal.
     * @example
     * // Update one Proposal
     * const proposal = await prisma.proposal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProposalUpdateArgs>(args: SelectSubset<T, ProposalUpdateArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Proposals.
     * @param {ProposalDeleteManyArgs} args - Arguments to filter Proposals to delete.
     * @example
     * // Delete a few Proposals
     * const { count } = await prisma.proposal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProposalDeleteManyArgs>(args?: SelectSubset<T, ProposalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proposals
     * const proposal = await prisma.proposal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProposalUpdateManyArgs>(args: SelectSubset<T, ProposalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proposal.
     * @param {ProposalUpsertArgs} args - Arguments to update or create a Proposal.
     * @example
     * // Update or create a Proposal
     * const proposal = await prisma.proposal.upsert({
     *   create: {
     *     // ... data to create a Proposal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proposal we want to update
     *   }
     * })
     */
    upsert<T extends ProposalUpsertArgs>(args: SelectSubset<T, ProposalUpsertArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Proposals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalCountArgs} args - Arguments to filter Proposals to count.
     * @example
     * // Count the number of Proposals
     * const count = await prisma.proposal.count({
     *   where: {
     *     // ... the filter for the Proposals we want to count
     *   }
     * })
    **/
    count<T extends ProposalCountArgs>(
      args?: Subset<T, ProposalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProposalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProposalAggregateArgs>(args: Subset<T, ProposalAggregateArgs>): Prisma.PrismaPromise<GetProposalAggregateType<T>>

    /**
     * Group by Proposal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProposalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProposalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProposalGroupByArgs['orderBy'] }
        : { orderBy?: ProposalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProposalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProposalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proposal model
   */
  readonly fields: ProposalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proposal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProposalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    votes<T extends Proposal$votesArgs<ExtArgs> = {}>(args?: Subset<T, Proposal$votesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Proposal model
   */ 
  interface ProposalFieldRefs {
    readonly id: FieldRef<"Proposal", 'String'>
    readonly type: FieldRef<"Proposal", 'String'>
    readonly title: FieldRef<"Proposal", 'String'>
    readonly description: FieldRef<"Proposal", 'String'>
    readonly votesFor: FieldRef<"Proposal", 'Int'>
    readonly votesAgainst: FieldRef<"Proposal", 'Int'>
    readonly votesAbstain: FieldRef<"Proposal", 'Int'>
    readonly deadline: FieldRef<"Proposal", 'DateTime'>
    readonly outcome: FieldRef<"Proposal", 'String'>
    readonly createdAt: FieldRef<"Proposal", 'DateTime'>
    readonly resolvedAt: FieldRef<"Proposal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Proposal findUnique
   */
  export type ProposalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findUniqueOrThrow
   */
  export type ProposalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal findFirst
   */
  export type ProposalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findFirstOrThrow
   */
  export type ProposalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposal to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proposals.
     */
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal findMany
   */
  export type ProposalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter, which Proposals to fetch.
     */
    where?: ProposalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proposals to fetch.
     */
    orderBy?: ProposalOrderByWithRelationInput | ProposalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proposals.
     */
    cursor?: ProposalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proposals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proposals.
     */
    skip?: number
    distinct?: ProposalScalarFieldEnum | ProposalScalarFieldEnum[]
  }

  /**
   * Proposal create
   */
  export type ProposalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to create a Proposal.
     */
    data: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
  }

  /**
   * Proposal createMany
   */
  export type ProposalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proposal createManyAndReturn
   */
  export type ProposalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Proposals.
     */
    data: ProposalCreateManyInput | ProposalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proposal update
   */
  export type ProposalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The data needed to update a Proposal.
     */
    data: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
    /**
     * Choose, which Proposal to update.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal updateMany
   */
  export type ProposalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proposals.
     */
    data: XOR<ProposalUpdateManyMutationInput, ProposalUncheckedUpdateManyInput>
    /**
     * Filter which Proposals to update
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal upsert
   */
  export type ProposalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * The filter to search for the Proposal to update in case it exists.
     */
    where: ProposalWhereUniqueInput
    /**
     * In case the Proposal found by the `where` argument doesn't exist, create a new Proposal with this data.
     */
    create: XOR<ProposalCreateInput, ProposalUncheckedCreateInput>
    /**
     * In case the Proposal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProposalUpdateInput, ProposalUncheckedUpdateInput>
  }

  /**
   * Proposal delete
   */
  export type ProposalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
    /**
     * Filter which Proposal to delete.
     */
    where: ProposalWhereUniqueInput
  }

  /**
   * Proposal deleteMany
   */
  export type ProposalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proposals to delete
     */
    where?: ProposalWhereInput
  }

  /**
   * Proposal.votes
   */
  export type Proposal$votesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    cursor?: VoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Proposal without action
   */
  export type ProposalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proposal
     */
    select?: ProposalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProposalInclude<ExtArgs> | null
  }


  /**
   * Model Vote
   */

  export type AggregateVote = {
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  export type VoteAvgAggregateOutputType = {
    weight: number | null
  }

  export type VoteSumAggregateOutputType = {
    weight: number | null
  }

  export type VoteMinAggregateOutputType = {
    id: string | null
    proposalId: string | null
    companyId: string | null
    choice: string | null
    weight: number | null
    createdAt: Date | null
  }

  export type VoteMaxAggregateOutputType = {
    id: string | null
    proposalId: string | null
    companyId: string | null
    choice: string | null
    weight: number | null
    createdAt: Date | null
  }

  export type VoteCountAggregateOutputType = {
    id: number
    proposalId: number
    companyId: number
    choice: number
    weight: number
    createdAt: number
    _all: number
  }


  export type VoteAvgAggregateInputType = {
    weight?: true
  }

  export type VoteSumAggregateInputType = {
    weight?: true
  }

  export type VoteMinAggregateInputType = {
    id?: true
    proposalId?: true
    companyId?: true
    choice?: true
    weight?: true
    createdAt?: true
  }

  export type VoteMaxAggregateInputType = {
    id?: true
    proposalId?: true
    companyId?: true
    choice?: true
    weight?: true
    createdAt?: true
  }

  export type VoteCountAggregateInputType = {
    id?: true
    proposalId?: true
    companyId?: true
    choice?: true
    weight?: true
    createdAt?: true
    _all?: true
  }

  export type VoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vote to aggregate.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Votes
    **/
    _count?: true | VoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoteMaxAggregateInputType
  }

  export type GetVoteAggregateType<T extends VoteAggregateArgs> = {
        [P in keyof T & keyof AggregateVote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVote[P]>
      : GetScalarType<T[P], AggregateVote[P]>
  }




  export type VoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VoteWhereInput
    orderBy?: VoteOrderByWithAggregationInput | VoteOrderByWithAggregationInput[]
    by: VoteScalarFieldEnum[] | VoteScalarFieldEnum
    having?: VoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoteCountAggregateInputType | true
    _avg?: VoteAvgAggregateInputType
    _sum?: VoteSumAggregateInputType
    _min?: VoteMinAggregateInputType
    _max?: VoteMaxAggregateInputType
  }

  export type VoteGroupByOutputType = {
    id: string
    proposalId: string
    companyId: string
    choice: string
    weight: number
    createdAt: Date
    _count: VoteCountAggregateOutputType | null
    _avg: VoteAvgAggregateOutputType | null
    _sum: VoteSumAggregateOutputType | null
    _min: VoteMinAggregateOutputType | null
    _max: VoteMaxAggregateOutputType | null
  }

  type GetVoteGroupByPayload<T extends VoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoteGroupByOutputType[P]>
            : GetScalarType<T[P], VoteGroupByOutputType[P]>
        }
      >
    >


  export type VoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposalId?: boolean
    companyId?: boolean
    choice?: boolean
    weight?: boolean
    createdAt?: boolean
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proposalId?: boolean
    companyId?: boolean
    choice?: boolean
    weight?: boolean
    createdAt?: boolean
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vote"]>

  export type VoteSelectScalar = {
    id?: boolean
    proposalId?: boolean
    companyId?: boolean
    choice?: boolean
    weight?: boolean
    createdAt?: boolean
  }

  export type VoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type VoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proposal?: boolean | ProposalDefaultArgs<ExtArgs>
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $VotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vote"
    objects: {
      proposal: Prisma.$ProposalPayload<ExtArgs>
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      proposalId: string
      companyId: string
      choice: string
      weight: number
      createdAt: Date
    }, ExtArgs["result"]["vote"]>
    composites: {}
  }

  type VoteGetPayload<S extends boolean | null | undefined | VoteDefaultArgs> = $Result.GetResult<Prisma.$VotePayload, S>

  type VoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VoteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VoteCountAggregateInputType | true
    }

  export interface VoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vote'], meta: { name: 'Vote' } }
    /**
     * Find zero or one Vote that matches the filter.
     * @param {VoteFindUniqueArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VoteFindUniqueArgs>(args: SelectSubset<T, VoteFindUniqueArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Vote that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VoteFindUniqueOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VoteFindUniqueOrThrowArgs>(args: SelectSubset<T, VoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Vote that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VoteFindFirstArgs>(args?: SelectSubset<T, VoteFindFirstArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Vote that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindFirstOrThrowArgs} args - Arguments to find a Vote
     * @example
     * // Get one Vote
     * const vote = await prisma.vote.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VoteFindFirstOrThrowArgs>(args?: SelectSubset<T, VoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Votes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Votes
     * const votes = await prisma.vote.findMany()
     * 
     * // Get first 10 Votes
     * const votes = await prisma.vote.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voteWithIdOnly = await prisma.vote.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VoteFindManyArgs>(args?: SelectSubset<T, VoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Vote.
     * @param {VoteCreateArgs} args - Arguments to create a Vote.
     * @example
     * // Create one Vote
     * const Vote = await prisma.vote.create({
     *   data: {
     *     // ... data to create a Vote
     *   }
     * })
     * 
     */
    create<T extends VoteCreateArgs>(args: SelectSubset<T, VoteCreateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Votes.
     * @param {VoteCreateManyArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VoteCreateManyArgs>(args?: SelectSubset<T, VoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Votes and returns the data saved in the database.
     * @param {VoteCreateManyAndReturnArgs} args - Arguments to create many Votes.
     * @example
     * // Create many Votes
     * const vote = await prisma.vote.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Votes and only return the `id`
     * const voteWithIdOnly = await prisma.vote.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VoteCreateManyAndReturnArgs>(args?: SelectSubset<T, VoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Vote.
     * @param {VoteDeleteArgs} args - Arguments to delete one Vote.
     * @example
     * // Delete one Vote
     * const Vote = await prisma.vote.delete({
     *   where: {
     *     // ... filter to delete one Vote
     *   }
     * })
     * 
     */
    delete<T extends VoteDeleteArgs>(args: SelectSubset<T, VoteDeleteArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Vote.
     * @param {VoteUpdateArgs} args - Arguments to update one Vote.
     * @example
     * // Update one Vote
     * const vote = await prisma.vote.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VoteUpdateArgs>(args: SelectSubset<T, VoteUpdateArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Votes.
     * @param {VoteDeleteManyArgs} args - Arguments to filter Votes to delete.
     * @example
     * // Delete a few Votes
     * const { count } = await prisma.vote.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VoteDeleteManyArgs>(args?: SelectSubset<T, VoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Votes
     * const vote = await prisma.vote.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VoteUpdateManyArgs>(args: SelectSubset<T, VoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vote.
     * @param {VoteUpsertArgs} args - Arguments to update or create a Vote.
     * @example
     * // Update or create a Vote
     * const vote = await prisma.vote.upsert({
     *   create: {
     *     // ... data to create a Vote
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vote we want to update
     *   }
     * })
     */
    upsert<T extends VoteUpsertArgs>(args: SelectSubset<T, VoteUpsertArgs<ExtArgs>>): Prisma__VoteClient<$Result.GetResult<Prisma.$VotePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Votes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteCountArgs} args - Arguments to filter Votes to count.
     * @example
     * // Count the number of Votes
     * const count = await prisma.vote.count({
     *   where: {
     *     // ... the filter for the Votes we want to count
     *   }
     * })
    **/
    count<T extends VoteCountArgs>(
      args?: Subset<T, VoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoteAggregateArgs>(args: Subset<T, VoteAggregateArgs>): Prisma.PrismaPromise<GetVoteAggregateType<T>>

    /**
     * Group by Vote.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoteGroupByArgs['orderBy'] }
        : { orderBy?: VoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vote model
   */
  readonly fields: VoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vote.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proposal<T extends ProposalDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProposalDefaultArgs<ExtArgs>>): Prisma__ProposalClient<$Result.GetResult<Prisma.$ProposalPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vote model
   */ 
  interface VoteFieldRefs {
    readonly id: FieldRef<"Vote", 'String'>
    readonly proposalId: FieldRef<"Vote", 'String'>
    readonly companyId: FieldRef<"Vote", 'String'>
    readonly choice: FieldRef<"Vote", 'String'>
    readonly weight: FieldRef<"Vote", 'Int'>
    readonly createdAt: FieldRef<"Vote", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Vote findUnique
   */
  export type VoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findUniqueOrThrow
   */
  export type VoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote findFirst
   */
  export type VoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findFirstOrThrow
   */
  export type VoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Vote to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Votes.
     */
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote findMany
   */
  export type VoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter, which Votes to fetch.
     */
    where?: VoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Votes to fetch.
     */
    orderBy?: VoteOrderByWithRelationInput | VoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Votes.
     */
    cursor?: VoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Votes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Votes.
     */
    skip?: number
    distinct?: VoteScalarFieldEnum | VoteScalarFieldEnum[]
  }

  /**
   * Vote create
   */
  export type VoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Vote.
     */
    data: XOR<VoteCreateInput, VoteUncheckedCreateInput>
  }

  /**
   * Vote createMany
   */
  export type VoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vote createManyAndReturn
   */
  export type VoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Votes.
     */
    data: VoteCreateManyInput | VoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vote update
   */
  export type VoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Vote.
     */
    data: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
    /**
     * Choose, which Vote to update.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote updateMany
   */
  export type VoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Votes.
     */
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyInput>
    /**
     * Filter which Votes to update
     */
    where?: VoteWhereInput
  }

  /**
   * Vote upsert
   */
  export type VoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Vote to update in case it exists.
     */
    where: VoteWhereUniqueInput
    /**
     * In case the Vote found by the `where` argument doesn't exist, create a new Vote with this data.
     */
    create: XOR<VoteCreateInput, VoteUncheckedCreateInput>
    /**
     * In case the Vote was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VoteUpdateInput, VoteUncheckedUpdateInput>
  }

  /**
   * Vote delete
   */
  export type VoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
    /**
     * Filter which Vote to delete.
     */
    where: VoteWhereUniqueInput
  }

  /**
   * Vote deleteMany
   */
  export type VoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Votes to delete
     */
    where?: VoteWhereInput
  }

  /**
   * Vote without action
   */
  export type VoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vote
     */
    select?: VoteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VoteInclude<ExtArgs> | null
  }


  /**
   * Model Quest
   */

  export type AggregateQuest = {
    _count: QuestCountAggregateOutputType | null
    _avg: QuestAvgAggregateOutputType | null
    _sum: QuestSumAggregateOutputType | null
    _min: QuestMinAggregateOutputType | null
    _max: QuestMaxAggregateOutputType | null
  }

  export type QuestAvgAggregateOutputType = {
    rewardUsd: number | null
    rewardBtc: number | null
    rewardResearch: number | null
  }

  export type QuestSumAggregateOutputType = {
    rewardUsd: number | null
    rewardBtc: number | null
    rewardResearch: number | null
  }

  export type QuestMinAggregateOutputType = {
    id: string | null
    type: string | null
    category: string | null
    title: string | null
    description: string | null
    rewardUsd: number | null
    rewardBtc: number | null
    rewardResearch: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type QuestMaxAggregateOutputType = {
    id: string | null
    type: string | null
    category: string | null
    title: string | null
    description: string | null
    rewardUsd: number | null
    rewardBtc: number | null
    rewardResearch: number | null
    startDate: Date | null
    endDate: Date | null
    createdAt: Date | null
  }

  export type QuestCountAggregateOutputType = {
    id: number
    type: number
    category: number
    title: number
    description: number
    requirements: number
    rewardUsd: number
    rewardBtc: number
    rewardRep: number
    rewardResearch: number
    startDate: number
    endDate: number
    createdAt: number
    _all: number
  }


  export type QuestAvgAggregateInputType = {
    rewardUsd?: true
    rewardBtc?: true
    rewardResearch?: true
  }

  export type QuestSumAggregateInputType = {
    rewardUsd?: true
    rewardBtc?: true
    rewardResearch?: true
  }

  export type QuestMinAggregateInputType = {
    id?: true
    type?: true
    category?: true
    title?: true
    description?: true
    rewardUsd?: true
    rewardBtc?: true
    rewardResearch?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type QuestMaxAggregateInputType = {
    id?: true
    type?: true
    category?: true
    title?: true
    description?: true
    rewardUsd?: true
    rewardBtc?: true
    rewardResearch?: true
    startDate?: true
    endDate?: true
    createdAt?: true
  }

  export type QuestCountAggregateInputType = {
    id?: true
    type?: true
    category?: true
    title?: true
    description?: true
    requirements?: true
    rewardUsd?: true
    rewardBtc?: true
    rewardRep?: true
    rewardResearch?: true
    startDate?: true
    endDate?: true
    createdAt?: true
    _all?: true
  }

  export type QuestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quest to aggregate.
     */
    where?: QuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quests to fetch.
     */
    orderBy?: QuestOrderByWithRelationInput | QuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quests
    **/
    _count?: true | QuestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestMaxAggregateInputType
  }

  export type GetQuestAggregateType<T extends QuestAggregateArgs> = {
        [P in keyof T & keyof AggregateQuest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuest[P]>
      : GetScalarType<T[P], AggregateQuest[P]>
  }




  export type QuestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestWhereInput
    orderBy?: QuestOrderByWithAggregationInput | QuestOrderByWithAggregationInput[]
    by: QuestScalarFieldEnum[] | QuestScalarFieldEnum
    having?: QuestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestCountAggregateInputType | true
    _avg?: QuestAvgAggregateInputType
    _sum?: QuestSumAggregateInputType
    _min?: QuestMinAggregateInputType
    _max?: QuestMaxAggregateInputType
  }

  export type QuestGroupByOutputType = {
    id: string
    type: string
    category: string
    title: string
    description: string
    requirements: JsonValue
    rewardUsd: number
    rewardBtc: number
    rewardRep: JsonValue | null
    rewardResearch: number
    startDate: Date | null
    endDate: Date | null
    createdAt: Date
    _count: QuestCountAggregateOutputType | null
    _avg: QuestAvgAggregateOutputType | null
    _sum: QuestSumAggregateOutputType | null
    _min: QuestMinAggregateOutputType | null
    _max: QuestMaxAggregateOutputType | null
  }

  type GetQuestGroupByPayload<T extends QuestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestGroupByOutputType[P]>
            : GetScalarType<T[P], QuestGroupByOutputType[P]>
        }
      >
    >


  export type QuestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    rewardUsd?: boolean
    rewardBtc?: boolean
    rewardRep?: boolean
    rewardResearch?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
    companies?: boolean | Quest$companiesArgs<ExtArgs>
    _count?: boolean | QuestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quest"]>

  export type QuestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    rewardUsd?: boolean
    rewardBtc?: boolean
    rewardRep?: boolean
    rewardResearch?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["quest"]>

  export type QuestSelectScalar = {
    id?: boolean
    type?: boolean
    category?: boolean
    title?: boolean
    description?: boolean
    requirements?: boolean
    rewardUsd?: boolean
    rewardBtc?: boolean
    rewardRep?: boolean
    rewardResearch?: boolean
    startDate?: boolean
    endDate?: boolean
    createdAt?: boolean
  }

  export type QuestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | Quest$companiesArgs<ExtArgs>
    _count?: boolean | QuestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $QuestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quest"
    objects: {
      companies: Prisma.$CompanyQuestPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      category: string
      title: string
      description: string
      requirements: Prisma.JsonValue
      rewardUsd: number
      rewardBtc: number
      rewardRep: Prisma.JsonValue | null
      rewardResearch: number
      startDate: Date | null
      endDate: Date | null
      createdAt: Date
    }, ExtArgs["result"]["quest"]>
    composites: {}
  }

  type QuestGetPayload<S extends boolean | null | undefined | QuestDefaultArgs> = $Result.GetResult<Prisma.$QuestPayload, S>

  type QuestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestCountAggregateInputType | true
    }

  export interface QuestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quest'], meta: { name: 'Quest' } }
    /**
     * Find zero or one Quest that matches the filter.
     * @param {QuestFindUniqueArgs} args - Arguments to find a Quest
     * @example
     * // Get one Quest
     * const quest = await prisma.quest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestFindUniqueArgs>(args: SelectSubset<T, QuestFindUniqueArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Quest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestFindUniqueOrThrowArgs} args - Arguments to find a Quest
     * @example
     * // Get one Quest
     * const quest = await prisma.quest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Quest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestFindFirstArgs} args - Arguments to find a Quest
     * @example
     * // Get one Quest
     * const quest = await prisma.quest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestFindFirstArgs>(args?: SelectSubset<T, QuestFindFirstArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Quest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestFindFirstOrThrowArgs} args - Arguments to find a Quest
     * @example
     * // Get one Quest
     * const quest = await prisma.quest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Quests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quests
     * const quests = await prisma.quest.findMany()
     * 
     * // Get first 10 Quests
     * const quests = await prisma.quest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questWithIdOnly = await prisma.quest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestFindManyArgs>(args?: SelectSubset<T, QuestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Quest.
     * @param {QuestCreateArgs} args - Arguments to create a Quest.
     * @example
     * // Create one Quest
     * const Quest = await prisma.quest.create({
     *   data: {
     *     // ... data to create a Quest
     *   }
     * })
     * 
     */
    create<T extends QuestCreateArgs>(args: SelectSubset<T, QuestCreateArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Quests.
     * @param {QuestCreateManyArgs} args - Arguments to create many Quests.
     * @example
     * // Create many Quests
     * const quest = await prisma.quest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestCreateManyArgs>(args?: SelectSubset<T, QuestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quests and returns the data saved in the database.
     * @param {QuestCreateManyAndReturnArgs} args - Arguments to create many Quests.
     * @example
     * // Create many Quests
     * const quest = await prisma.quest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quests and only return the `id`
     * const questWithIdOnly = await prisma.quest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Quest.
     * @param {QuestDeleteArgs} args - Arguments to delete one Quest.
     * @example
     * // Delete one Quest
     * const Quest = await prisma.quest.delete({
     *   where: {
     *     // ... filter to delete one Quest
     *   }
     * })
     * 
     */
    delete<T extends QuestDeleteArgs>(args: SelectSubset<T, QuestDeleteArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Quest.
     * @param {QuestUpdateArgs} args - Arguments to update one Quest.
     * @example
     * // Update one Quest
     * const quest = await prisma.quest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestUpdateArgs>(args: SelectSubset<T, QuestUpdateArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Quests.
     * @param {QuestDeleteManyArgs} args - Arguments to filter Quests to delete.
     * @example
     * // Delete a few Quests
     * const { count } = await prisma.quest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestDeleteManyArgs>(args?: SelectSubset<T, QuestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quests
     * const quest = await prisma.quest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestUpdateManyArgs>(args: SelectSubset<T, QuestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quest.
     * @param {QuestUpsertArgs} args - Arguments to update or create a Quest.
     * @example
     * // Update or create a Quest
     * const quest = await prisma.quest.upsert({
     *   create: {
     *     // ... data to create a Quest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quest we want to update
     *   }
     * })
     */
    upsert<T extends QuestUpsertArgs>(args: SelectSubset<T, QuestUpsertArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Quests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestCountArgs} args - Arguments to filter Quests to count.
     * @example
     * // Count the number of Quests
     * const count = await prisma.quest.count({
     *   where: {
     *     // ... the filter for the Quests we want to count
     *   }
     * })
    **/
    count<T extends QuestCountArgs>(
      args?: Subset<T, QuestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestAggregateArgs>(args: Subset<T, QuestAggregateArgs>): Prisma.PrismaPromise<GetQuestAggregateType<T>>

    /**
     * Group by Quest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestGroupByArgs['orderBy'] }
        : { orderBy?: QuestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quest model
   */
  readonly fields: QuestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends Quest$companiesArgs<ExtArgs> = {}>(args?: Subset<T, Quest$companiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quest model
   */ 
  interface QuestFieldRefs {
    readonly id: FieldRef<"Quest", 'String'>
    readonly type: FieldRef<"Quest", 'String'>
    readonly category: FieldRef<"Quest", 'String'>
    readonly title: FieldRef<"Quest", 'String'>
    readonly description: FieldRef<"Quest", 'String'>
    readonly requirements: FieldRef<"Quest", 'Json'>
    readonly rewardUsd: FieldRef<"Quest", 'Float'>
    readonly rewardBtc: FieldRef<"Quest", 'Float'>
    readonly rewardRep: FieldRef<"Quest", 'Json'>
    readonly rewardResearch: FieldRef<"Quest", 'Int'>
    readonly startDate: FieldRef<"Quest", 'DateTime'>
    readonly endDate: FieldRef<"Quest", 'DateTime'>
    readonly createdAt: FieldRef<"Quest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Quest findUnique
   */
  export type QuestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * Filter, which Quest to fetch.
     */
    where: QuestWhereUniqueInput
  }

  /**
   * Quest findUniqueOrThrow
   */
  export type QuestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * Filter, which Quest to fetch.
     */
    where: QuestWhereUniqueInput
  }

  /**
   * Quest findFirst
   */
  export type QuestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * Filter, which Quest to fetch.
     */
    where?: QuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quests to fetch.
     */
    orderBy?: QuestOrderByWithRelationInput | QuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quests.
     */
    cursor?: QuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quests.
     */
    distinct?: QuestScalarFieldEnum | QuestScalarFieldEnum[]
  }

  /**
   * Quest findFirstOrThrow
   */
  export type QuestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * Filter, which Quest to fetch.
     */
    where?: QuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quests to fetch.
     */
    orderBy?: QuestOrderByWithRelationInput | QuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quests.
     */
    cursor?: QuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quests.
     */
    distinct?: QuestScalarFieldEnum | QuestScalarFieldEnum[]
  }

  /**
   * Quest findMany
   */
  export type QuestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * Filter, which Quests to fetch.
     */
    where?: QuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quests to fetch.
     */
    orderBy?: QuestOrderByWithRelationInput | QuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quests.
     */
    cursor?: QuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quests.
     */
    skip?: number
    distinct?: QuestScalarFieldEnum | QuestScalarFieldEnum[]
  }

  /**
   * Quest create
   */
  export type QuestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * The data needed to create a Quest.
     */
    data: XOR<QuestCreateInput, QuestUncheckedCreateInput>
  }

  /**
   * Quest createMany
   */
  export type QuestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quests.
     */
    data: QuestCreateManyInput | QuestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quest createManyAndReturn
   */
  export type QuestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Quests.
     */
    data: QuestCreateManyInput | QuestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quest update
   */
  export type QuestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * The data needed to update a Quest.
     */
    data: XOR<QuestUpdateInput, QuestUncheckedUpdateInput>
    /**
     * Choose, which Quest to update.
     */
    where: QuestWhereUniqueInput
  }

  /**
   * Quest updateMany
   */
  export type QuestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quests.
     */
    data: XOR<QuestUpdateManyMutationInput, QuestUncheckedUpdateManyInput>
    /**
     * Filter which Quests to update
     */
    where?: QuestWhereInput
  }

  /**
   * Quest upsert
   */
  export type QuestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * The filter to search for the Quest to update in case it exists.
     */
    where: QuestWhereUniqueInput
    /**
     * In case the Quest found by the `where` argument doesn't exist, create a new Quest with this data.
     */
    create: XOR<QuestCreateInput, QuestUncheckedCreateInput>
    /**
     * In case the Quest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestUpdateInput, QuestUncheckedUpdateInput>
  }

  /**
   * Quest delete
   */
  export type QuestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
    /**
     * Filter which Quest to delete.
     */
    where: QuestWhereUniqueInput
  }

  /**
   * Quest deleteMany
   */
  export type QuestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quests to delete
     */
    where?: QuestWhereInput
  }

  /**
   * Quest.companies
   */
  export type Quest$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    where?: CompanyQuestWhereInput
    orderBy?: CompanyQuestOrderByWithRelationInput | CompanyQuestOrderByWithRelationInput[]
    cursor?: CompanyQuestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompanyQuestScalarFieldEnum | CompanyQuestScalarFieldEnum[]
  }

  /**
   * Quest without action
   */
  export type QuestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quest
     */
    select?: QuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestInclude<ExtArgs> | null
  }


  /**
   * Model CompanyQuest
   */

  export type AggregateCompanyQuest = {
    _count: CompanyQuestCountAggregateOutputType | null
    _min: CompanyQuestMinAggregateOutputType | null
    _max: CompanyQuestMaxAggregateOutputType | null
  }

  export type CompanyQuestMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    questId: string | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type CompanyQuestMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    questId: string | null
    status: string | null
    startedAt: Date | null
    completedAt: Date | null
  }

  export type CompanyQuestCountAggregateOutputType = {
    id: number
    companyId: number
    questId: number
    status: number
    progress: number
    startedAt: number
    completedAt: number
    _all: number
  }


  export type CompanyQuestMinAggregateInputType = {
    id?: true
    companyId?: true
    questId?: true
    status?: true
    startedAt?: true
    completedAt?: true
  }

  export type CompanyQuestMaxAggregateInputType = {
    id?: true
    companyId?: true
    questId?: true
    status?: true
    startedAt?: true
    completedAt?: true
  }

  export type CompanyQuestCountAggregateInputType = {
    id?: true
    companyId?: true
    questId?: true
    status?: true
    progress?: true
    startedAt?: true
    completedAt?: true
    _all?: true
  }

  export type CompanyQuestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyQuest to aggregate.
     */
    where?: CompanyQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyQuests to fetch.
     */
    orderBy?: CompanyQuestOrderByWithRelationInput | CompanyQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompanyQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyQuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompanyQuests
    **/
    _count?: true | CompanyQuestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompanyQuestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompanyQuestMaxAggregateInputType
  }

  export type GetCompanyQuestAggregateType<T extends CompanyQuestAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanyQuest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanyQuest[P]>
      : GetScalarType<T[P], AggregateCompanyQuest[P]>
  }




  export type CompanyQuestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompanyQuestWhereInput
    orderBy?: CompanyQuestOrderByWithAggregationInput | CompanyQuestOrderByWithAggregationInput[]
    by: CompanyQuestScalarFieldEnum[] | CompanyQuestScalarFieldEnum
    having?: CompanyQuestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompanyQuestCountAggregateInputType | true
    _min?: CompanyQuestMinAggregateInputType
    _max?: CompanyQuestMaxAggregateInputType
  }

  export type CompanyQuestGroupByOutputType = {
    id: string
    companyId: string
    questId: string
    status: string
    progress: JsonValue | null
    startedAt: Date
    completedAt: Date | null
    _count: CompanyQuestCountAggregateOutputType | null
    _min: CompanyQuestMinAggregateOutputType | null
    _max: CompanyQuestMaxAggregateOutputType | null
  }

  type GetCompanyQuestGroupByPayload<T extends CompanyQuestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompanyQuestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompanyQuestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompanyQuestGroupByOutputType[P]>
            : GetScalarType<T[P], CompanyQuestGroupByOutputType[P]>
        }
      >
    >


  export type CompanyQuestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    questId?: boolean
    status?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    quest?: boolean | QuestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyQuest"]>

  export type CompanyQuestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    questId?: boolean
    status?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    quest?: boolean | QuestDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companyQuest"]>

  export type CompanyQuestSelectScalar = {
    id?: boolean
    companyId?: boolean
    questId?: boolean
    status?: boolean
    progress?: boolean
    startedAt?: boolean
    completedAt?: boolean
  }

  export type CompanyQuestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    quest?: boolean | QuestDefaultArgs<ExtArgs>
  }
  export type CompanyQuestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
    quest?: boolean | QuestDefaultArgs<ExtArgs>
  }

  export type $CompanyQuestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompanyQuest"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
      quest: Prisma.$QuestPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      questId: string
      status: string
      progress: Prisma.JsonValue | null
      startedAt: Date
      completedAt: Date | null
    }, ExtArgs["result"]["companyQuest"]>
    composites: {}
  }

  type CompanyQuestGetPayload<S extends boolean | null | undefined | CompanyQuestDefaultArgs> = $Result.GetResult<Prisma.$CompanyQuestPayload, S>

  type CompanyQuestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompanyQuestFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompanyQuestCountAggregateInputType | true
    }

  export interface CompanyQuestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompanyQuest'], meta: { name: 'CompanyQuest' } }
    /**
     * Find zero or one CompanyQuest that matches the filter.
     * @param {CompanyQuestFindUniqueArgs} args - Arguments to find a CompanyQuest
     * @example
     * // Get one CompanyQuest
     * const companyQuest = await prisma.companyQuest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompanyQuestFindUniqueArgs>(args: SelectSubset<T, CompanyQuestFindUniqueArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CompanyQuest that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompanyQuestFindUniqueOrThrowArgs} args - Arguments to find a CompanyQuest
     * @example
     * // Get one CompanyQuest
     * const companyQuest = await prisma.companyQuest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompanyQuestFindUniqueOrThrowArgs>(args: SelectSubset<T, CompanyQuestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CompanyQuest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyQuestFindFirstArgs} args - Arguments to find a CompanyQuest
     * @example
     * // Get one CompanyQuest
     * const companyQuest = await prisma.companyQuest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompanyQuestFindFirstArgs>(args?: SelectSubset<T, CompanyQuestFindFirstArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CompanyQuest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyQuestFindFirstOrThrowArgs} args - Arguments to find a CompanyQuest
     * @example
     * // Get one CompanyQuest
     * const companyQuest = await prisma.companyQuest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompanyQuestFindFirstOrThrowArgs>(args?: SelectSubset<T, CompanyQuestFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CompanyQuests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyQuestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompanyQuests
     * const companyQuests = await prisma.companyQuest.findMany()
     * 
     * // Get first 10 CompanyQuests
     * const companyQuests = await prisma.companyQuest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyQuestWithIdOnly = await prisma.companyQuest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompanyQuestFindManyArgs>(args?: SelectSubset<T, CompanyQuestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CompanyQuest.
     * @param {CompanyQuestCreateArgs} args - Arguments to create a CompanyQuest.
     * @example
     * // Create one CompanyQuest
     * const CompanyQuest = await prisma.companyQuest.create({
     *   data: {
     *     // ... data to create a CompanyQuest
     *   }
     * })
     * 
     */
    create<T extends CompanyQuestCreateArgs>(args: SelectSubset<T, CompanyQuestCreateArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CompanyQuests.
     * @param {CompanyQuestCreateManyArgs} args - Arguments to create many CompanyQuests.
     * @example
     * // Create many CompanyQuests
     * const companyQuest = await prisma.companyQuest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompanyQuestCreateManyArgs>(args?: SelectSubset<T, CompanyQuestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CompanyQuests and returns the data saved in the database.
     * @param {CompanyQuestCreateManyAndReturnArgs} args - Arguments to create many CompanyQuests.
     * @example
     * // Create many CompanyQuests
     * const companyQuest = await prisma.companyQuest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CompanyQuests and only return the `id`
     * const companyQuestWithIdOnly = await prisma.companyQuest.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompanyQuestCreateManyAndReturnArgs>(args?: SelectSubset<T, CompanyQuestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CompanyQuest.
     * @param {CompanyQuestDeleteArgs} args - Arguments to delete one CompanyQuest.
     * @example
     * // Delete one CompanyQuest
     * const CompanyQuest = await prisma.companyQuest.delete({
     *   where: {
     *     // ... filter to delete one CompanyQuest
     *   }
     * })
     * 
     */
    delete<T extends CompanyQuestDeleteArgs>(args: SelectSubset<T, CompanyQuestDeleteArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CompanyQuest.
     * @param {CompanyQuestUpdateArgs} args - Arguments to update one CompanyQuest.
     * @example
     * // Update one CompanyQuest
     * const companyQuest = await prisma.companyQuest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompanyQuestUpdateArgs>(args: SelectSubset<T, CompanyQuestUpdateArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CompanyQuests.
     * @param {CompanyQuestDeleteManyArgs} args - Arguments to filter CompanyQuests to delete.
     * @example
     * // Delete a few CompanyQuests
     * const { count } = await prisma.companyQuest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompanyQuestDeleteManyArgs>(args?: SelectSubset<T, CompanyQuestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompanyQuests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyQuestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompanyQuests
     * const companyQuest = await prisma.companyQuest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompanyQuestUpdateManyArgs>(args: SelectSubset<T, CompanyQuestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompanyQuest.
     * @param {CompanyQuestUpsertArgs} args - Arguments to update or create a CompanyQuest.
     * @example
     * // Update or create a CompanyQuest
     * const companyQuest = await prisma.companyQuest.upsert({
     *   create: {
     *     // ... data to create a CompanyQuest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompanyQuest we want to update
     *   }
     * })
     */
    upsert<T extends CompanyQuestUpsertArgs>(args: SelectSubset<T, CompanyQuestUpsertArgs<ExtArgs>>): Prisma__CompanyQuestClient<$Result.GetResult<Prisma.$CompanyQuestPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CompanyQuests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyQuestCountArgs} args - Arguments to filter CompanyQuests to count.
     * @example
     * // Count the number of CompanyQuests
     * const count = await prisma.companyQuest.count({
     *   where: {
     *     // ... the filter for the CompanyQuests we want to count
     *   }
     * })
    **/
    count<T extends CompanyQuestCountArgs>(
      args?: Subset<T, CompanyQuestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompanyQuestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompanyQuest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyQuestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompanyQuestAggregateArgs>(args: Subset<T, CompanyQuestAggregateArgs>): Prisma.PrismaPromise<GetCompanyQuestAggregateType<T>>

    /**
     * Group by CompanyQuest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompanyQuestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompanyQuestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompanyQuestGroupByArgs['orderBy'] }
        : { orderBy?: CompanyQuestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompanyQuestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompanyQuestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompanyQuest model
   */
  readonly fields: CompanyQuestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompanyQuest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompanyQuestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    quest<T extends QuestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuestDefaultArgs<ExtArgs>>): Prisma__QuestClient<$Result.GetResult<Prisma.$QuestPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CompanyQuest model
   */ 
  interface CompanyQuestFieldRefs {
    readonly id: FieldRef<"CompanyQuest", 'String'>
    readonly companyId: FieldRef<"CompanyQuest", 'String'>
    readonly questId: FieldRef<"CompanyQuest", 'String'>
    readonly status: FieldRef<"CompanyQuest", 'String'>
    readonly progress: FieldRef<"CompanyQuest", 'Json'>
    readonly startedAt: FieldRef<"CompanyQuest", 'DateTime'>
    readonly completedAt: FieldRef<"CompanyQuest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CompanyQuest findUnique
   */
  export type CompanyQuestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * Filter, which CompanyQuest to fetch.
     */
    where: CompanyQuestWhereUniqueInput
  }

  /**
   * CompanyQuest findUniqueOrThrow
   */
  export type CompanyQuestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * Filter, which CompanyQuest to fetch.
     */
    where: CompanyQuestWhereUniqueInput
  }

  /**
   * CompanyQuest findFirst
   */
  export type CompanyQuestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * Filter, which CompanyQuest to fetch.
     */
    where?: CompanyQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyQuests to fetch.
     */
    orderBy?: CompanyQuestOrderByWithRelationInput | CompanyQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyQuests.
     */
    cursor?: CompanyQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyQuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyQuests.
     */
    distinct?: CompanyQuestScalarFieldEnum | CompanyQuestScalarFieldEnum[]
  }

  /**
   * CompanyQuest findFirstOrThrow
   */
  export type CompanyQuestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * Filter, which CompanyQuest to fetch.
     */
    where?: CompanyQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyQuests to fetch.
     */
    orderBy?: CompanyQuestOrderByWithRelationInput | CompanyQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompanyQuests.
     */
    cursor?: CompanyQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyQuests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompanyQuests.
     */
    distinct?: CompanyQuestScalarFieldEnum | CompanyQuestScalarFieldEnum[]
  }

  /**
   * CompanyQuest findMany
   */
  export type CompanyQuestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * Filter, which CompanyQuests to fetch.
     */
    where?: CompanyQuestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompanyQuests to fetch.
     */
    orderBy?: CompanyQuestOrderByWithRelationInput | CompanyQuestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompanyQuests.
     */
    cursor?: CompanyQuestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompanyQuests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompanyQuests.
     */
    skip?: number
    distinct?: CompanyQuestScalarFieldEnum | CompanyQuestScalarFieldEnum[]
  }

  /**
   * CompanyQuest create
   */
  export type CompanyQuestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * The data needed to create a CompanyQuest.
     */
    data: XOR<CompanyQuestCreateInput, CompanyQuestUncheckedCreateInput>
  }

  /**
   * CompanyQuest createMany
   */
  export type CompanyQuestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompanyQuests.
     */
    data: CompanyQuestCreateManyInput | CompanyQuestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CompanyQuest createManyAndReturn
   */
  export type CompanyQuestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CompanyQuests.
     */
    data: CompanyQuestCreateManyInput | CompanyQuestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CompanyQuest update
   */
  export type CompanyQuestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * The data needed to update a CompanyQuest.
     */
    data: XOR<CompanyQuestUpdateInput, CompanyQuestUncheckedUpdateInput>
    /**
     * Choose, which CompanyQuest to update.
     */
    where: CompanyQuestWhereUniqueInput
  }

  /**
   * CompanyQuest updateMany
   */
  export type CompanyQuestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompanyQuests.
     */
    data: XOR<CompanyQuestUpdateManyMutationInput, CompanyQuestUncheckedUpdateManyInput>
    /**
     * Filter which CompanyQuests to update
     */
    where?: CompanyQuestWhereInput
  }

  /**
   * CompanyQuest upsert
   */
  export type CompanyQuestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * The filter to search for the CompanyQuest to update in case it exists.
     */
    where: CompanyQuestWhereUniqueInput
    /**
     * In case the CompanyQuest found by the `where` argument doesn't exist, create a new CompanyQuest with this data.
     */
    create: XOR<CompanyQuestCreateInput, CompanyQuestUncheckedCreateInput>
    /**
     * In case the CompanyQuest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompanyQuestUpdateInput, CompanyQuestUncheckedUpdateInput>
  }

  /**
   * CompanyQuest delete
   */
  export type CompanyQuestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
    /**
     * Filter which CompanyQuest to delete.
     */
    where: CompanyQuestWhereUniqueInput
  }

  /**
   * CompanyQuest deleteMany
   */
  export type CompanyQuestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompanyQuests to delete
     */
    where?: CompanyQuestWhereInput
  }

  /**
   * CompanyQuest without action
   */
  export type CompanyQuestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompanyQuest
     */
    select?: CompanyQuestSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompanyQuestInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventMinAggregateOutputType = {
    id: string | null
    type: string | null
    severity: string | null
    title: string | null
    description: string | null
    region: string | null
    createdAt: Date | null
    resolvedAt: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: string | null
    type: string | null
    severity: string | null
    title: string | null
    description: string | null
    region: string | null
    createdAt: Date | null
    resolvedAt: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    type: number
    severity: number
    title: number
    description: number
    region: number
    affectedCompanies: number
    payload: number
    createdAt: number
    resolvedAt: number
    _all: number
  }


  export type EventMinAggregateInputType = {
    id?: true
    type?: true
    severity?: true
    title?: true
    description?: true
    region?: true
    createdAt?: true
    resolvedAt?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    type?: true
    severity?: true
    title?: true
    description?: true
    region?: true
    createdAt?: true
    resolvedAt?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    type?: true
    severity?: true
    title?: true
    description?: true
    region?: true
    affectedCompanies?: true
    payload?: true
    createdAt?: true
    resolvedAt?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: string
    type: string
    severity: string
    title: string
    description: string
    region: string | null
    affectedCompanies: JsonValue | null
    payload: JsonValue | null
    createdAt: Date
    resolvedAt: Date | null
    _count: EventCountAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    region?: boolean
    affectedCompanies?: boolean
    payload?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    region?: boolean
    affectedCompanies?: boolean
    payload?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    type?: boolean
    severity?: boolean
    title?: boolean
    description?: boolean
    region?: boolean
    affectedCompanies?: boolean
    payload?: boolean
    createdAt?: boolean
    resolvedAt?: boolean
  }


  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      severity: string
      title: string
      description: string
      region: string | null
      affectedCompanies: Prisma.JsonValue | null
      payload: Prisma.JsonValue | null
      createdAt: Date
      resolvedAt: Date | null
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'String'>
    readonly type: FieldRef<"Event", 'String'>
    readonly severity: FieldRef<"Event", 'String'>
    readonly title: FieldRef<"Event", 'String'>
    readonly description: FieldRef<"Event", 'String'>
    readonly region: FieldRef<"Event", 'String'>
    readonly affectedCompanies: FieldRef<"Event", 'Json'>
    readonly payload: FieldRef<"Event", 'Json'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly resolvedAt: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
  }


  /**
   * Model Alert
   */

  export type AggregateAlert = {
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  export type AlertMinAggregateOutputType = {
    id: string | null
    companyId: string | null
    type: string | null
    category: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
  }

  export type AlertMaxAggregateOutputType = {
    id: string | null
    companyId: string | null
    type: string | null
    category: string | null
    message: string | null
    read: boolean | null
    createdAt: Date | null
  }

  export type AlertCountAggregateOutputType = {
    id: number
    companyId: number
    type: number
    category: number
    message: number
    data: number
    read: number
    createdAt: number
    _all: number
  }


  export type AlertMinAggregateInputType = {
    id?: true
    companyId?: true
    type?: true
    category?: true
    message?: true
    read?: true
    createdAt?: true
  }

  export type AlertMaxAggregateInputType = {
    id?: true
    companyId?: true
    type?: true
    category?: true
    message?: true
    read?: true
    createdAt?: true
  }

  export type AlertCountAggregateInputType = {
    id?: true
    companyId?: true
    type?: true
    category?: true
    message?: true
    data?: true
    read?: true
    createdAt?: true
    _all?: true
  }

  export type AlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alert to aggregate.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alerts
    **/
    _count?: true | AlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertMaxAggregateInputType
  }

  export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert[P]>
      : GetScalarType<T[P], AggregateAlert[P]>
  }




  export type AlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithAggregationInput | AlertOrderByWithAggregationInput[]
    by: AlertScalarFieldEnum[] | AlertScalarFieldEnum
    having?: AlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertCountAggregateInputType | true
    _min?: AlertMinAggregateInputType
    _max?: AlertMaxAggregateInputType
  }

  export type AlertGroupByOutputType = {
    id: string
    companyId: string
    type: string
    category: string
    message: string
    data: JsonValue | null
    read: boolean
    createdAt: Date
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  type GetAlertGroupByPayload<T extends AlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertGroupByOutputType[P]>
            : GetScalarType<T[P], AlertGroupByOutputType[P]>
        }
      >
    >


  export type AlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    type?: boolean
    category?: boolean
    message?: boolean
    data?: boolean
    read?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyId?: boolean
    type?: boolean
    category?: boolean
    message?: boolean
    data?: boolean
    read?: boolean
    createdAt?: boolean
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>

  export type AlertSelectScalar = {
    id?: boolean
    companyId?: boolean
    type?: boolean
    category?: boolean
    message?: boolean
    data?: boolean
    read?: boolean
    createdAt?: boolean
  }

  export type AlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }
  export type AlertIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company?: boolean | CompanyDefaultArgs<ExtArgs>
  }

  export type $AlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alert"
    objects: {
      company: Prisma.$CompanyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      companyId: string
      type: string
      category: string
      message: string
      data: Prisma.JsonValue | null
      read: boolean
      createdAt: Date
    }, ExtArgs["result"]["alert"]>
    composites: {}
  }

  type AlertGetPayload<S extends boolean | null | undefined | AlertDefaultArgs> = $Result.GetResult<Prisma.$AlertPayload, S>

  type AlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AlertFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AlertCountAggregateInputType | true
    }

  export interface AlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alert'], meta: { name: 'Alert' } }
    /**
     * Find zero or one Alert that matches the filter.
     * @param {AlertFindUniqueArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertFindUniqueArgs>(args: SelectSubset<T, AlertFindUniqueArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Alert that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AlertFindUniqueOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertFindFirstArgs>(args?: SelectSubset<T, AlertFindFirstArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alerts
     * const alerts = await prisma.alert.findMany()
     * 
     * // Get first 10 Alerts
     * const alerts = await prisma.alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertFindManyArgs>(args?: SelectSubset<T, AlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Alert.
     * @param {AlertCreateArgs} args - Arguments to create a Alert.
     * @example
     * // Create one Alert
     * const Alert = await prisma.alert.create({
     *   data: {
     *     // ... data to create a Alert
     *   }
     * })
     * 
     */
    create<T extends AlertCreateArgs>(args: SelectSubset<T, AlertCreateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Alerts.
     * @param {AlertCreateManyArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertCreateManyArgs>(args?: SelectSubset<T, AlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alerts and returns the data saved in the database.
     * @param {AlertCreateManyAndReturnArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alerts and only return the `id`
     * const alertWithIdOnly = await prisma.alert.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlertCreateManyAndReturnArgs>(args?: SelectSubset<T, AlertCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Alert.
     * @param {AlertDeleteArgs} args - Arguments to delete one Alert.
     * @example
     * // Delete one Alert
     * const Alert = await prisma.alert.delete({
     *   where: {
     *     // ... filter to delete one Alert
     *   }
     * })
     * 
     */
    delete<T extends AlertDeleteArgs>(args: SelectSubset<T, AlertDeleteArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Alert.
     * @param {AlertUpdateArgs} args - Arguments to update one Alert.
     * @example
     * // Update one Alert
     * const alert = await prisma.alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertUpdateArgs>(args: SelectSubset<T, AlertUpdateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Alerts.
     * @param {AlertDeleteManyArgs} args - Arguments to filter Alerts to delete.
     * @example
     * // Delete a few Alerts
     * const { count } = await prisma.alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertDeleteManyArgs>(args?: SelectSubset<T, AlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertUpdateManyArgs>(args: SelectSubset<T, AlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alert.
     * @param {AlertUpsertArgs} args - Arguments to update or create a Alert.
     * @example
     * // Update or create a Alert
     * const alert = await prisma.alert.upsert({
     *   create: {
     *     // ... data to create a Alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert we want to update
     *   }
     * })
     */
    upsert<T extends AlertUpsertArgs>(args: SelectSubset<T, AlertUpsertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertCountArgs} args - Arguments to filter Alerts to count.
     * @example
     * // Count the number of Alerts
     * const count = await prisma.alert.count({
     *   where: {
     *     // ... the filter for the Alerts we want to count
     *   }
     * })
    **/
    count<T extends AlertCountArgs>(
      args?: Subset<T, AlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertAggregateArgs>(args: Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

    /**
     * Group by Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertGroupByArgs['orderBy'] }
        : { orderBy?: AlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alert model
   */
  readonly fields: AlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company<T extends CompanyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CompanyDefaultArgs<ExtArgs>>): Prisma__CompanyClient<$Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alert model
   */ 
  interface AlertFieldRefs {
    readonly id: FieldRef<"Alert", 'String'>
    readonly companyId: FieldRef<"Alert", 'String'>
    readonly type: FieldRef<"Alert", 'String'>
    readonly category: FieldRef<"Alert", 'String'>
    readonly message: FieldRef<"Alert", 'String'>
    readonly data: FieldRef<"Alert", 'Json'>
    readonly read: FieldRef<"Alert", 'Boolean'>
    readonly createdAt: FieldRef<"Alert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alert findUnique
   */
  export type AlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findUniqueOrThrow
   */
  export type AlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findFirst
   */
  export type AlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findFirstOrThrow
   */
  export type AlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findMany
   */
  export type AlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alerts to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert create
   */
  export type AlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to create a Alert.
     */
    data: XOR<AlertCreateInput, AlertUncheckedCreateInput>
  }

  /**
   * Alert createMany
   */
  export type AlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alert createManyAndReturn
   */
  export type AlertCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alert update
   */
  export type AlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to update a Alert.
     */
    data: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
    /**
     * Choose, which Alert to update.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert updateMany
   */
  export type AlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
  }

  /**
   * Alert upsert
   */
  export type AlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The filter to search for the Alert to update in case it exists.
     */
    where: AlertWhereUniqueInput
    /**
     * In case the Alert found by the `where` argument doesn't exist, create a new Alert with this data.
     */
    create: XOR<AlertCreateInput, AlertUncheckedCreateInput>
    /**
     * In case the Alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
  }

  /**
   * Alert delete
   */
  export type AlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter which Alert to delete.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert deleteMany
   */
  export type AlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerts to delete
     */
    where?: AlertWhereInput
  }

  /**
   * Alert without action
   */
  export type AlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
  }


  /**
   * Model TickSnapshot
   */

  export type AggregateTickSnapshot = {
    _count: TickSnapshotCountAggregateOutputType | null
    _avg: TickSnapshotAvgAggregateOutputType | null
    _sum: TickSnapshotSumAggregateOutputType | null
    _min: TickSnapshotMinAggregateOutputType | null
    _max: TickSnapshotMaxAggregateOutputType | null
  }

  export type TickSnapshotAvgAggregateOutputType = {
    tickNumber: number | null
    btcPrice: number | null
    difficulty: number | null
    networkHashrate: number | null
  }

  export type TickSnapshotSumAggregateOutputType = {
    tickNumber: number | null
    btcPrice: number | null
    difficulty: number | null
    networkHashrate: number | null
  }

  export type TickSnapshotMinAggregateOutputType = {
    id: string | null
    tickNumber: number | null
    btcPrice: number | null
    difficulty: number | null
    networkHashrate: number | null
    timestamp: Date | null
  }

  export type TickSnapshotMaxAggregateOutputType = {
    id: string | null
    tickNumber: number | null
    btcPrice: number | null
    difficulty: number | null
    networkHashrate: number | null
    timestamp: Date | null
  }

  export type TickSnapshotCountAggregateOutputType = {
    id: number
    tickNumber: number
    btcPrice: number
    difficulty: number
    networkHashrate: number
    regionalData: number
    events: number
    timestamp: number
    _all: number
  }


  export type TickSnapshotAvgAggregateInputType = {
    tickNumber?: true
    btcPrice?: true
    difficulty?: true
    networkHashrate?: true
  }

  export type TickSnapshotSumAggregateInputType = {
    tickNumber?: true
    btcPrice?: true
    difficulty?: true
    networkHashrate?: true
  }

  export type TickSnapshotMinAggregateInputType = {
    id?: true
    tickNumber?: true
    btcPrice?: true
    difficulty?: true
    networkHashrate?: true
    timestamp?: true
  }

  export type TickSnapshotMaxAggregateInputType = {
    id?: true
    tickNumber?: true
    btcPrice?: true
    difficulty?: true
    networkHashrate?: true
    timestamp?: true
  }

  export type TickSnapshotCountAggregateInputType = {
    id?: true
    tickNumber?: true
    btcPrice?: true
    difficulty?: true
    networkHashrate?: true
    regionalData?: true
    events?: true
    timestamp?: true
    _all?: true
  }

  export type TickSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TickSnapshot to aggregate.
     */
    where?: TickSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TickSnapshots to fetch.
     */
    orderBy?: TickSnapshotOrderByWithRelationInput | TickSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TickSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TickSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TickSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TickSnapshots
    **/
    _count?: true | TickSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TickSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TickSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TickSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TickSnapshotMaxAggregateInputType
  }

  export type GetTickSnapshotAggregateType<T extends TickSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateTickSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTickSnapshot[P]>
      : GetScalarType<T[P], AggregateTickSnapshot[P]>
  }




  export type TickSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TickSnapshotWhereInput
    orderBy?: TickSnapshotOrderByWithAggregationInput | TickSnapshotOrderByWithAggregationInput[]
    by: TickSnapshotScalarFieldEnum[] | TickSnapshotScalarFieldEnum
    having?: TickSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TickSnapshotCountAggregateInputType | true
    _avg?: TickSnapshotAvgAggregateInputType
    _sum?: TickSnapshotSumAggregateInputType
    _min?: TickSnapshotMinAggregateInputType
    _max?: TickSnapshotMaxAggregateInputType
  }

  export type TickSnapshotGroupByOutputType = {
    id: string
    tickNumber: number
    btcPrice: number
    difficulty: number
    networkHashrate: number
    regionalData: JsonValue
    events: JsonValue | null
    timestamp: Date
    _count: TickSnapshotCountAggregateOutputType | null
    _avg: TickSnapshotAvgAggregateOutputType | null
    _sum: TickSnapshotSumAggregateOutputType | null
    _min: TickSnapshotMinAggregateOutputType | null
    _max: TickSnapshotMaxAggregateOutputType | null
  }

  type GetTickSnapshotGroupByPayload<T extends TickSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TickSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TickSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TickSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], TickSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type TickSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tickNumber?: boolean
    btcPrice?: boolean
    difficulty?: boolean
    networkHashrate?: boolean
    regionalData?: boolean
    events?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["tickSnapshot"]>

  export type TickSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tickNumber?: boolean
    btcPrice?: boolean
    difficulty?: boolean
    networkHashrate?: boolean
    regionalData?: boolean
    events?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["tickSnapshot"]>

  export type TickSnapshotSelectScalar = {
    id?: boolean
    tickNumber?: boolean
    btcPrice?: boolean
    difficulty?: boolean
    networkHashrate?: boolean
    regionalData?: boolean
    events?: boolean
    timestamp?: boolean
  }


  export type $TickSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TickSnapshot"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tickNumber: number
      btcPrice: number
      difficulty: number
      networkHashrate: number
      regionalData: Prisma.JsonValue
      events: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["tickSnapshot"]>
    composites: {}
  }

  type TickSnapshotGetPayload<S extends boolean | null | undefined | TickSnapshotDefaultArgs> = $Result.GetResult<Prisma.$TickSnapshotPayload, S>

  type TickSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TickSnapshotFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TickSnapshotCountAggregateInputType | true
    }

  export interface TickSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TickSnapshot'], meta: { name: 'TickSnapshot' } }
    /**
     * Find zero or one TickSnapshot that matches the filter.
     * @param {TickSnapshotFindUniqueArgs} args - Arguments to find a TickSnapshot
     * @example
     * // Get one TickSnapshot
     * const tickSnapshot = await prisma.tickSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TickSnapshotFindUniqueArgs>(args: SelectSubset<T, TickSnapshotFindUniqueArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TickSnapshot that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TickSnapshotFindUniqueOrThrowArgs} args - Arguments to find a TickSnapshot
     * @example
     * // Get one TickSnapshot
     * const tickSnapshot = await prisma.tickSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TickSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, TickSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TickSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickSnapshotFindFirstArgs} args - Arguments to find a TickSnapshot
     * @example
     * // Get one TickSnapshot
     * const tickSnapshot = await prisma.tickSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TickSnapshotFindFirstArgs>(args?: SelectSubset<T, TickSnapshotFindFirstArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TickSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickSnapshotFindFirstOrThrowArgs} args - Arguments to find a TickSnapshot
     * @example
     * // Get one TickSnapshot
     * const tickSnapshot = await prisma.tickSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TickSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, TickSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TickSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TickSnapshots
     * const tickSnapshots = await prisma.tickSnapshot.findMany()
     * 
     * // Get first 10 TickSnapshots
     * const tickSnapshots = await prisma.tickSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tickSnapshotWithIdOnly = await prisma.tickSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TickSnapshotFindManyArgs>(args?: SelectSubset<T, TickSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TickSnapshot.
     * @param {TickSnapshotCreateArgs} args - Arguments to create a TickSnapshot.
     * @example
     * // Create one TickSnapshot
     * const TickSnapshot = await prisma.tickSnapshot.create({
     *   data: {
     *     // ... data to create a TickSnapshot
     *   }
     * })
     * 
     */
    create<T extends TickSnapshotCreateArgs>(args: SelectSubset<T, TickSnapshotCreateArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TickSnapshots.
     * @param {TickSnapshotCreateManyArgs} args - Arguments to create many TickSnapshots.
     * @example
     * // Create many TickSnapshots
     * const tickSnapshot = await prisma.tickSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TickSnapshotCreateManyArgs>(args?: SelectSubset<T, TickSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TickSnapshots and returns the data saved in the database.
     * @param {TickSnapshotCreateManyAndReturnArgs} args - Arguments to create many TickSnapshots.
     * @example
     * // Create many TickSnapshots
     * const tickSnapshot = await prisma.tickSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TickSnapshots and only return the `id`
     * const tickSnapshotWithIdOnly = await prisma.tickSnapshot.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TickSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, TickSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TickSnapshot.
     * @param {TickSnapshotDeleteArgs} args - Arguments to delete one TickSnapshot.
     * @example
     * // Delete one TickSnapshot
     * const TickSnapshot = await prisma.tickSnapshot.delete({
     *   where: {
     *     // ... filter to delete one TickSnapshot
     *   }
     * })
     * 
     */
    delete<T extends TickSnapshotDeleteArgs>(args: SelectSubset<T, TickSnapshotDeleteArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TickSnapshot.
     * @param {TickSnapshotUpdateArgs} args - Arguments to update one TickSnapshot.
     * @example
     * // Update one TickSnapshot
     * const tickSnapshot = await prisma.tickSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TickSnapshotUpdateArgs>(args: SelectSubset<T, TickSnapshotUpdateArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TickSnapshots.
     * @param {TickSnapshotDeleteManyArgs} args - Arguments to filter TickSnapshots to delete.
     * @example
     * // Delete a few TickSnapshots
     * const { count } = await prisma.tickSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TickSnapshotDeleteManyArgs>(args?: SelectSubset<T, TickSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TickSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TickSnapshots
     * const tickSnapshot = await prisma.tickSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TickSnapshotUpdateManyArgs>(args: SelectSubset<T, TickSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TickSnapshot.
     * @param {TickSnapshotUpsertArgs} args - Arguments to update or create a TickSnapshot.
     * @example
     * // Update or create a TickSnapshot
     * const tickSnapshot = await prisma.tickSnapshot.upsert({
     *   create: {
     *     // ... data to create a TickSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TickSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends TickSnapshotUpsertArgs>(args: SelectSubset<T, TickSnapshotUpsertArgs<ExtArgs>>): Prisma__TickSnapshotClient<$Result.GetResult<Prisma.$TickSnapshotPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TickSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickSnapshotCountArgs} args - Arguments to filter TickSnapshots to count.
     * @example
     * // Count the number of TickSnapshots
     * const count = await prisma.tickSnapshot.count({
     *   where: {
     *     // ... the filter for the TickSnapshots we want to count
     *   }
     * })
    **/
    count<T extends TickSnapshotCountArgs>(
      args?: Subset<T, TickSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TickSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TickSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TickSnapshotAggregateArgs>(args: Subset<T, TickSnapshotAggregateArgs>): Prisma.PrismaPromise<GetTickSnapshotAggregateType<T>>

    /**
     * Group by TickSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TickSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TickSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TickSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: TickSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TickSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTickSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TickSnapshot model
   */
  readonly fields: TickSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TickSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TickSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TickSnapshot model
   */ 
  interface TickSnapshotFieldRefs {
    readonly id: FieldRef<"TickSnapshot", 'String'>
    readonly tickNumber: FieldRef<"TickSnapshot", 'Int'>
    readonly btcPrice: FieldRef<"TickSnapshot", 'Float'>
    readonly difficulty: FieldRef<"TickSnapshot", 'Float'>
    readonly networkHashrate: FieldRef<"TickSnapshot", 'Float'>
    readonly regionalData: FieldRef<"TickSnapshot", 'Json'>
    readonly events: FieldRef<"TickSnapshot", 'Json'>
    readonly timestamp: FieldRef<"TickSnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TickSnapshot findUnique
   */
  export type TickSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which TickSnapshot to fetch.
     */
    where: TickSnapshotWhereUniqueInput
  }

  /**
   * TickSnapshot findUniqueOrThrow
   */
  export type TickSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which TickSnapshot to fetch.
     */
    where: TickSnapshotWhereUniqueInput
  }

  /**
   * TickSnapshot findFirst
   */
  export type TickSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which TickSnapshot to fetch.
     */
    where?: TickSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TickSnapshots to fetch.
     */
    orderBy?: TickSnapshotOrderByWithRelationInput | TickSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TickSnapshots.
     */
    cursor?: TickSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TickSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TickSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TickSnapshots.
     */
    distinct?: TickSnapshotScalarFieldEnum | TickSnapshotScalarFieldEnum[]
  }

  /**
   * TickSnapshot findFirstOrThrow
   */
  export type TickSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which TickSnapshot to fetch.
     */
    where?: TickSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TickSnapshots to fetch.
     */
    orderBy?: TickSnapshotOrderByWithRelationInput | TickSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TickSnapshots.
     */
    cursor?: TickSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TickSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TickSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TickSnapshots.
     */
    distinct?: TickSnapshotScalarFieldEnum | TickSnapshotScalarFieldEnum[]
  }

  /**
   * TickSnapshot findMany
   */
  export type TickSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * Filter, which TickSnapshots to fetch.
     */
    where?: TickSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TickSnapshots to fetch.
     */
    orderBy?: TickSnapshotOrderByWithRelationInput | TickSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TickSnapshots.
     */
    cursor?: TickSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TickSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TickSnapshots.
     */
    skip?: number
    distinct?: TickSnapshotScalarFieldEnum | TickSnapshotScalarFieldEnum[]
  }

  /**
   * TickSnapshot create
   */
  export type TickSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * The data needed to create a TickSnapshot.
     */
    data: XOR<TickSnapshotCreateInput, TickSnapshotUncheckedCreateInput>
  }

  /**
   * TickSnapshot createMany
   */
  export type TickSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TickSnapshots.
     */
    data: TickSnapshotCreateManyInput | TickSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TickSnapshot createManyAndReturn
   */
  export type TickSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TickSnapshots.
     */
    data: TickSnapshotCreateManyInput | TickSnapshotCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TickSnapshot update
   */
  export type TickSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * The data needed to update a TickSnapshot.
     */
    data: XOR<TickSnapshotUpdateInput, TickSnapshotUncheckedUpdateInput>
    /**
     * Choose, which TickSnapshot to update.
     */
    where: TickSnapshotWhereUniqueInput
  }

  /**
   * TickSnapshot updateMany
   */
  export type TickSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TickSnapshots.
     */
    data: XOR<TickSnapshotUpdateManyMutationInput, TickSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which TickSnapshots to update
     */
    where?: TickSnapshotWhereInput
  }

  /**
   * TickSnapshot upsert
   */
  export type TickSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * The filter to search for the TickSnapshot to update in case it exists.
     */
    where: TickSnapshotWhereUniqueInput
    /**
     * In case the TickSnapshot found by the `where` argument doesn't exist, create a new TickSnapshot with this data.
     */
    create: XOR<TickSnapshotCreateInput, TickSnapshotUncheckedCreateInput>
    /**
     * In case the TickSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TickSnapshotUpdateInput, TickSnapshotUncheckedUpdateInput>
  }

  /**
   * TickSnapshot delete
   */
  export type TickSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
    /**
     * Filter which TickSnapshot to delete.
     */
    where: TickSnapshotWhereUniqueInput
  }

  /**
   * TickSnapshot deleteMany
   */
  export type TickSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TickSnapshots to delete
     */
    where?: TickSnapshotWhereInput
  }

  /**
   * TickSnapshot without action
   */
  export type TickSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TickSnapshot
     */
    select?: TickSnapshotSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    username: 'username',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLogin: 'lastLogin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    refreshToken: 'refreshToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    ownerId: 'ownerId',
    name: 'name',
    description: 'description',
    region: 'region',
    usdBalance: 'usdBalance',
    btcBalance: 'btcBalance',
    repMiners: 'repMiners',
    repTraders: 'repTraders',
    repRegulators: 'repRegulators',
    repAnarchists: 'repAnarchists',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const SiteScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    name: 'name',
    region: 'region',
    gridTier: 'gridTier',
    coolingType: 'coolingType',
    uptime: 'uptime',
    totalHashrate: 'totalHashrate',
    powerUsage: 'powerUsage',
    gridWidth: 'gridWidth',
    gridHeight: 'gridHeight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SiteScalarFieldEnum = (typeof SiteScalarFieldEnum)[keyof typeof SiteScalarFieldEnum]


  export const RigScalarFieldEnum: {
    id: 'id',
    siteId: 'siteId',
    type: 'type',
    gridX: 'gridX',
    gridY: 'gridY',
    hashrate: 'hashrate',
    efficiency: 'efficiency',
    wear: 'wear',
    firmware: 'firmware',
    status: 'status',
    purchasePrice: 'purchasePrice',
    purchasedAt: 'purchasedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RigScalarFieldEnum = (typeof RigScalarFieldEnum)[keyof typeof RigScalarFieldEnum]


  export const EnergyContractScalarFieldEnum: {
    id: 'id',
    siteId: 'siteId',
    provider: 'provider',
    pricePerKWh: 'pricePerKWh',
    capacity: 'capacity',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt'
  };

  export type EnergyContractScalarFieldEnum = (typeof EnergyContractScalarFieldEnum)[keyof typeof EnergyContractScalarFieldEnum]


  export const PositionScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    instrument: 'instrument',
    side: 'side',
    quantity: 'quantity',
    entryPrice: 'entryPrice',
    leverage: 'leverage',
    margin: 'margin',
    liquidationPrice: 'liquidationPrice',
    status: 'status',
    pnl: 'pnl',
    openedAt: 'openedAt',
    closedAt: 'closedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PositionScalarFieldEnum = (typeof PositionScalarFieldEnum)[keyof typeof PositionScalarFieldEnum]


  export const ResearchScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    nodeId: 'nodeId',
    category: 'category',
    level: 'level',
    progress: 'progress',
    status: 'status',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ResearchScalarFieldEnum = (typeof ResearchScalarFieldEnum)[keyof typeof ResearchScalarFieldEnum]


  export const ProposalScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    description: 'description',
    votesFor: 'votesFor',
    votesAgainst: 'votesAgainst',
    votesAbstain: 'votesAbstain',
    deadline: 'deadline',
    outcome: 'outcome',
    createdAt: 'createdAt',
    resolvedAt: 'resolvedAt'
  };

  export type ProposalScalarFieldEnum = (typeof ProposalScalarFieldEnum)[keyof typeof ProposalScalarFieldEnum]


  export const VoteScalarFieldEnum: {
    id: 'id',
    proposalId: 'proposalId',
    companyId: 'companyId',
    choice: 'choice',
    weight: 'weight',
    createdAt: 'createdAt'
  };

  export type VoteScalarFieldEnum = (typeof VoteScalarFieldEnum)[keyof typeof VoteScalarFieldEnum]


  export const QuestScalarFieldEnum: {
    id: 'id',
    type: 'type',
    category: 'category',
    title: 'title',
    description: 'description',
    requirements: 'requirements',
    rewardUsd: 'rewardUsd',
    rewardBtc: 'rewardBtc',
    rewardRep: 'rewardRep',
    rewardResearch: 'rewardResearch',
    startDate: 'startDate',
    endDate: 'endDate',
    createdAt: 'createdAt'
  };

  export type QuestScalarFieldEnum = (typeof QuestScalarFieldEnum)[keyof typeof QuestScalarFieldEnum]


  export const CompanyQuestScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    questId: 'questId',
    status: 'status',
    progress: 'progress',
    startedAt: 'startedAt',
    completedAt: 'completedAt'
  };

  export type CompanyQuestScalarFieldEnum = (typeof CompanyQuestScalarFieldEnum)[keyof typeof CompanyQuestScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    type: 'type',
    severity: 'severity',
    title: 'title',
    description: 'description',
    region: 'region',
    affectedCompanies: 'affectedCompanies',
    payload: 'payload',
    createdAt: 'createdAt',
    resolvedAt: 'resolvedAt'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const AlertScalarFieldEnum: {
    id: 'id',
    companyId: 'companyId',
    type: 'type',
    category: 'category',
    message: 'message',
    data: 'data',
    read: 'read',
    createdAt: 'createdAt'
  };

  export type AlertScalarFieldEnum = (typeof AlertScalarFieldEnum)[keyof typeof AlertScalarFieldEnum]


  export const TickSnapshotScalarFieldEnum: {
    id: 'id',
    tickNumber: 'tickNumber',
    btcPrice: 'btcPrice',
    difficulty: 'difficulty',
    networkHashrate: 'networkHashrate',
    regionalData: 'regionalData',
    events: 'events',
    timestamp: 'timestamp'
  };

  export type TickSnapshotScalarFieldEnum = (typeof TickSnapshotScalarFieldEnum)[keyof typeof TickSnapshotScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeFilter<"User"> | Date | string
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    company?: CompanyOrderByWithRelationInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLogin?: DateTimeFilter<"User"> | Date | string
    company?: XOR<CompanyNullableRelationFilter, CompanyWhereInput> | null
    sessions?: SessionListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLogin?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    refreshToken?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    refreshToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "refreshToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    refreshToken?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type CompanyWhereInput = {
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    id?: StringFilter<"Company"> | string
    ownerId?: StringFilter<"Company"> | string
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    region?: StringFilter<"Company"> | string
    usdBalance?: FloatFilter<"Company"> | number
    btcBalance?: FloatFilter<"Company"> | number
    repMiners?: IntFilter<"Company"> | number
    repTraders?: IntFilter<"Company"> | number
    repRegulators?: IntFilter<"Company"> | number
    repAnarchists?: IntFilter<"Company"> | number
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    sites?: SiteListRelationFilter
    positions?: PositionListRelationFilter
    research?: ResearchListRelationFilter
    votes?: VoteListRelationFilter
    quests?: CompanyQuestListRelationFilter
    alerts?: AlertListRelationFilter
  }

  export type CompanyOrderByWithRelationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    region?: SortOrder
    usdBalance?: SortOrder
    btcBalance?: SortOrder
    repMiners?: SortOrder
    repTraders?: SortOrder
    repRegulators?: SortOrder
    repAnarchists?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    owner?: UserOrderByWithRelationInput
    sites?: SiteOrderByRelationAggregateInput
    positions?: PositionOrderByRelationAggregateInput
    research?: ResearchOrderByRelationAggregateInput
    votes?: VoteOrderByRelationAggregateInput
    quests?: CompanyQuestOrderByRelationAggregateInput
    alerts?: AlertOrderByRelationAggregateInput
  }

  export type CompanyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ownerId?: string
    AND?: CompanyWhereInput | CompanyWhereInput[]
    OR?: CompanyWhereInput[]
    NOT?: CompanyWhereInput | CompanyWhereInput[]
    name?: StringFilter<"Company"> | string
    description?: StringNullableFilter<"Company"> | string | null
    region?: StringFilter<"Company"> | string
    usdBalance?: FloatFilter<"Company"> | number
    btcBalance?: FloatFilter<"Company"> | number
    repMiners?: IntFilter<"Company"> | number
    repTraders?: IntFilter<"Company"> | number
    repRegulators?: IntFilter<"Company"> | number
    repAnarchists?: IntFilter<"Company"> | number
    createdAt?: DateTimeFilter<"Company"> | Date | string
    updatedAt?: DateTimeFilter<"Company"> | Date | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    sites?: SiteListRelationFilter
    positions?: PositionListRelationFilter
    research?: ResearchListRelationFilter
    votes?: VoteListRelationFilter
    quests?: CompanyQuestListRelationFilter
    alerts?: AlertListRelationFilter
  }, "id" | "ownerId">

  export type CompanyOrderByWithAggregationInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    region?: SortOrder
    usdBalance?: SortOrder
    btcBalance?: SortOrder
    repMiners?: SortOrder
    repTraders?: SortOrder
    repRegulators?: SortOrder
    repAnarchists?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompanyCountOrderByAggregateInput
    _avg?: CompanyAvgOrderByAggregateInput
    _max?: CompanyMaxOrderByAggregateInput
    _min?: CompanyMinOrderByAggregateInput
    _sum?: CompanySumOrderByAggregateInput
  }

  export type CompanyScalarWhereWithAggregatesInput = {
    AND?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    OR?: CompanyScalarWhereWithAggregatesInput[]
    NOT?: CompanyScalarWhereWithAggregatesInput | CompanyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Company"> | string
    ownerId?: StringWithAggregatesFilter<"Company"> | string
    name?: StringWithAggregatesFilter<"Company"> | string
    description?: StringNullableWithAggregatesFilter<"Company"> | string | null
    region?: StringWithAggregatesFilter<"Company"> | string
    usdBalance?: FloatWithAggregatesFilter<"Company"> | number
    btcBalance?: FloatWithAggregatesFilter<"Company"> | number
    repMiners?: IntWithAggregatesFilter<"Company"> | number
    repTraders?: IntWithAggregatesFilter<"Company"> | number
    repRegulators?: IntWithAggregatesFilter<"Company"> | number
    repAnarchists?: IntWithAggregatesFilter<"Company"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Company"> | Date | string
  }

  export type SiteWhereInput = {
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    id?: StringFilter<"Site"> | string
    companyId?: StringFilter<"Site"> | string
    name?: StringFilter<"Site"> | string
    region?: StringFilter<"Site"> | string
    gridTier?: IntFilter<"Site"> | number
    coolingType?: StringFilter<"Site"> | string
    uptime?: FloatFilter<"Site"> | number
    totalHashrate?: FloatFilter<"Site"> | number
    powerUsage?: FloatFilter<"Site"> | number
    gridWidth?: IntFilter<"Site"> | number
    gridHeight?: IntFilter<"Site"> | number
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    rigs?: RigListRelationFilter
    energyContracts?: EnergyContractListRelationFilter
  }

  export type SiteOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    region?: SortOrder
    gridTier?: SortOrder
    coolingType?: SortOrder
    uptime?: SortOrder
    totalHashrate?: SortOrder
    powerUsage?: SortOrder
    gridWidth?: SortOrder
    gridHeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
    rigs?: RigOrderByRelationAggregateInput
    energyContracts?: EnergyContractOrderByRelationAggregateInput
  }

  export type SiteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SiteWhereInput | SiteWhereInput[]
    OR?: SiteWhereInput[]
    NOT?: SiteWhereInput | SiteWhereInput[]
    companyId?: StringFilter<"Site"> | string
    name?: StringFilter<"Site"> | string
    region?: StringFilter<"Site"> | string
    gridTier?: IntFilter<"Site"> | number
    coolingType?: StringFilter<"Site"> | string
    uptime?: FloatFilter<"Site"> | number
    totalHashrate?: FloatFilter<"Site"> | number
    powerUsage?: FloatFilter<"Site"> | number
    gridWidth?: IntFilter<"Site"> | number
    gridHeight?: IntFilter<"Site"> | number
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    rigs?: RigListRelationFilter
    energyContracts?: EnergyContractListRelationFilter
  }, "id">

  export type SiteOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    region?: SortOrder
    gridTier?: SortOrder
    coolingType?: SortOrder
    uptime?: SortOrder
    totalHashrate?: SortOrder
    powerUsage?: SortOrder
    gridWidth?: SortOrder
    gridHeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SiteCountOrderByAggregateInput
    _avg?: SiteAvgOrderByAggregateInput
    _max?: SiteMaxOrderByAggregateInput
    _min?: SiteMinOrderByAggregateInput
    _sum?: SiteSumOrderByAggregateInput
  }

  export type SiteScalarWhereWithAggregatesInput = {
    AND?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    OR?: SiteScalarWhereWithAggregatesInput[]
    NOT?: SiteScalarWhereWithAggregatesInput | SiteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Site"> | string
    companyId?: StringWithAggregatesFilter<"Site"> | string
    name?: StringWithAggregatesFilter<"Site"> | string
    region?: StringWithAggregatesFilter<"Site"> | string
    gridTier?: IntWithAggregatesFilter<"Site"> | number
    coolingType?: StringWithAggregatesFilter<"Site"> | string
    uptime?: FloatWithAggregatesFilter<"Site"> | number
    totalHashrate?: FloatWithAggregatesFilter<"Site"> | number
    powerUsage?: FloatWithAggregatesFilter<"Site"> | number
    gridWidth?: IntWithAggregatesFilter<"Site"> | number
    gridHeight?: IntWithAggregatesFilter<"Site"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Site"> | Date | string
  }

  export type RigWhereInput = {
    AND?: RigWhereInput | RigWhereInput[]
    OR?: RigWhereInput[]
    NOT?: RigWhereInput | RigWhereInput[]
    id?: StringFilter<"Rig"> | string
    siteId?: StringFilter<"Rig"> | string
    type?: StringFilter<"Rig"> | string
    gridX?: IntFilter<"Rig"> | number
    gridY?: IntFilter<"Rig"> | number
    hashrate?: FloatFilter<"Rig"> | number
    efficiency?: FloatFilter<"Rig"> | number
    wear?: FloatFilter<"Rig"> | number
    firmware?: StringFilter<"Rig"> | string
    status?: StringFilter<"Rig"> | string
    purchasePrice?: FloatFilter<"Rig"> | number
    purchasedAt?: DateTimeFilter<"Rig"> | Date | string
    createdAt?: DateTimeFilter<"Rig"> | Date | string
    updatedAt?: DateTimeFilter<"Rig"> | Date | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }

  export type RigOrderByWithRelationInput = {
    id?: SortOrder
    siteId?: SortOrder
    type?: SortOrder
    gridX?: SortOrder
    gridY?: SortOrder
    hashrate?: SortOrder
    efficiency?: SortOrder
    wear?: SortOrder
    firmware?: SortOrder
    status?: SortOrder
    purchasePrice?: SortOrder
    purchasedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    site?: SiteOrderByWithRelationInput
  }

  export type RigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    siteId_gridX_gridY?: RigSiteIdGridXGridYCompoundUniqueInput
    AND?: RigWhereInput | RigWhereInput[]
    OR?: RigWhereInput[]
    NOT?: RigWhereInput | RigWhereInput[]
    siteId?: StringFilter<"Rig"> | string
    type?: StringFilter<"Rig"> | string
    gridX?: IntFilter<"Rig"> | number
    gridY?: IntFilter<"Rig"> | number
    hashrate?: FloatFilter<"Rig"> | number
    efficiency?: FloatFilter<"Rig"> | number
    wear?: FloatFilter<"Rig"> | number
    firmware?: StringFilter<"Rig"> | string
    status?: StringFilter<"Rig"> | string
    purchasePrice?: FloatFilter<"Rig"> | number
    purchasedAt?: DateTimeFilter<"Rig"> | Date | string
    createdAt?: DateTimeFilter<"Rig"> | Date | string
    updatedAt?: DateTimeFilter<"Rig"> | Date | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }, "id" | "siteId_gridX_gridY">

  export type RigOrderByWithAggregationInput = {
    id?: SortOrder
    siteId?: SortOrder
    type?: SortOrder
    gridX?: SortOrder
    gridY?: SortOrder
    hashrate?: SortOrder
    efficiency?: SortOrder
    wear?: SortOrder
    firmware?: SortOrder
    status?: SortOrder
    purchasePrice?: SortOrder
    purchasedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RigCountOrderByAggregateInput
    _avg?: RigAvgOrderByAggregateInput
    _max?: RigMaxOrderByAggregateInput
    _min?: RigMinOrderByAggregateInput
    _sum?: RigSumOrderByAggregateInput
  }

  export type RigScalarWhereWithAggregatesInput = {
    AND?: RigScalarWhereWithAggregatesInput | RigScalarWhereWithAggregatesInput[]
    OR?: RigScalarWhereWithAggregatesInput[]
    NOT?: RigScalarWhereWithAggregatesInput | RigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Rig"> | string
    siteId?: StringWithAggregatesFilter<"Rig"> | string
    type?: StringWithAggregatesFilter<"Rig"> | string
    gridX?: IntWithAggregatesFilter<"Rig"> | number
    gridY?: IntWithAggregatesFilter<"Rig"> | number
    hashrate?: FloatWithAggregatesFilter<"Rig"> | number
    efficiency?: FloatWithAggregatesFilter<"Rig"> | number
    wear?: FloatWithAggregatesFilter<"Rig"> | number
    firmware?: StringWithAggregatesFilter<"Rig"> | string
    status?: StringWithAggregatesFilter<"Rig"> | string
    purchasePrice?: FloatWithAggregatesFilter<"Rig"> | number
    purchasedAt?: DateTimeWithAggregatesFilter<"Rig"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Rig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Rig"> | Date | string
  }

  export type EnergyContractWhereInput = {
    AND?: EnergyContractWhereInput | EnergyContractWhereInput[]
    OR?: EnergyContractWhereInput[]
    NOT?: EnergyContractWhereInput | EnergyContractWhereInput[]
    id?: StringFilter<"EnergyContract"> | string
    siteId?: StringFilter<"EnergyContract"> | string
    provider?: StringFilter<"EnergyContract"> | string
    pricePerKWh?: FloatFilter<"EnergyContract"> | number
    capacity?: FloatFilter<"EnergyContract"> | number
    startDate?: DateTimeFilter<"EnergyContract"> | Date | string
    endDate?: DateTimeFilter<"EnergyContract"> | Date | string
    createdAt?: DateTimeFilter<"EnergyContract"> | Date | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }

  export type EnergyContractOrderByWithRelationInput = {
    id?: SortOrder
    siteId?: SortOrder
    provider?: SortOrder
    pricePerKWh?: SortOrder
    capacity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    site?: SiteOrderByWithRelationInput
  }

  export type EnergyContractWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EnergyContractWhereInput | EnergyContractWhereInput[]
    OR?: EnergyContractWhereInput[]
    NOT?: EnergyContractWhereInput | EnergyContractWhereInput[]
    siteId?: StringFilter<"EnergyContract"> | string
    provider?: StringFilter<"EnergyContract"> | string
    pricePerKWh?: FloatFilter<"EnergyContract"> | number
    capacity?: FloatFilter<"EnergyContract"> | number
    startDate?: DateTimeFilter<"EnergyContract"> | Date | string
    endDate?: DateTimeFilter<"EnergyContract"> | Date | string
    createdAt?: DateTimeFilter<"EnergyContract"> | Date | string
    site?: XOR<SiteRelationFilter, SiteWhereInput>
  }, "id">

  export type EnergyContractOrderByWithAggregationInput = {
    id?: SortOrder
    siteId?: SortOrder
    provider?: SortOrder
    pricePerKWh?: SortOrder
    capacity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    _count?: EnergyContractCountOrderByAggregateInput
    _avg?: EnergyContractAvgOrderByAggregateInput
    _max?: EnergyContractMaxOrderByAggregateInput
    _min?: EnergyContractMinOrderByAggregateInput
    _sum?: EnergyContractSumOrderByAggregateInput
  }

  export type EnergyContractScalarWhereWithAggregatesInput = {
    AND?: EnergyContractScalarWhereWithAggregatesInput | EnergyContractScalarWhereWithAggregatesInput[]
    OR?: EnergyContractScalarWhereWithAggregatesInput[]
    NOT?: EnergyContractScalarWhereWithAggregatesInput | EnergyContractScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EnergyContract"> | string
    siteId?: StringWithAggregatesFilter<"EnergyContract"> | string
    provider?: StringWithAggregatesFilter<"EnergyContract"> | string
    pricePerKWh?: FloatWithAggregatesFilter<"EnergyContract"> | number
    capacity?: FloatWithAggregatesFilter<"EnergyContract"> | number
    startDate?: DateTimeWithAggregatesFilter<"EnergyContract"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"EnergyContract"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"EnergyContract"> | Date | string
  }

  export type PositionWhereInput = {
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    id?: StringFilter<"Position"> | string
    companyId?: StringFilter<"Position"> | string
    instrument?: StringFilter<"Position"> | string
    side?: StringFilter<"Position"> | string
    quantity?: FloatFilter<"Position"> | number
    entryPrice?: FloatFilter<"Position"> | number
    leverage?: FloatFilter<"Position"> | number
    margin?: FloatNullableFilter<"Position"> | number | null
    liquidationPrice?: FloatNullableFilter<"Position"> | number | null
    status?: StringFilter<"Position"> | string
    pnl?: FloatFilter<"Position"> | number
    openedAt?: DateTimeFilter<"Position"> | Date | string
    closedAt?: DateTimeNullableFilter<"Position"> | Date | string | null
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type PositionOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    instrument?: SortOrder
    side?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    leverage?: SortOrder
    margin?: SortOrderInput | SortOrder
    liquidationPrice?: SortOrderInput | SortOrder
    status?: SortOrder
    pnl?: SortOrder
    openedAt?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type PositionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PositionWhereInput | PositionWhereInput[]
    OR?: PositionWhereInput[]
    NOT?: PositionWhereInput | PositionWhereInput[]
    companyId?: StringFilter<"Position"> | string
    instrument?: StringFilter<"Position"> | string
    side?: StringFilter<"Position"> | string
    quantity?: FloatFilter<"Position"> | number
    entryPrice?: FloatFilter<"Position"> | number
    leverage?: FloatFilter<"Position"> | number
    margin?: FloatNullableFilter<"Position"> | number | null
    liquidationPrice?: FloatNullableFilter<"Position"> | number | null
    status?: StringFilter<"Position"> | string
    pnl?: FloatFilter<"Position"> | number
    openedAt?: DateTimeFilter<"Position"> | Date | string
    closedAt?: DateTimeNullableFilter<"Position"> | Date | string | null
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id">

  export type PositionOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    instrument?: SortOrder
    side?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    leverage?: SortOrder
    margin?: SortOrderInput | SortOrder
    liquidationPrice?: SortOrderInput | SortOrder
    status?: SortOrder
    pnl?: SortOrder
    openedAt?: SortOrder
    closedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PositionCountOrderByAggregateInput
    _avg?: PositionAvgOrderByAggregateInput
    _max?: PositionMaxOrderByAggregateInput
    _min?: PositionMinOrderByAggregateInput
    _sum?: PositionSumOrderByAggregateInput
  }

  export type PositionScalarWhereWithAggregatesInput = {
    AND?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    OR?: PositionScalarWhereWithAggregatesInput[]
    NOT?: PositionScalarWhereWithAggregatesInput | PositionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Position"> | string
    companyId?: StringWithAggregatesFilter<"Position"> | string
    instrument?: StringWithAggregatesFilter<"Position"> | string
    side?: StringWithAggregatesFilter<"Position"> | string
    quantity?: FloatWithAggregatesFilter<"Position"> | number
    entryPrice?: FloatWithAggregatesFilter<"Position"> | number
    leverage?: FloatWithAggregatesFilter<"Position"> | number
    margin?: FloatNullableWithAggregatesFilter<"Position"> | number | null
    liquidationPrice?: FloatNullableWithAggregatesFilter<"Position"> | number | null
    status?: StringWithAggregatesFilter<"Position"> | string
    pnl?: FloatWithAggregatesFilter<"Position"> | number
    openedAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
    closedAt?: DateTimeNullableWithAggregatesFilter<"Position"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Position"> | Date | string
  }

  export type ResearchWhereInput = {
    AND?: ResearchWhereInput | ResearchWhereInput[]
    OR?: ResearchWhereInput[]
    NOT?: ResearchWhereInput | ResearchWhereInput[]
    id?: StringFilter<"Research"> | string
    companyId?: StringFilter<"Research"> | string
    nodeId?: StringFilter<"Research"> | string
    category?: StringFilter<"Research"> | string
    level?: IntFilter<"Research"> | number
    progress?: FloatFilter<"Research"> | number
    status?: StringFilter<"Research"> | string
    startedAt?: DateTimeNullableFilter<"Research"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Research"> | Date | string | null
    createdAt?: DateTimeFilter<"Research"> | Date | string
    updatedAt?: DateTimeFilter<"Research"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type ResearchOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    nodeId?: SortOrder
    category?: SortOrder
    level?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type ResearchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_nodeId?: ResearchCompanyIdNodeIdCompoundUniqueInput
    AND?: ResearchWhereInput | ResearchWhereInput[]
    OR?: ResearchWhereInput[]
    NOT?: ResearchWhereInput | ResearchWhereInput[]
    companyId?: StringFilter<"Research"> | string
    nodeId?: StringFilter<"Research"> | string
    category?: StringFilter<"Research"> | string
    level?: IntFilter<"Research"> | number
    progress?: FloatFilter<"Research"> | number
    status?: StringFilter<"Research"> | string
    startedAt?: DateTimeNullableFilter<"Research"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Research"> | Date | string | null
    createdAt?: DateTimeFilter<"Research"> | Date | string
    updatedAt?: DateTimeFilter<"Research"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id" | "companyId_nodeId">

  export type ResearchOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    nodeId?: SortOrder
    category?: SortOrder
    level?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ResearchCountOrderByAggregateInput
    _avg?: ResearchAvgOrderByAggregateInput
    _max?: ResearchMaxOrderByAggregateInput
    _min?: ResearchMinOrderByAggregateInput
    _sum?: ResearchSumOrderByAggregateInput
  }

  export type ResearchScalarWhereWithAggregatesInput = {
    AND?: ResearchScalarWhereWithAggregatesInput | ResearchScalarWhereWithAggregatesInput[]
    OR?: ResearchScalarWhereWithAggregatesInput[]
    NOT?: ResearchScalarWhereWithAggregatesInput | ResearchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Research"> | string
    companyId?: StringWithAggregatesFilter<"Research"> | string
    nodeId?: StringWithAggregatesFilter<"Research"> | string
    category?: StringWithAggregatesFilter<"Research"> | string
    level?: IntWithAggregatesFilter<"Research"> | number
    progress?: FloatWithAggregatesFilter<"Research"> | number
    status?: StringWithAggregatesFilter<"Research"> | string
    startedAt?: DateTimeNullableWithAggregatesFilter<"Research"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"Research"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Research"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Research"> | Date | string
  }

  export type ProposalWhereInput = {
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    id?: StringFilter<"Proposal"> | string
    type?: StringFilter<"Proposal"> | string
    title?: StringFilter<"Proposal"> | string
    description?: StringFilter<"Proposal"> | string
    votesFor?: IntFilter<"Proposal"> | number
    votesAgainst?: IntFilter<"Proposal"> | number
    votesAbstain?: IntFilter<"Proposal"> | number
    deadline?: DateTimeFilter<"Proposal"> | Date | string
    outcome?: StringNullableFilter<"Proposal"> | string | null
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    votes?: VoteListRelationFilter
  }

  export type ProposalOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    votesFor?: SortOrder
    votesAgainst?: SortOrder
    votesAbstain?: SortOrder
    deadline?: SortOrder
    outcome?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    votes?: VoteOrderByRelationAggregateInput
  }

  export type ProposalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProposalWhereInput | ProposalWhereInput[]
    OR?: ProposalWhereInput[]
    NOT?: ProposalWhereInput | ProposalWhereInput[]
    type?: StringFilter<"Proposal"> | string
    title?: StringFilter<"Proposal"> | string
    description?: StringFilter<"Proposal"> | string
    votesFor?: IntFilter<"Proposal"> | number
    votesAgainst?: IntFilter<"Proposal"> | number
    votesAbstain?: IntFilter<"Proposal"> | number
    deadline?: DateTimeFilter<"Proposal"> | Date | string
    outcome?: StringNullableFilter<"Proposal"> | string | null
    createdAt?: DateTimeFilter<"Proposal"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Proposal"> | Date | string | null
    votes?: VoteListRelationFilter
  }, "id">

  export type ProposalOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    votesFor?: SortOrder
    votesAgainst?: SortOrder
    votesAbstain?: SortOrder
    deadline?: SortOrder
    outcome?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    _count?: ProposalCountOrderByAggregateInput
    _avg?: ProposalAvgOrderByAggregateInput
    _max?: ProposalMaxOrderByAggregateInput
    _min?: ProposalMinOrderByAggregateInput
    _sum?: ProposalSumOrderByAggregateInput
  }

  export type ProposalScalarWhereWithAggregatesInput = {
    AND?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    OR?: ProposalScalarWhereWithAggregatesInput[]
    NOT?: ProposalScalarWhereWithAggregatesInput | ProposalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Proposal"> | string
    type?: StringWithAggregatesFilter<"Proposal"> | string
    title?: StringWithAggregatesFilter<"Proposal"> | string
    description?: StringWithAggregatesFilter<"Proposal"> | string
    votesFor?: IntWithAggregatesFilter<"Proposal"> | number
    votesAgainst?: IntWithAggregatesFilter<"Proposal"> | number
    votesAbstain?: IntWithAggregatesFilter<"Proposal"> | number
    deadline?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    outcome?: StringNullableWithAggregatesFilter<"Proposal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Proposal"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Proposal"> | Date | string | null
  }

  export type VoteWhereInput = {
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    id?: StringFilter<"Vote"> | string
    proposalId?: StringFilter<"Vote"> | string
    companyId?: StringFilter<"Vote"> | string
    choice?: StringFilter<"Vote"> | string
    weight?: IntFilter<"Vote"> | number
    createdAt?: DateTimeFilter<"Vote"> | Date | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type VoteOrderByWithRelationInput = {
    id?: SortOrder
    proposalId?: SortOrder
    companyId?: SortOrder
    choice?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    proposal?: ProposalOrderByWithRelationInput
    company?: CompanyOrderByWithRelationInput
  }

  export type VoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    proposalId_companyId?: VoteProposalIdCompanyIdCompoundUniqueInput
    AND?: VoteWhereInput | VoteWhereInput[]
    OR?: VoteWhereInput[]
    NOT?: VoteWhereInput | VoteWhereInput[]
    proposalId?: StringFilter<"Vote"> | string
    companyId?: StringFilter<"Vote"> | string
    choice?: StringFilter<"Vote"> | string
    weight?: IntFilter<"Vote"> | number
    createdAt?: DateTimeFilter<"Vote"> | Date | string
    proposal?: XOR<ProposalRelationFilter, ProposalWhereInput>
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id" | "proposalId_companyId">

  export type VoteOrderByWithAggregationInput = {
    id?: SortOrder
    proposalId?: SortOrder
    companyId?: SortOrder
    choice?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    _count?: VoteCountOrderByAggregateInput
    _avg?: VoteAvgOrderByAggregateInput
    _max?: VoteMaxOrderByAggregateInput
    _min?: VoteMinOrderByAggregateInput
    _sum?: VoteSumOrderByAggregateInput
  }

  export type VoteScalarWhereWithAggregatesInput = {
    AND?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    OR?: VoteScalarWhereWithAggregatesInput[]
    NOT?: VoteScalarWhereWithAggregatesInput | VoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Vote"> | string
    proposalId?: StringWithAggregatesFilter<"Vote"> | string
    companyId?: StringWithAggregatesFilter<"Vote"> | string
    choice?: StringWithAggregatesFilter<"Vote"> | string
    weight?: IntWithAggregatesFilter<"Vote"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Vote"> | Date | string
  }

  export type QuestWhereInput = {
    AND?: QuestWhereInput | QuestWhereInput[]
    OR?: QuestWhereInput[]
    NOT?: QuestWhereInput | QuestWhereInput[]
    id?: StringFilter<"Quest"> | string
    type?: StringFilter<"Quest"> | string
    category?: StringFilter<"Quest"> | string
    title?: StringFilter<"Quest"> | string
    description?: StringFilter<"Quest"> | string
    requirements?: JsonFilter<"Quest">
    rewardUsd?: FloatFilter<"Quest"> | number
    rewardBtc?: FloatFilter<"Quest"> | number
    rewardRep?: JsonNullableFilter<"Quest">
    rewardResearch?: IntFilter<"Quest"> | number
    startDate?: DateTimeNullableFilter<"Quest"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Quest"> | Date | string | null
    createdAt?: DateTimeFilter<"Quest"> | Date | string
    companies?: CompanyQuestListRelationFilter
  }

  export type QuestOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrder
    rewardUsd?: SortOrder
    rewardBtc?: SortOrder
    rewardRep?: SortOrderInput | SortOrder
    rewardResearch?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    companies?: CompanyQuestOrderByRelationAggregateInput
  }

  export type QuestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuestWhereInput | QuestWhereInput[]
    OR?: QuestWhereInput[]
    NOT?: QuestWhereInput | QuestWhereInput[]
    type?: StringFilter<"Quest"> | string
    category?: StringFilter<"Quest"> | string
    title?: StringFilter<"Quest"> | string
    description?: StringFilter<"Quest"> | string
    requirements?: JsonFilter<"Quest">
    rewardUsd?: FloatFilter<"Quest"> | number
    rewardBtc?: FloatFilter<"Quest"> | number
    rewardRep?: JsonNullableFilter<"Quest">
    rewardResearch?: IntFilter<"Quest"> | number
    startDate?: DateTimeNullableFilter<"Quest"> | Date | string | null
    endDate?: DateTimeNullableFilter<"Quest"> | Date | string | null
    createdAt?: DateTimeFilter<"Quest"> | Date | string
    companies?: CompanyQuestListRelationFilter
  }, "id">

  export type QuestOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrder
    rewardUsd?: SortOrder
    rewardBtc?: SortOrder
    rewardRep?: SortOrderInput | SortOrder
    rewardResearch?: SortOrder
    startDate?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: QuestCountOrderByAggregateInput
    _avg?: QuestAvgOrderByAggregateInput
    _max?: QuestMaxOrderByAggregateInput
    _min?: QuestMinOrderByAggregateInput
    _sum?: QuestSumOrderByAggregateInput
  }

  export type QuestScalarWhereWithAggregatesInput = {
    AND?: QuestScalarWhereWithAggregatesInput | QuestScalarWhereWithAggregatesInput[]
    OR?: QuestScalarWhereWithAggregatesInput[]
    NOT?: QuestScalarWhereWithAggregatesInput | QuestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Quest"> | string
    type?: StringWithAggregatesFilter<"Quest"> | string
    category?: StringWithAggregatesFilter<"Quest"> | string
    title?: StringWithAggregatesFilter<"Quest"> | string
    description?: StringWithAggregatesFilter<"Quest"> | string
    requirements?: JsonWithAggregatesFilter<"Quest">
    rewardUsd?: FloatWithAggregatesFilter<"Quest"> | number
    rewardBtc?: FloatWithAggregatesFilter<"Quest"> | number
    rewardRep?: JsonNullableWithAggregatesFilter<"Quest">
    rewardResearch?: IntWithAggregatesFilter<"Quest"> | number
    startDate?: DateTimeNullableWithAggregatesFilter<"Quest"> | Date | string | null
    endDate?: DateTimeNullableWithAggregatesFilter<"Quest"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Quest"> | Date | string
  }

  export type CompanyQuestWhereInput = {
    AND?: CompanyQuestWhereInput | CompanyQuestWhereInput[]
    OR?: CompanyQuestWhereInput[]
    NOT?: CompanyQuestWhereInput | CompanyQuestWhereInput[]
    id?: StringFilter<"CompanyQuest"> | string
    companyId?: StringFilter<"CompanyQuest"> | string
    questId?: StringFilter<"CompanyQuest"> | string
    status?: StringFilter<"CompanyQuest"> | string
    progress?: JsonNullableFilter<"CompanyQuest">
    startedAt?: DateTimeFilter<"CompanyQuest"> | Date | string
    completedAt?: DateTimeNullableFilter<"CompanyQuest"> | Date | string | null
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    quest?: XOR<QuestRelationFilter, QuestWhereInput>
  }

  export type CompanyQuestOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    questId?: SortOrder
    status?: SortOrder
    progress?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    company?: CompanyOrderByWithRelationInput
    quest?: QuestOrderByWithRelationInput
  }

  export type CompanyQuestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    companyId_questId?: CompanyQuestCompanyIdQuestIdCompoundUniqueInput
    AND?: CompanyQuestWhereInput | CompanyQuestWhereInput[]
    OR?: CompanyQuestWhereInput[]
    NOT?: CompanyQuestWhereInput | CompanyQuestWhereInput[]
    companyId?: StringFilter<"CompanyQuest"> | string
    questId?: StringFilter<"CompanyQuest"> | string
    status?: StringFilter<"CompanyQuest"> | string
    progress?: JsonNullableFilter<"CompanyQuest">
    startedAt?: DateTimeFilter<"CompanyQuest"> | Date | string
    completedAt?: DateTimeNullableFilter<"CompanyQuest"> | Date | string | null
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
    quest?: XOR<QuestRelationFilter, QuestWhereInput>
  }, "id" | "companyId_questId">

  export type CompanyQuestOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    questId?: SortOrder
    status?: SortOrder
    progress?: SortOrderInput | SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    _count?: CompanyQuestCountOrderByAggregateInput
    _max?: CompanyQuestMaxOrderByAggregateInput
    _min?: CompanyQuestMinOrderByAggregateInput
  }

  export type CompanyQuestScalarWhereWithAggregatesInput = {
    AND?: CompanyQuestScalarWhereWithAggregatesInput | CompanyQuestScalarWhereWithAggregatesInput[]
    OR?: CompanyQuestScalarWhereWithAggregatesInput[]
    NOT?: CompanyQuestScalarWhereWithAggregatesInput | CompanyQuestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CompanyQuest"> | string
    companyId?: StringWithAggregatesFilter<"CompanyQuest"> | string
    questId?: StringWithAggregatesFilter<"CompanyQuest"> | string
    status?: StringWithAggregatesFilter<"CompanyQuest"> | string
    progress?: JsonNullableWithAggregatesFilter<"CompanyQuest">
    startedAt?: DateTimeWithAggregatesFilter<"CompanyQuest"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"CompanyQuest"> | Date | string | null
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: StringFilter<"Event"> | string
    type?: StringFilter<"Event"> | string
    severity?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    region?: StringNullableFilter<"Event"> | string | null
    affectedCompanies?: JsonNullableFilter<"Event">
    payload?: JsonNullableFilter<"Event">
    createdAt?: DateTimeFilter<"Event"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    region?: SortOrderInput | SortOrder
    affectedCompanies?: SortOrderInput | SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    type?: StringFilter<"Event"> | string
    severity?: StringFilter<"Event"> | string
    title?: StringFilter<"Event"> | string
    description?: StringFilter<"Event"> | string
    region?: StringNullableFilter<"Event"> | string | null
    affectedCompanies?: JsonNullableFilter<"Event">
    payload?: JsonNullableFilter<"Event">
    createdAt?: DateTimeFilter<"Event"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"Event"> | Date | string | null
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    region?: SortOrderInput | SortOrder
    affectedCompanies?: SortOrderInput | SortOrder
    payload?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    _count?: EventCountOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Event"> | string
    type?: StringWithAggregatesFilter<"Event"> | string
    severity?: StringWithAggregatesFilter<"Event"> | string
    title?: StringWithAggregatesFilter<"Event"> | string
    description?: StringWithAggregatesFilter<"Event"> | string
    region?: StringNullableWithAggregatesFilter<"Event"> | string | null
    affectedCompanies?: JsonNullableWithAggregatesFilter<"Event">
    payload?: JsonNullableWithAggregatesFilter<"Event">
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Event"> | Date | string | null
  }

  export type AlertWhereInput = {
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    id?: StringFilter<"Alert"> | string
    companyId?: StringFilter<"Alert"> | string
    type?: StringFilter<"Alert"> | string
    category?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    data?: JsonNullableFilter<"Alert">
    read?: BoolFilter<"Alert"> | boolean
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }

  export type AlertOrderByWithRelationInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    company?: CompanyOrderByWithRelationInput
  }

  export type AlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    companyId?: StringFilter<"Alert"> | string
    type?: StringFilter<"Alert"> | string
    category?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    data?: JsonNullableFilter<"Alert">
    read?: BoolFilter<"Alert"> | boolean
    createdAt?: DateTimeFilter<"Alert"> | Date | string
    company?: XOR<CompanyRelationFilter, CompanyWhereInput>
  }, "id">

  export type AlertOrderByWithAggregationInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    read?: SortOrder
    createdAt?: SortOrder
    _count?: AlertCountOrderByAggregateInput
    _max?: AlertMaxOrderByAggregateInput
    _min?: AlertMinOrderByAggregateInput
  }

  export type AlertScalarWhereWithAggregatesInput = {
    AND?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    OR?: AlertScalarWhereWithAggregatesInput[]
    NOT?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alert"> | string
    companyId?: StringWithAggregatesFilter<"Alert"> | string
    type?: StringWithAggregatesFilter<"Alert"> | string
    category?: StringWithAggregatesFilter<"Alert"> | string
    message?: StringWithAggregatesFilter<"Alert"> | string
    data?: JsonNullableWithAggregatesFilter<"Alert">
    read?: BoolWithAggregatesFilter<"Alert"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
  }

  export type TickSnapshotWhereInput = {
    AND?: TickSnapshotWhereInput | TickSnapshotWhereInput[]
    OR?: TickSnapshotWhereInput[]
    NOT?: TickSnapshotWhereInput | TickSnapshotWhereInput[]
    id?: StringFilter<"TickSnapshot"> | string
    tickNumber?: IntFilter<"TickSnapshot"> | number
    btcPrice?: FloatFilter<"TickSnapshot"> | number
    difficulty?: FloatFilter<"TickSnapshot"> | number
    networkHashrate?: FloatFilter<"TickSnapshot"> | number
    regionalData?: JsonFilter<"TickSnapshot">
    events?: JsonNullableFilter<"TickSnapshot">
    timestamp?: DateTimeFilter<"TickSnapshot"> | Date | string
  }

  export type TickSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    tickNumber?: SortOrder
    btcPrice?: SortOrder
    difficulty?: SortOrder
    networkHashrate?: SortOrder
    regionalData?: SortOrder
    events?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type TickSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tickNumber?: number
    AND?: TickSnapshotWhereInput | TickSnapshotWhereInput[]
    OR?: TickSnapshotWhereInput[]
    NOT?: TickSnapshotWhereInput | TickSnapshotWhereInput[]
    btcPrice?: FloatFilter<"TickSnapshot"> | number
    difficulty?: FloatFilter<"TickSnapshot"> | number
    networkHashrate?: FloatFilter<"TickSnapshot"> | number
    regionalData?: JsonFilter<"TickSnapshot">
    events?: JsonNullableFilter<"TickSnapshot">
    timestamp?: DateTimeFilter<"TickSnapshot"> | Date | string
  }, "id" | "tickNumber">

  export type TickSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    tickNumber?: SortOrder
    btcPrice?: SortOrder
    difficulty?: SortOrder
    networkHashrate?: SortOrder
    regionalData?: SortOrder
    events?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: TickSnapshotCountOrderByAggregateInput
    _avg?: TickSnapshotAvgOrderByAggregateInput
    _max?: TickSnapshotMaxOrderByAggregateInput
    _min?: TickSnapshotMinOrderByAggregateInput
    _sum?: TickSnapshotSumOrderByAggregateInput
  }

  export type TickSnapshotScalarWhereWithAggregatesInput = {
    AND?: TickSnapshotScalarWhereWithAggregatesInput | TickSnapshotScalarWhereWithAggregatesInput[]
    OR?: TickSnapshotScalarWhereWithAggregatesInput[]
    NOT?: TickSnapshotScalarWhereWithAggregatesInput | TickSnapshotScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TickSnapshot"> | string
    tickNumber?: IntWithAggregatesFilter<"TickSnapshot"> | number
    btcPrice?: FloatWithAggregatesFilter<"TickSnapshot"> | number
    difficulty?: FloatWithAggregatesFilter<"TickSnapshot"> | number
    networkHashrate?: FloatWithAggregatesFilter<"TickSnapshot"> | number
    regionalData?: JsonWithAggregatesFilter<"TickSnapshot">
    events?: JsonNullableWithAggregatesFilter<"TickSnapshot">
    timestamp?: DateTimeWithAggregatesFilter<"TickSnapshot"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    username: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string
    company?: CompanyCreateNestedOneWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    username: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string
    company?: CompanyUncheckedCreateNestedOneWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUncheckedUpdateOneWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    username: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    refreshToken: string
    expiresAt: Date | string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    refreshToken: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    refreshToken: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    positions?: PositionCreateNestedManyWithoutCompanyInput
    research?: ResearchCreateNestedManyWithoutCompanyInput
    votes?: VoteCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestCreateNestedManyWithoutCompanyInput
    alerts?: AlertCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
    positions?: PositionUncheckedCreateNestedManyWithoutCompanyInput
    research?: ResearchUncheckedCreateNestedManyWithoutCompanyInput
    votes?: VoteUncheckedCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput
    alerts?: AlertUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    positions?: PositionUpdateManyWithoutCompanyNestedInput
    research?: ResearchUpdateManyWithoutCompanyNestedInput
    votes?: VoteUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
    positions?: PositionUncheckedUpdateManyWithoutCompanyNestedInput
    research?: ResearchUncheckedUpdateManyWithoutCompanyNestedInput
    votes?: VoteUncheckedUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateManyInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompanyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCreateInput = {
    id?: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutSitesInput
    rigs?: RigCreateNestedManyWithoutSiteInput
    energyContracts?: EnergyContractCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateInput = {
    id?: string
    companyId: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rigs?: RigUncheckedCreateNestedManyWithoutSiteInput
    energyContracts?: EnergyContractUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutSitesNestedInput
    rigs?: RigUpdateManyWithoutSiteNestedInput
    energyContracts?: EnergyContractUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rigs?: RigUncheckedUpdateManyWithoutSiteNestedInput
    energyContracts?: EnergyContractUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateManyInput = {
    id?: string
    companyId: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SiteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RigCreateInput = {
    id?: string
    type: string
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear?: number
    firmware?: string
    status?: string
    purchasePrice: number
    purchasedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    site: SiteCreateNestedOneWithoutRigsInput
  }

  export type RigUncheckedCreateInput = {
    id?: string
    siteId: string
    type: string
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear?: number
    firmware?: string
    status?: string
    purchasePrice: number
    purchasedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    gridX?: IntFieldUpdateOperationsInput | number
    gridY?: IntFieldUpdateOperationsInput | number
    hashrate?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    wear?: FloatFieldUpdateOperationsInput | number
    firmware?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    site?: SiteUpdateOneRequiredWithoutRigsNestedInput
  }

  export type RigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    gridX?: IntFieldUpdateOperationsInput | number
    gridY?: IntFieldUpdateOperationsInput | number
    hashrate?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    wear?: FloatFieldUpdateOperationsInput | number
    firmware?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RigCreateManyInput = {
    id?: string
    siteId: string
    type: string
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear?: number
    firmware?: string
    status?: string
    purchasePrice: number
    purchasedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    gridX?: IntFieldUpdateOperationsInput | number
    gridY?: IntFieldUpdateOperationsInput | number
    hashrate?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    wear?: FloatFieldUpdateOperationsInput | number
    firmware?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    gridX?: IntFieldUpdateOperationsInput | number
    gridY?: IntFieldUpdateOperationsInput | number
    hashrate?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    wear?: FloatFieldUpdateOperationsInput | number
    firmware?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnergyContractCreateInput = {
    id?: string
    provider: string
    pricePerKWh: number
    capacity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
    site: SiteCreateNestedOneWithoutEnergyContractsInput
  }

  export type EnergyContractUncheckedCreateInput = {
    id?: string
    siteId: string
    provider: string
    pricePerKWh: number
    capacity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
  }

  export type EnergyContractUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    pricePerKWh?: FloatFieldUpdateOperationsInput | number
    capacity?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    site?: SiteUpdateOneRequiredWithoutEnergyContractsNestedInput
  }

  export type EnergyContractUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    pricePerKWh?: FloatFieldUpdateOperationsInput | number
    capacity?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnergyContractCreateManyInput = {
    id?: string
    siteId: string
    provider: string
    pricePerKWh: number
    capacity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
  }

  export type EnergyContractUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    pricePerKWh?: FloatFieldUpdateOperationsInput | number
    capacity?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnergyContractUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    siteId?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    pricePerKWh?: FloatFieldUpdateOperationsInput | number
    capacity?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionCreateInput = {
    id?: string
    instrument: string
    side: string
    quantity: number
    entryPrice: number
    leverage?: number
    margin?: number | null
    liquidationPrice?: number | null
    status?: string
    pnl?: number
    openedAt?: Date | string
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutPositionsInput
  }

  export type PositionUncheckedCreateInput = {
    id?: string
    companyId: string
    instrument: string
    side: string
    quantity: number
    entryPrice: number
    leverage?: number
    margin?: number | null
    liquidationPrice?: number | null
    status?: string
    pnl?: number
    openedAt?: Date | string
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrument?: StringFieldUpdateOperationsInput | string
    side?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    leverage?: FloatFieldUpdateOperationsInput | number
    margin?: NullableFloatFieldUpdateOperationsInput | number | null
    liquidationPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    pnl?: FloatFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutPositionsNestedInput
  }

  export type PositionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    instrument?: StringFieldUpdateOperationsInput | string
    side?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    leverage?: FloatFieldUpdateOperationsInput | number
    margin?: NullableFloatFieldUpdateOperationsInput | number | null
    liquidationPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    pnl?: FloatFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionCreateManyInput = {
    id?: string
    companyId: string
    instrument: string
    side: string
    quantity: number
    entryPrice: number
    leverage?: number
    margin?: number | null
    liquidationPrice?: number | null
    status?: string
    pnl?: number
    openedAt?: Date | string
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrument?: StringFieldUpdateOperationsInput | string
    side?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    leverage?: FloatFieldUpdateOperationsInput | number
    margin?: NullableFloatFieldUpdateOperationsInput | number | null
    liquidationPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    pnl?: FloatFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    instrument?: StringFieldUpdateOperationsInput | string
    side?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    leverage?: FloatFieldUpdateOperationsInput | number
    margin?: NullableFloatFieldUpdateOperationsInput | number | null
    liquidationPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    pnl?: FloatFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearchCreateInput = {
    id?: string
    nodeId: string
    category: string
    level?: number
    progress?: number
    status?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutResearchInput
  }

  export type ResearchUncheckedCreateInput = {
    id?: string
    companyId: string
    nodeId: string
    category: string
    level?: number
    progress?: number
    status?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResearchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    progress?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutResearchNestedInput
  }

  export type ResearchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    progress?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearchCreateManyInput = {
    id?: string
    companyId: string
    nodeId: string
    category: string
    level?: number
    progress?: number
    status?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResearchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    progress?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    progress?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProposalCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    votesFor?: number
    votesAgainst?: number
    votesAbstain?: number
    deadline: Date | string
    outcome?: string | null
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    votes?: VoteCreateNestedManyWithoutProposalInput
  }

  export type ProposalUncheckedCreateInput = {
    id?: string
    type: string
    title: string
    description: string
    votesFor?: number
    votesAgainst?: number
    votesAbstain?: number
    deadline: Date | string
    outcome?: string | null
    createdAt?: Date | string
    resolvedAt?: Date | string | null
    votes?: VoteUncheckedCreateNestedManyWithoutProposalInput
  }

  export type ProposalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    votesFor?: IntFieldUpdateOperationsInput | number
    votesAgainst?: IntFieldUpdateOperationsInput | number
    votesAbstain?: IntFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votes?: VoteUpdateManyWithoutProposalNestedInput
  }

  export type ProposalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    votesFor?: IntFieldUpdateOperationsInput | number
    votesAgainst?: IntFieldUpdateOperationsInput | number
    votesAbstain?: IntFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    votes?: VoteUncheckedUpdateManyWithoutProposalNestedInput
  }

  export type ProposalCreateManyInput = {
    id?: string
    type: string
    title: string
    description: string
    votesFor?: number
    votesAgainst?: number
    votesAbstain?: number
    deadline: Date | string
    outcome?: string | null
    createdAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ProposalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    votesFor?: IntFieldUpdateOperationsInput | number
    votesAgainst?: IntFieldUpdateOperationsInput | number
    votesAbstain?: IntFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProposalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    votesFor?: IntFieldUpdateOperationsInput | number
    votesAgainst?: IntFieldUpdateOperationsInput | number
    votesAbstain?: IntFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VoteCreateInput = {
    id?: string
    choice: string
    weight?: number
    createdAt?: Date | string
    proposal: ProposalCreateNestedOneWithoutVotesInput
    company: CompanyCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateInput = {
    id?: string
    proposalId: string
    companyId: string
    choice: string
    weight?: number
    createdAt?: Date | string
  }

  export type VoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposal?: ProposalUpdateOneRequiredWithoutVotesNestedInput
    company?: CompanyUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateManyInput = {
    id?: string
    proposalId: string
    companyId: string
    choice: string
    weight?: number
    createdAt?: Date | string
  }

  export type VoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestCreateInput = {
    id?: string
    type: string
    category: string
    title: string
    description: string
    requirements: JsonNullValueInput | InputJsonValue
    rewardUsd?: number
    rewardBtc?: number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    companies?: CompanyQuestCreateNestedManyWithoutQuestInput
  }

  export type QuestUncheckedCreateInput = {
    id?: string
    type: string
    category: string
    title: string
    description: string
    requirements: JsonNullValueInput | InputJsonValue
    rewardUsd?: number
    rewardBtc?: number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
    companies?: CompanyQuestUncheckedCreateNestedManyWithoutQuestInput
  }

  export type QuestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: JsonNullValueInput | InputJsonValue
    rewardUsd?: FloatFieldUpdateOperationsInput | number
    rewardBtc?: FloatFieldUpdateOperationsInput | number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyQuestUpdateManyWithoutQuestNestedInput
  }

  export type QuestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: JsonNullValueInput | InputJsonValue
    rewardUsd?: FloatFieldUpdateOperationsInput | number
    rewardBtc?: FloatFieldUpdateOperationsInput | number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    companies?: CompanyQuestUncheckedUpdateManyWithoutQuestNestedInput
  }

  export type QuestCreateManyInput = {
    id?: string
    type: string
    category: string
    title: string
    description: string
    requirements: JsonNullValueInput | InputJsonValue
    rewardUsd?: number
    rewardBtc?: number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type QuestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: JsonNullValueInput | InputJsonValue
    rewardUsd?: FloatFieldUpdateOperationsInput | number
    rewardBtc?: FloatFieldUpdateOperationsInput | number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: JsonNullValueInput | InputJsonValue
    rewardUsd?: FloatFieldUpdateOperationsInput | number
    rewardBtc?: FloatFieldUpdateOperationsInput | number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyQuestCreateInput = {
    id?: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    company: CompanyCreateNestedOneWithoutQuestsInput
    quest: QuestCreateNestedOneWithoutCompaniesInput
  }

  export type CompanyQuestUncheckedCreateInput = {
    id?: string
    companyId: string
    questId: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type CompanyQuestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company?: CompanyUpdateOneRequiredWithoutQuestsNestedInput
    quest?: QuestUpdateOneRequiredWithoutCompaniesNestedInput
  }

  export type CompanyQuestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompanyQuestCreateManyInput = {
    id?: string
    companyId: string
    questId: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type CompanyQuestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompanyQuestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventCreateInput = {
    id?: string
    type: string
    severity: string
    title: string
    description: string
    region?: string | null
    affectedCompanies?: NullableJsonNullValueInput | InputJsonValue
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type EventUncheckedCreateInput = {
    id?: string
    type: string
    severity: string
    title: string
    description: string
    region?: string | null
    affectedCompanies?: NullableJsonNullValueInput | InputJsonValue
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type EventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    affectedCompanies?: NullableJsonNullValueInput | InputJsonValue
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    affectedCompanies?: NullableJsonNullValueInput | InputJsonValue
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventCreateManyInput = {
    id?: string
    type: string
    severity: string
    title: string
    description: string
    region?: string | null
    affectedCompanies?: NullableJsonNullValueInput | InputJsonValue
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type EventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    affectedCompanies?: NullableJsonNullValueInput | InputJsonValue
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type EventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    severity?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    region?: NullableStringFieldUpdateOperationsInput | string | null
    affectedCompanies?: NullableJsonNullValueInput | InputJsonValue
    payload?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertCreateInput = {
    id?: string
    type: string
    category: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutAlertsInput
  }

  export type AlertUncheckedCreateInput = {
    id?: string
    companyId: string
    type: string
    category: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
  }

  export type AlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutAlertsNestedInput
  }

  export type AlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateManyInput = {
    id?: string
    companyId: string
    type: string
    category: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
  }

  export type AlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TickSnapshotCreateInput = {
    id?: string
    tickNumber: number
    btcPrice: number
    difficulty: number
    networkHashrate: number
    regionalData: JsonNullValueInput | InputJsonValue
    events?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type TickSnapshotUncheckedCreateInput = {
    id?: string
    tickNumber: number
    btcPrice: number
    difficulty: number
    networkHashrate: number
    regionalData: JsonNullValueInput | InputJsonValue
    events?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type TickSnapshotUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickNumber?: IntFieldUpdateOperationsInput | number
    btcPrice?: FloatFieldUpdateOperationsInput | number
    difficulty?: FloatFieldUpdateOperationsInput | number
    networkHashrate?: FloatFieldUpdateOperationsInput | number
    regionalData?: JsonNullValueInput | InputJsonValue
    events?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TickSnapshotUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickNumber?: IntFieldUpdateOperationsInput | number
    btcPrice?: FloatFieldUpdateOperationsInput | number
    difficulty?: FloatFieldUpdateOperationsInput | number
    networkHashrate?: FloatFieldUpdateOperationsInput | number
    regionalData?: JsonNullValueInput | InputJsonValue
    events?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TickSnapshotCreateManyInput = {
    id?: string
    tickNumber: number
    btcPrice: number
    difficulty: number
    networkHashrate: number
    regionalData: JsonNullValueInput | InputJsonValue
    events?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type TickSnapshotUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickNumber?: IntFieldUpdateOperationsInput | number
    btcPrice?: FloatFieldUpdateOperationsInput | number
    difficulty?: FloatFieldUpdateOperationsInput | number
    networkHashrate?: FloatFieldUpdateOperationsInput | number
    regionalData?: JsonNullValueInput | InputJsonValue
    events?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TickSnapshotUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tickNumber?: IntFieldUpdateOperationsInput | number
    btcPrice?: FloatFieldUpdateOperationsInput | number
    difficulty?: FloatFieldUpdateOperationsInput | number
    networkHashrate?: FloatFieldUpdateOperationsInput | number
    regionalData?: JsonNullValueInput | InputJsonValue
    events?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CompanyNullableRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    username?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLogin?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    refreshToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type SiteListRelationFilter = {
    every?: SiteWhereInput
    some?: SiteWhereInput
    none?: SiteWhereInput
  }

  export type PositionListRelationFilter = {
    every?: PositionWhereInput
    some?: PositionWhereInput
    none?: PositionWhereInput
  }

  export type ResearchListRelationFilter = {
    every?: ResearchWhereInput
    some?: ResearchWhereInput
    none?: ResearchWhereInput
  }

  export type VoteListRelationFilter = {
    every?: VoteWhereInput
    some?: VoteWhereInput
    none?: VoteWhereInput
  }

  export type CompanyQuestListRelationFilter = {
    every?: CompanyQuestWhereInput
    some?: CompanyQuestWhereInput
    none?: CompanyQuestWhereInput
  }

  export type AlertListRelationFilter = {
    every?: AlertWhereInput
    some?: AlertWhereInput
    none?: AlertWhereInput
  }

  export type SiteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PositionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResearchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyQuestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompanyCountOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    region?: SortOrder
    usdBalance?: SortOrder
    btcBalance?: SortOrder
    repMiners?: SortOrder
    repTraders?: SortOrder
    repRegulators?: SortOrder
    repAnarchists?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyAvgOrderByAggregateInput = {
    usdBalance?: SortOrder
    btcBalance?: SortOrder
    repMiners?: SortOrder
    repTraders?: SortOrder
    repRegulators?: SortOrder
    repAnarchists?: SortOrder
  }

  export type CompanyMaxOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    region?: SortOrder
    usdBalance?: SortOrder
    btcBalance?: SortOrder
    repMiners?: SortOrder
    repTraders?: SortOrder
    repRegulators?: SortOrder
    repAnarchists?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyMinOrderByAggregateInput = {
    id?: SortOrder
    ownerId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    region?: SortOrder
    usdBalance?: SortOrder
    btcBalance?: SortOrder
    repMiners?: SortOrder
    repTraders?: SortOrder
    repRegulators?: SortOrder
    repAnarchists?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanySumOrderByAggregateInput = {
    usdBalance?: SortOrder
    btcBalance?: SortOrder
    repMiners?: SortOrder
    repTraders?: SortOrder
    repRegulators?: SortOrder
    repAnarchists?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput
    isNot?: CompanyWhereInput
  }

  export type RigListRelationFilter = {
    every?: RigWhereInput
    some?: RigWhereInput
    none?: RigWhereInput
  }

  export type EnergyContractListRelationFilter = {
    every?: EnergyContractWhereInput
    some?: EnergyContractWhereInput
    none?: EnergyContractWhereInput
  }

  export type RigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EnergyContractOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SiteCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    region?: SortOrder
    gridTier?: SortOrder
    coolingType?: SortOrder
    uptime?: SortOrder
    totalHashrate?: SortOrder
    powerUsage?: SortOrder
    gridWidth?: SortOrder
    gridHeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteAvgOrderByAggregateInput = {
    gridTier?: SortOrder
    uptime?: SortOrder
    totalHashrate?: SortOrder
    powerUsage?: SortOrder
    gridWidth?: SortOrder
    gridHeight?: SortOrder
  }

  export type SiteMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    region?: SortOrder
    gridTier?: SortOrder
    coolingType?: SortOrder
    uptime?: SortOrder
    totalHashrate?: SortOrder
    powerUsage?: SortOrder
    gridWidth?: SortOrder
    gridHeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    name?: SortOrder
    region?: SortOrder
    gridTier?: SortOrder
    coolingType?: SortOrder
    uptime?: SortOrder
    totalHashrate?: SortOrder
    powerUsage?: SortOrder
    gridWidth?: SortOrder
    gridHeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SiteSumOrderByAggregateInput = {
    gridTier?: SortOrder
    uptime?: SortOrder
    totalHashrate?: SortOrder
    powerUsage?: SortOrder
    gridWidth?: SortOrder
    gridHeight?: SortOrder
  }

  export type SiteRelationFilter = {
    is?: SiteWhereInput
    isNot?: SiteWhereInput
  }

  export type RigSiteIdGridXGridYCompoundUniqueInput = {
    siteId: string
    gridX: number
    gridY: number
  }

  export type RigCountOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    type?: SortOrder
    gridX?: SortOrder
    gridY?: SortOrder
    hashrate?: SortOrder
    efficiency?: SortOrder
    wear?: SortOrder
    firmware?: SortOrder
    status?: SortOrder
    purchasePrice?: SortOrder
    purchasedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RigAvgOrderByAggregateInput = {
    gridX?: SortOrder
    gridY?: SortOrder
    hashrate?: SortOrder
    efficiency?: SortOrder
    wear?: SortOrder
    purchasePrice?: SortOrder
  }

  export type RigMaxOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    type?: SortOrder
    gridX?: SortOrder
    gridY?: SortOrder
    hashrate?: SortOrder
    efficiency?: SortOrder
    wear?: SortOrder
    firmware?: SortOrder
    status?: SortOrder
    purchasePrice?: SortOrder
    purchasedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RigMinOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    type?: SortOrder
    gridX?: SortOrder
    gridY?: SortOrder
    hashrate?: SortOrder
    efficiency?: SortOrder
    wear?: SortOrder
    firmware?: SortOrder
    status?: SortOrder
    purchasePrice?: SortOrder
    purchasedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RigSumOrderByAggregateInput = {
    gridX?: SortOrder
    gridY?: SortOrder
    hashrate?: SortOrder
    efficiency?: SortOrder
    wear?: SortOrder
    purchasePrice?: SortOrder
  }

  export type EnergyContractCountOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    provider?: SortOrder
    pricePerKWh?: SortOrder
    capacity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EnergyContractAvgOrderByAggregateInput = {
    pricePerKWh?: SortOrder
    capacity?: SortOrder
  }

  export type EnergyContractMaxOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    provider?: SortOrder
    pricePerKWh?: SortOrder
    capacity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EnergyContractMinOrderByAggregateInput = {
    id?: SortOrder
    siteId?: SortOrder
    provider?: SortOrder
    pricePerKWh?: SortOrder
    capacity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type EnergyContractSumOrderByAggregateInput = {
    pricePerKWh?: SortOrder
    capacity?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PositionCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    instrument?: SortOrder
    side?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    leverage?: SortOrder
    margin?: SortOrder
    liquidationPrice?: SortOrder
    status?: SortOrder
    pnl?: SortOrder
    openedAt?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionAvgOrderByAggregateInput = {
    quantity?: SortOrder
    entryPrice?: SortOrder
    leverage?: SortOrder
    margin?: SortOrder
    liquidationPrice?: SortOrder
    pnl?: SortOrder
  }

  export type PositionMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    instrument?: SortOrder
    side?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    leverage?: SortOrder
    margin?: SortOrder
    liquidationPrice?: SortOrder
    status?: SortOrder
    pnl?: SortOrder
    openedAt?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    instrument?: SortOrder
    side?: SortOrder
    quantity?: SortOrder
    entryPrice?: SortOrder
    leverage?: SortOrder
    margin?: SortOrder
    liquidationPrice?: SortOrder
    status?: SortOrder
    pnl?: SortOrder
    openedAt?: SortOrder
    closedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PositionSumOrderByAggregateInput = {
    quantity?: SortOrder
    entryPrice?: SortOrder
    leverage?: SortOrder
    margin?: SortOrder
    liquidationPrice?: SortOrder
    pnl?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ResearchCompanyIdNodeIdCompoundUniqueInput = {
    companyId: string
    nodeId: string
  }

  export type ResearchCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    nodeId?: SortOrder
    category?: SortOrder
    level?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResearchAvgOrderByAggregateInput = {
    level?: SortOrder
    progress?: SortOrder
  }

  export type ResearchMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    nodeId?: SortOrder
    category?: SortOrder
    level?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResearchMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    nodeId?: SortOrder
    category?: SortOrder
    level?: SortOrder
    progress?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ResearchSumOrderByAggregateInput = {
    level?: SortOrder
    progress?: SortOrder
  }

  export type ProposalCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    votesFor?: SortOrder
    votesAgainst?: SortOrder
    votesAbstain?: SortOrder
    deadline?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type ProposalAvgOrderByAggregateInput = {
    votesFor?: SortOrder
    votesAgainst?: SortOrder
    votesAbstain?: SortOrder
  }

  export type ProposalMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    votesFor?: SortOrder
    votesAgainst?: SortOrder
    votesAbstain?: SortOrder
    deadline?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type ProposalMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    description?: SortOrder
    votesFor?: SortOrder
    votesAgainst?: SortOrder
    votesAbstain?: SortOrder
    deadline?: SortOrder
    outcome?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type ProposalSumOrderByAggregateInput = {
    votesFor?: SortOrder
    votesAgainst?: SortOrder
    votesAbstain?: SortOrder
  }

  export type ProposalRelationFilter = {
    is?: ProposalWhereInput
    isNot?: ProposalWhereInput
  }

  export type VoteProposalIdCompanyIdCompoundUniqueInput = {
    proposalId: string
    companyId: string
  }

  export type VoteCountOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    companyId?: SortOrder
    choice?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type VoteAvgOrderByAggregateInput = {
    weight?: SortOrder
  }

  export type VoteMaxOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    companyId?: SortOrder
    choice?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type VoteMinOrderByAggregateInput = {
    id?: SortOrder
    proposalId?: SortOrder
    companyId?: SortOrder
    choice?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
  }

  export type VoteSumOrderByAggregateInput = {
    weight?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type QuestCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    requirements?: SortOrder
    rewardUsd?: SortOrder
    rewardBtc?: SortOrder
    rewardRep?: SortOrder
    rewardResearch?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestAvgOrderByAggregateInput = {
    rewardUsd?: SortOrder
    rewardBtc?: SortOrder
    rewardResearch?: SortOrder
  }

  export type QuestMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    rewardUsd?: SortOrder
    rewardBtc?: SortOrder
    rewardResearch?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    category?: SortOrder
    title?: SortOrder
    description?: SortOrder
    rewardUsd?: SortOrder
    rewardBtc?: SortOrder
    rewardResearch?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
  }

  export type QuestSumOrderByAggregateInput = {
    rewardUsd?: SortOrder
    rewardBtc?: SortOrder
    rewardResearch?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type QuestRelationFilter = {
    is?: QuestWhereInput
    isNot?: QuestWhereInput
  }

  export type CompanyQuestCompanyIdQuestIdCompoundUniqueInput = {
    companyId: string
    questId: string
  }

  export type CompanyQuestCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    questId?: SortOrder
    status?: SortOrder
    progress?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type CompanyQuestMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    questId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type CompanyQuestMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    questId?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    region?: SortOrder
    affectedCompanies?: SortOrder
    payload?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    severity?: SortOrder
    title?: SortOrder
    description?: SortOrder
    region?: SortOrder
    createdAt?: SortOrder
    resolvedAt?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AlertCountOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    message?: SortOrder
    data?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
  }

  export type AlertMaxOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
  }

  export type AlertMinOrderByAggregateInput = {
    id?: SortOrder
    companyId?: SortOrder
    type?: SortOrder
    category?: SortOrder
    message?: SortOrder
    read?: SortOrder
    createdAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type TickSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    tickNumber?: SortOrder
    btcPrice?: SortOrder
    difficulty?: SortOrder
    networkHashrate?: SortOrder
    regionalData?: SortOrder
    events?: SortOrder
    timestamp?: SortOrder
  }

  export type TickSnapshotAvgOrderByAggregateInput = {
    tickNumber?: SortOrder
    btcPrice?: SortOrder
    difficulty?: SortOrder
    networkHashrate?: SortOrder
  }

  export type TickSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    tickNumber?: SortOrder
    btcPrice?: SortOrder
    difficulty?: SortOrder
    networkHashrate?: SortOrder
    timestamp?: SortOrder
  }

  export type TickSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    tickNumber?: SortOrder
    btcPrice?: SortOrder
    difficulty?: SortOrder
    networkHashrate?: SortOrder
    timestamp?: SortOrder
  }

  export type TickSnapshotSumOrderByAggregateInput = {
    tickNumber?: SortOrder
    btcPrice?: SortOrder
    difficulty?: SortOrder
    networkHashrate?: SortOrder
  }

  export type CompanyCreateNestedOneWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput
    connect?: CompanyWhereUniqueInput
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type CompanyUncheckedCreateNestedOneWithoutOwnerInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput
    connect?: CompanyWhereUniqueInput
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CompanyUpdateOneWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput
    upsert?: CompanyUpsertWithoutOwnerInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutOwnerInput, CompanyUpdateWithoutOwnerInput>, CompanyUncheckedUpdateWithoutOwnerInput>
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type CompanyUncheckedUpdateOneWithoutOwnerNestedInput = {
    create?: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutOwnerInput
    upsert?: CompanyUpsertWithoutOwnerInput
    disconnect?: CompanyWhereInput | boolean
    delete?: CompanyWhereInput | boolean
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutOwnerInput, CompanyUpdateWithoutOwnerInput>, CompanyUncheckedUpdateWithoutOwnerInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutCompanyInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    connect?: UserWhereUniqueInput
  }

  export type SiteCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type PositionCreateNestedManyWithoutCompanyInput = {
    create?: XOR<PositionCreateWithoutCompanyInput, PositionUncheckedCreateWithoutCompanyInput> | PositionCreateWithoutCompanyInput[] | PositionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutCompanyInput | PositionCreateOrConnectWithoutCompanyInput[]
    createMany?: PositionCreateManyCompanyInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type ResearchCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ResearchCreateWithoutCompanyInput, ResearchUncheckedCreateWithoutCompanyInput> | ResearchCreateWithoutCompanyInput[] | ResearchUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutCompanyInput | ResearchCreateOrConnectWithoutCompanyInput[]
    createMany?: ResearchCreateManyCompanyInputEnvelope
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
  }

  export type VoteCreateNestedManyWithoutCompanyInput = {
    create?: XOR<VoteCreateWithoutCompanyInput, VoteUncheckedCreateWithoutCompanyInput> | VoteCreateWithoutCompanyInput[] | VoteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCompanyInput | VoteCreateOrConnectWithoutCompanyInput[]
    createMany?: VoteCreateManyCompanyInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type CompanyQuestCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyQuestCreateWithoutCompanyInput, CompanyQuestUncheckedCreateWithoutCompanyInput> | CompanyQuestCreateWithoutCompanyInput[] | CompanyQuestUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutCompanyInput | CompanyQuestCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyQuestCreateManyCompanyInputEnvelope
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
  }

  export type AlertCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AlertCreateWithoutCompanyInput, AlertUncheckedCreateWithoutCompanyInput> | AlertCreateWithoutCompanyInput[] | AlertUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutCompanyInput | AlertCreateOrConnectWithoutCompanyInput[]
    createMany?: AlertCreateManyCompanyInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type SiteUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
  }

  export type PositionUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<PositionCreateWithoutCompanyInput, PositionUncheckedCreateWithoutCompanyInput> | PositionCreateWithoutCompanyInput[] | PositionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutCompanyInput | PositionCreateOrConnectWithoutCompanyInput[]
    createMany?: PositionCreateManyCompanyInputEnvelope
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
  }

  export type ResearchUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<ResearchCreateWithoutCompanyInput, ResearchUncheckedCreateWithoutCompanyInput> | ResearchCreateWithoutCompanyInput[] | ResearchUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutCompanyInput | ResearchCreateOrConnectWithoutCompanyInput[]
    createMany?: ResearchCreateManyCompanyInputEnvelope
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<VoteCreateWithoutCompanyInput, VoteUncheckedCreateWithoutCompanyInput> | VoteCreateWithoutCompanyInput[] | VoteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCompanyInput | VoteCreateOrConnectWithoutCompanyInput[]
    createMany?: VoteCreateManyCompanyInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<CompanyQuestCreateWithoutCompanyInput, CompanyQuestUncheckedCreateWithoutCompanyInput> | CompanyQuestCreateWithoutCompanyInput[] | CompanyQuestUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutCompanyInput | CompanyQuestCreateOrConnectWithoutCompanyInput[]
    createMany?: CompanyQuestCreateManyCompanyInputEnvelope
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutCompanyInput = {
    create?: XOR<AlertCreateWithoutCompanyInput, AlertUncheckedCreateWithoutCompanyInput> | AlertCreateWithoutCompanyInput[] | AlertUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutCompanyInput | AlertCreateOrConnectWithoutCompanyInput[]
    createMany?: AlertCreateManyCompanyInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCompanyNestedInput = {
    create?: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompanyInput
    upsert?: UserUpsertWithoutCompanyInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompanyInput, UserUpdateWithoutCompanyInput>, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type SiteUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutCompanyInput | SiteUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutCompanyInput | SiteUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutCompanyInput | SiteUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type PositionUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<PositionCreateWithoutCompanyInput, PositionUncheckedCreateWithoutCompanyInput> | PositionCreateWithoutCompanyInput[] | PositionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutCompanyInput | PositionCreateOrConnectWithoutCompanyInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutCompanyInput | PositionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: PositionCreateManyCompanyInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutCompanyInput | PositionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutCompanyInput | PositionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type ResearchUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ResearchCreateWithoutCompanyInput, ResearchUncheckedCreateWithoutCompanyInput> | ResearchCreateWithoutCompanyInput[] | ResearchUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutCompanyInput | ResearchCreateOrConnectWithoutCompanyInput[]
    upsert?: ResearchUpsertWithWhereUniqueWithoutCompanyInput | ResearchUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ResearchCreateManyCompanyInputEnvelope
    set?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    disconnect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    delete?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    update?: ResearchUpdateWithWhereUniqueWithoutCompanyInput | ResearchUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ResearchUpdateManyWithWhereWithoutCompanyInput | ResearchUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
  }

  export type VoteUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<VoteCreateWithoutCompanyInput, VoteUncheckedCreateWithoutCompanyInput> | VoteCreateWithoutCompanyInput[] | VoteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCompanyInput | VoteCreateOrConnectWithoutCompanyInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutCompanyInput | VoteUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: VoteCreateManyCompanyInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutCompanyInput | VoteUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutCompanyInput | VoteUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type CompanyQuestUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyQuestCreateWithoutCompanyInput, CompanyQuestUncheckedCreateWithoutCompanyInput> | CompanyQuestCreateWithoutCompanyInput[] | CompanyQuestUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutCompanyInput | CompanyQuestCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyQuestUpsertWithWhereUniqueWithoutCompanyInput | CompanyQuestUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyQuestCreateManyCompanyInputEnvelope
    set?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    disconnect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    delete?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    update?: CompanyQuestUpdateWithWhereUniqueWithoutCompanyInput | CompanyQuestUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyQuestUpdateManyWithWhereWithoutCompanyInput | CompanyQuestUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyQuestScalarWhereInput | CompanyQuestScalarWhereInput[]
  }

  export type AlertUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AlertCreateWithoutCompanyInput, AlertUncheckedCreateWithoutCompanyInput> | AlertCreateWithoutCompanyInput[] | AlertUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutCompanyInput | AlertCreateOrConnectWithoutCompanyInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutCompanyInput | AlertUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AlertCreateManyCompanyInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutCompanyInput | AlertUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutCompanyInput | AlertUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type SiteUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput> | SiteCreateWithoutCompanyInput[] | SiteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: SiteCreateOrConnectWithoutCompanyInput | SiteCreateOrConnectWithoutCompanyInput[]
    upsert?: SiteUpsertWithWhereUniqueWithoutCompanyInput | SiteUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: SiteCreateManyCompanyInputEnvelope
    set?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    disconnect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    delete?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    connect?: SiteWhereUniqueInput | SiteWhereUniqueInput[]
    update?: SiteUpdateWithWhereUniqueWithoutCompanyInput | SiteUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: SiteUpdateManyWithWhereWithoutCompanyInput | SiteUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: SiteScalarWhereInput | SiteScalarWhereInput[]
  }

  export type PositionUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<PositionCreateWithoutCompanyInput, PositionUncheckedCreateWithoutCompanyInput> | PositionCreateWithoutCompanyInput[] | PositionUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: PositionCreateOrConnectWithoutCompanyInput | PositionCreateOrConnectWithoutCompanyInput[]
    upsert?: PositionUpsertWithWhereUniqueWithoutCompanyInput | PositionUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: PositionCreateManyCompanyInputEnvelope
    set?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    disconnect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    delete?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    connect?: PositionWhereUniqueInput | PositionWhereUniqueInput[]
    update?: PositionUpdateWithWhereUniqueWithoutCompanyInput | PositionUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: PositionUpdateManyWithWhereWithoutCompanyInput | PositionUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: PositionScalarWhereInput | PositionScalarWhereInput[]
  }

  export type ResearchUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<ResearchCreateWithoutCompanyInput, ResearchUncheckedCreateWithoutCompanyInput> | ResearchCreateWithoutCompanyInput[] | ResearchUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: ResearchCreateOrConnectWithoutCompanyInput | ResearchCreateOrConnectWithoutCompanyInput[]
    upsert?: ResearchUpsertWithWhereUniqueWithoutCompanyInput | ResearchUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: ResearchCreateManyCompanyInputEnvelope
    set?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    disconnect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    delete?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    connect?: ResearchWhereUniqueInput | ResearchWhereUniqueInput[]
    update?: ResearchUpdateWithWhereUniqueWithoutCompanyInput | ResearchUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: ResearchUpdateManyWithWhereWithoutCompanyInput | ResearchUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<VoteCreateWithoutCompanyInput, VoteUncheckedCreateWithoutCompanyInput> | VoteCreateWithoutCompanyInput[] | VoteUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutCompanyInput | VoteCreateOrConnectWithoutCompanyInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutCompanyInput | VoteUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: VoteCreateManyCompanyInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutCompanyInput | VoteUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutCompanyInput | VoteUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<CompanyQuestCreateWithoutCompanyInput, CompanyQuestUncheckedCreateWithoutCompanyInput> | CompanyQuestCreateWithoutCompanyInput[] | CompanyQuestUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutCompanyInput | CompanyQuestCreateOrConnectWithoutCompanyInput[]
    upsert?: CompanyQuestUpsertWithWhereUniqueWithoutCompanyInput | CompanyQuestUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: CompanyQuestCreateManyCompanyInputEnvelope
    set?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    disconnect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    delete?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    update?: CompanyQuestUpdateWithWhereUniqueWithoutCompanyInput | CompanyQuestUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: CompanyQuestUpdateManyWithWhereWithoutCompanyInput | CompanyQuestUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: CompanyQuestScalarWhereInput | CompanyQuestScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutCompanyNestedInput = {
    create?: XOR<AlertCreateWithoutCompanyInput, AlertUncheckedCreateWithoutCompanyInput> | AlertCreateWithoutCompanyInput[] | AlertUncheckedCreateWithoutCompanyInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutCompanyInput | AlertCreateOrConnectWithoutCompanyInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutCompanyInput | AlertUpsertWithWhereUniqueWithoutCompanyInput[]
    createMany?: AlertCreateManyCompanyInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutCompanyInput | AlertUpdateWithWhereUniqueWithoutCompanyInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutCompanyInput | AlertUpdateManyWithWhereWithoutCompanyInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutSitesInput = {
    create?: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSitesInput
    connect?: CompanyWhereUniqueInput
  }

  export type RigCreateNestedManyWithoutSiteInput = {
    create?: XOR<RigCreateWithoutSiteInput, RigUncheckedCreateWithoutSiteInput> | RigCreateWithoutSiteInput[] | RigUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: RigCreateOrConnectWithoutSiteInput | RigCreateOrConnectWithoutSiteInput[]
    createMany?: RigCreateManySiteInputEnvelope
    connect?: RigWhereUniqueInput | RigWhereUniqueInput[]
  }

  export type EnergyContractCreateNestedManyWithoutSiteInput = {
    create?: XOR<EnergyContractCreateWithoutSiteInput, EnergyContractUncheckedCreateWithoutSiteInput> | EnergyContractCreateWithoutSiteInput[] | EnergyContractUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EnergyContractCreateOrConnectWithoutSiteInput | EnergyContractCreateOrConnectWithoutSiteInput[]
    createMany?: EnergyContractCreateManySiteInputEnvelope
    connect?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
  }

  export type RigUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<RigCreateWithoutSiteInput, RigUncheckedCreateWithoutSiteInput> | RigCreateWithoutSiteInput[] | RigUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: RigCreateOrConnectWithoutSiteInput | RigCreateOrConnectWithoutSiteInput[]
    createMany?: RigCreateManySiteInputEnvelope
    connect?: RigWhereUniqueInput | RigWhereUniqueInput[]
  }

  export type EnergyContractUncheckedCreateNestedManyWithoutSiteInput = {
    create?: XOR<EnergyContractCreateWithoutSiteInput, EnergyContractUncheckedCreateWithoutSiteInput> | EnergyContractCreateWithoutSiteInput[] | EnergyContractUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EnergyContractCreateOrConnectWithoutSiteInput | EnergyContractCreateOrConnectWithoutSiteInput[]
    createMany?: EnergyContractCreateManySiteInputEnvelope
    connect?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
  }

  export type CompanyUpdateOneRequiredWithoutSitesNestedInput = {
    create?: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutSitesInput
    upsert?: CompanyUpsertWithoutSitesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutSitesInput, CompanyUpdateWithoutSitesInput>, CompanyUncheckedUpdateWithoutSitesInput>
  }

  export type RigUpdateManyWithoutSiteNestedInput = {
    create?: XOR<RigCreateWithoutSiteInput, RigUncheckedCreateWithoutSiteInput> | RigCreateWithoutSiteInput[] | RigUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: RigCreateOrConnectWithoutSiteInput | RigCreateOrConnectWithoutSiteInput[]
    upsert?: RigUpsertWithWhereUniqueWithoutSiteInput | RigUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: RigCreateManySiteInputEnvelope
    set?: RigWhereUniqueInput | RigWhereUniqueInput[]
    disconnect?: RigWhereUniqueInput | RigWhereUniqueInput[]
    delete?: RigWhereUniqueInput | RigWhereUniqueInput[]
    connect?: RigWhereUniqueInput | RigWhereUniqueInput[]
    update?: RigUpdateWithWhereUniqueWithoutSiteInput | RigUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: RigUpdateManyWithWhereWithoutSiteInput | RigUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: RigScalarWhereInput | RigScalarWhereInput[]
  }

  export type EnergyContractUpdateManyWithoutSiteNestedInput = {
    create?: XOR<EnergyContractCreateWithoutSiteInput, EnergyContractUncheckedCreateWithoutSiteInput> | EnergyContractCreateWithoutSiteInput[] | EnergyContractUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EnergyContractCreateOrConnectWithoutSiteInput | EnergyContractCreateOrConnectWithoutSiteInput[]
    upsert?: EnergyContractUpsertWithWhereUniqueWithoutSiteInput | EnergyContractUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: EnergyContractCreateManySiteInputEnvelope
    set?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    disconnect?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    delete?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    connect?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    update?: EnergyContractUpdateWithWhereUniqueWithoutSiteInput | EnergyContractUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: EnergyContractUpdateManyWithWhereWithoutSiteInput | EnergyContractUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: EnergyContractScalarWhereInput | EnergyContractScalarWhereInput[]
  }

  export type RigUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<RigCreateWithoutSiteInput, RigUncheckedCreateWithoutSiteInput> | RigCreateWithoutSiteInput[] | RigUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: RigCreateOrConnectWithoutSiteInput | RigCreateOrConnectWithoutSiteInput[]
    upsert?: RigUpsertWithWhereUniqueWithoutSiteInput | RigUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: RigCreateManySiteInputEnvelope
    set?: RigWhereUniqueInput | RigWhereUniqueInput[]
    disconnect?: RigWhereUniqueInput | RigWhereUniqueInput[]
    delete?: RigWhereUniqueInput | RigWhereUniqueInput[]
    connect?: RigWhereUniqueInput | RigWhereUniqueInput[]
    update?: RigUpdateWithWhereUniqueWithoutSiteInput | RigUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: RigUpdateManyWithWhereWithoutSiteInput | RigUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: RigScalarWhereInput | RigScalarWhereInput[]
  }

  export type EnergyContractUncheckedUpdateManyWithoutSiteNestedInput = {
    create?: XOR<EnergyContractCreateWithoutSiteInput, EnergyContractUncheckedCreateWithoutSiteInput> | EnergyContractCreateWithoutSiteInput[] | EnergyContractUncheckedCreateWithoutSiteInput[]
    connectOrCreate?: EnergyContractCreateOrConnectWithoutSiteInput | EnergyContractCreateOrConnectWithoutSiteInput[]
    upsert?: EnergyContractUpsertWithWhereUniqueWithoutSiteInput | EnergyContractUpsertWithWhereUniqueWithoutSiteInput[]
    createMany?: EnergyContractCreateManySiteInputEnvelope
    set?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    disconnect?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    delete?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    connect?: EnergyContractWhereUniqueInput | EnergyContractWhereUniqueInput[]
    update?: EnergyContractUpdateWithWhereUniqueWithoutSiteInput | EnergyContractUpdateWithWhereUniqueWithoutSiteInput[]
    updateMany?: EnergyContractUpdateManyWithWhereWithoutSiteInput | EnergyContractUpdateManyWithWhereWithoutSiteInput[]
    deleteMany?: EnergyContractScalarWhereInput | EnergyContractScalarWhereInput[]
  }

  export type SiteCreateNestedOneWithoutRigsInput = {
    create?: XOR<SiteCreateWithoutRigsInput, SiteUncheckedCreateWithoutRigsInput>
    connectOrCreate?: SiteCreateOrConnectWithoutRigsInput
    connect?: SiteWhereUniqueInput
  }

  export type SiteUpdateOneRequiredWithoutRigsNestedInput = {
    create?: XOR<SiteCreateWithoutRigsInput, SiteUncheckedCreateWithoutRigsInput>
    connectOrCreate?: SiteCreateOrConnectWithoutRigsInput
    upsert?: SiteUpsertWithoutRigsInput
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutRigsInput, SiteUpdateWithoutRigsInput>, SiteUncheckedUpdateWithoutRigsInput>
  }

  export type SiteCreateNestedOneWithoutEnergyContractsInput = {
    create?: XOR<SiteCreateWithoutEnergyContractsInput, SiteUncheckedCreateWithoutEnergyContractsInput>
    connectOrCreate?: SiteCreateOrConnectWithoutEnergyContractsInput
    connect?: SiteWhereUniqueInput
  }

  export type SiteUpdateOneRequiredWithoutEnergyContractsNestedInput = {
    create?: XOR<SiteCreateWithoutEnergyContractsInput, SiteUncheckedCreateWithoutEnergyContractsInput>
    connectOrCreate?: SiteCreateOrConnectWithoutEnergyContractsInput
    upsert?: SiteUpsertWithoutEnergyContractsInput
    connect?: SiteWhereUniqueInput
    update?: XOR<XOR<SiteUpdateToOneWithWhereWithoutEnergyContractsInput, SiteUpdateWithoutEnergyContractsInput>, SiteUncheckedUpdateWithoutEnergyContractsInput>
  }

  export type CompanyCreateNestedOneWithoutPositionsInput = {
    create?: XOR<CompanyCreateWithoutPositionsInput, CompanyUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPositionsInput
    connect?: CompanyWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CompanyUpdateOneRequiredWithoutPositionsNestedInput = {
    create?: XOR<CompanyCreateWithoutPositionsInput, CompanyUncheckedCreateWithoutPositionsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutPositionsInput
    upsert?: CompanyUpsertWithoutPositionsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutPositionsInput, CompanyUpdateWithoutPositionsInput>, CompanyUncheckedUpdateWithoutPositionsInput>
  }

  export type CompanyCreateNestedOneWithoutResearchInput = {
    create?: XOR<CompanyCreateWithoutResearchInput, CompanyUncheckedCreateWithoutResearchInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutResearchInput
    connect?: CompanyWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutResearchNestedInput = {
    create?: XOR<CompanyCreateWithoutResearchInput, CompanyUncheckedCreateWithoutResearchInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutResearchInput
    upsert?: CompanyUpsertWithoutResearchInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutResearchInput, CompanyUpdateWithoutResearchInput>, CompanyUncheckedUpdateWithoutResearchInput>
  }

  export type VoteCreateNestedManyWithoutProposalInput = {
    create?: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput> | VoteCreateWithoutProposalInput[] | VoteUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutProposalInput | VoteCreateOrConnectWithoutProposalInput[]
    createMany?: VoteCreateManyProposalInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type VoteUncheckedCreateNestedManyWithoutProposalInput = {
    create?: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput> | VoteCreateWithoutProposalInput[] | VoteUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutProposalInput | VoteCreateOrConnectWithoutProposalInput[]
    createMany?: VoteCreateManyProposalInputEnvelope
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
  }

  export type VoteUpdateManyWithoutProposalNestedInput = {
    create?: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput> | VoteCreateWithoutProposalInput[] | VoteUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutProposalInput | VoteCreateOrConnectWithoutProposalInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutProposalInput | VoteUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: VoteCreateManyProposalInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutProposalInput | VoteUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutProposalInput | VoteUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type VoteUncheckedUpdateManyWithoutProposalNestedInput = {
    create?: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput> | VoteCreateWithoutProposalInput[] | VoteUncheckedCreateWithoutProposalInput[]
    connectOrCreate?: VoteCreateOrConnectWithoutProposalInput | VoteCreateOrConnectWithoutProposalInput[]
    upsert?: VoteUpsertWithWhereUniqueWithoutProposalInput | VoteUpsertWithWhereUniqueWithoutProposalInput[]
    createMany?: VoteCreateManyProposalInputEnvelope
    set?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    disconnect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    delete?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    connect?: VoteWhereUniqueInput | VoteWhereUniqueInput[]
    update?: VoteUpdateWithWhereUniqueWithoutProposalInput | VoteUpdateWithWhereUniqueWithoutProposalInput[]
    updateMany?: VoteUpdateManyWithWhereWithoutProposalInput | VoteUpdateManyWithWhereWithoutProposalInput[]
    deleteMany?: VoteScalarWhereInput | VoteScalarWhereInput[]
  }

  export type ProposalCreateNestedOneWithoutVotesInput = {
    create?: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutVotesInput
    connect?: ProposalWhereUniqueInput
  }

  export type CompanyCreateNestedOneWithoutVotesInput = {
    create?: XOR<CompanyCreateWithoutVotesInput, CompanyUncheckedCreateWithoutVotesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutVotesInput
    connect?: CompanyWhereUniqueInput
  }

  export type ProposalUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
    connectOrCreate?: ProposalCreateOrConnectWithoutVotesInput
    upsert?: ProposalUpsertWithoutVotesInput
    connect?: ProposalWhereUniqueInput
    update?: XOR<XOR<ProposalUpdateToOneWithWhereWithoutVotesInput, ProposalUpdateWithoutVotesInput>, ProposalUncheckedUpdateWithoutVotesInput>
  }

  export type CompanyUpdateOneRequiredWithoutVotesNestedInput = {
    create?: XOR<CompanyCreateWithoutVotesInput, CompanyUncheckedCreateWithoutVotesInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutVotesInput
    upsert?: CompanyUpsertWithoutVotesInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutVotesInput, CompanyUpdateWithoutVotesInput>, CompanyUncheckedUpdateWithoutVotesInput>
  }

  export type CompanyQuestCreateNestedManyWithoutQuestInput = {
    create?: XOR<CompanyQuestCreateWithoutQuestInput, CompanyQuestUncheckedCreateWithoutQuestInput> | CompanyQuestCreateWithoutQuestInput[] | CompanyQuestUncheckedCreateWithoutQuestInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutQuestInput | CompanyQuestCreateOrConnectWithoutQuestInput[]
    createMany?: CompanyQuestCreateManyQuestInputEnvelope
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
  }

  export type CompanyQuestUncheckedCreateNestedManyWithoutQuestInput = {
    create?: XOR<CompanyQuestCreateWithoutQuestInput, CompanyQuestUncheckedCreateWithoutQuestInput> | CompanyQuestCreateWithoutQuestInput[] | CompanyQuestUncheckedCreateWithoutQuestInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutQuestInput | CompanyQuestCreateOrConnectWithoutQuestInput[]
    createMany?: CompanyQuestCreateManyQuestInputEnvelope
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
  }

  export type CompanyQuestUpdateManyWithoutQuestNestedInput = {
    create?: XOR<CompanyQuestCreateWithoutQuestInput, CompanyQuestUncheckedCreateWithoutQuestInput> | CompanyQuestCreateWithoutQuestInput[] | CompanyQuestUncheckedCreateWithoutQuestInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutQuestInput | CompanyQuestCreateOrConnectWithoutQuestInput[]
    upsert?: CompanyQuestUpsertWithWhereUniqueWithoutQuestInput | CompanyQuestUpsertWithWhereUniqueWithoutQuestInput[]
    createMany?: CompanyQuestCreateManyQuestInputEnvelope
    set?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    disconnect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    delete?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    update?: CompanyQuestUpdateWithWhereUniqueWithoutQuestInput | CompanyQuestUpdateWithWhereUniqueWithoutQuestInput[]
    updateMany?: CompanyQuestUpdateManyWithWhereWithoutQuestInput | CompanyQuestUpdateManyWithWhereWithoutQuestInput[]
    deleteMany?: CompanyQuestScalarWhereInput | CompanyQuestScalarWhereInput[]
  }

  export type CompanyQuestUncheckedUpdateManyWithoutQuestNestedInput = {
    create?: XOR<CompanyQuestCreateWithoutQuestInput, CompanyQuestUncheckedCreateWithoutQuestInput> | CompanyQuestCreateWithoutQuestInput[] | CompanyQuestUncheckedCreateWithoutQuestInput[]
    connectOrCreate?: CompanyQuestCreateOrConnectWithoutQuestInput | CompanyQuestCreateOrConnectWithoutQuestInput[]
    upsert?: CompanyQuestUpsertWithWhereUniqueWithoutQuestInput | CompanyQuestUpsertWithWhereUniqueWithoutQuestInput[]
    createMany?: CompanyQuestCreateManyQuestInputEnvelope
    set?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    disconnect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    delete?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    connect?: CompanyQuestWhereUniqueInput | CompanyQuestWhereUniqueInput[]
    update?: CompanyQuestUpdateWithWhereUniqueWithoutQuestInput | CompanyQuestUpdateWithWhereUniqueWithoutQuestInput[]
    updateMany?: CompanyQuestUpdateManyWithWhereWithoutQuestInput | CompanyQuestUpdateManyWithWhereWithoutQuestInput[]
    deleteMany?: CompanyQuestScalarWhereInput | CompanyQuestScalarWhereInput[]
  }

  export type CompanyCreateNestedOneWithoutQuestsInput = {
    create?: XOR<CompanyCreateWithoutQuestsInput, CompanyUncheckedCreateWithoutQuestsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuestsInput
    connect?: CompanyWhereUniqueInput
  }

  export type QuestCreateNestedOneWithoutCompaniesInput = {
    create?: XOR<QuestCreateWithoutCompaniesInput, QuestUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: QuestCreateOrConnectWithoutCompaniesInput
    connect?: QuestWhereUniqueInput
  }

  export type CompanyUpdateOneRequiredWithoutQuestsNestedInput = {
    create?: XOR<CompanyCreateWithoutQuestsInput, CompanyUncheckedCreateWithoutQuestsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutQuestsInput
    upsert?: CompanyUpsertWithoutQuestsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutQuestsInput, CompanyUpdateWithoutQuestsInput>, CompanyUncheckedUpdateWithoutQuestsInput>
  }

  export type QuestUpdateOneRequiredWithoutCompaniesNestedInput = {
    create?: XOR<QuestCreateWithoutCompaniesInput, QuestUncheckedCreateWithoutCompaniesInput>
    connectOrCreate?: QuestCreateOrConnectWithoutCompaniesInput
    upsert?: QuestUpsertWithoutCompaniesInput
    connect?: QuestWhereUniqueInput
    update?: XOR<XOR<QuestUpdateToOneWithWhereWithoutCompaniesInput, QuestUpdateWithoutCompaniesInput>, QuestUncheckedUpdateWithoutCompaniesInput>
  }

  export type CompanyCreateNestedOneWithoutAlertsInput = {
    create?: XOR<CompanyCreateWithoutAlertsInput, CompanyUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAlertsInput
    connect?: CompanyWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CompanyUpdateOneRequiredWithoutAlertsNestedInput = {
    create?: XOR<CompanyCreateWithoutAlertsInput, CompanyUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: CompanyCreateOrConnectWithoutAlertsInput
    upsert?: CompanyUpsertWithoutAlertsInput
    connect?: CompanyWhereUniqueInput
    update?: XOR<XOR<CompanyUpdateToOneWithWhereWithoutAlertsInput, CompanyUpdateWithoutAlertsInput>, CompanyUncheckedUpdateWithoutAlertsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CompanyCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteCreateNestedManyWithoutCompanyInput
    positions?: PositionCreateNestedManyWithoutCompanyInput
    research?: ResearchCreateNestedManyWithoutCompanyInput
    votes?: VoteCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestCreateNestedManyWithoutCompanyInput
    alerts?: AlertCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
    positions?: PositionUncheckedCreateNestedManyWithoutCompanyInput
    research?: ResearchUncheckedCreateNestedManyWithoutCompanyInput
    votes?: VoteUncheckedCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput
    alerts?: AlertUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutOwnerInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    refreshToken: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    refreshToken: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutOwnerInput = {
    update: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
    create: XOR<CompanyCreateWithoutOwnerInput, CompanyUncheckedCreateWithoutOwnerInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutOwnerInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutOwnerInput, CompanyUncheckedUpdateWithoutOwnerInput>
  }

  export type CompanyUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    positions?: PositionUpdateManyWithoutCompanyNestedInput
    research?: ResearchUpdateManyWithoutCompanyNestedInput
    votes?: VoteUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
    positions?: PositionUncheckedUpdateManyWithoutCompanyNestedInput
    research?: ResearchUncheckedUpdateManyWithoutCompanyNestedInput
    votes?: VoteUncheckedUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    refreshToken?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    username: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string
    company?: CompanyCreateNestedOneWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    password: string
    username: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string
    company?: CompanyUncheckedCreateNestedOneWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUncheckedUpdateOneWithoutOwnerNestedInput
  }

  export type UserCreateWithoutCompanyInput = {
    id?: string
    email: string
    password: string
    username: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCompanyInput = {
    id?: string
    email: string
    password: string
    username: string
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLogin?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCompanyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
  }

  export type SiteCreateWithoutCompanyInput = {
    id?: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rigs?: RigCreateNestedManyWithoutSiteInput
    energyContracts?: EnergyContractCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutCompanyInput = {
    id?: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rigs?: RigUncheckedCreateNestedManyWithoutSiteInput
    energyContracts?: EnergyContractUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutCompanyInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput>
  }

  export type SiteCreateManyCompanyInputEnvelope = {
    data: SiteCreateManyCompanyInput | SiteCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type PositionCreateWithoutCompanyInput = {
    id?: string
    instrument: string
    side: string
    quantity: number
    entryPrice: number
    leverage?: number
    margin?: number | null
    liquidationPrice?: number | null
    status?: string
    pnl?: number
    openedAt?: Date | string
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionUncheckedCreateWithoutCompanyInput = {
    id?: string
    instrument: string
    side: string
    quantity: number
    entryPrice: number
    leverage?: number
    margin?: number | null
    liquidationPrice?: number | null
    status?: string
    pnl?: number
    openedAt?: Date | string
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionCreateOrConnectWithoutCompanyInput = {
    where: PositionWhereUniqueInput
    create: XOR<PositionCreateWithoutCompanyInput, PositionUncheckedCreateWithoutCompanyInput>
  }

  export type PositionCreateManyCompanyInputEnvelope = {
    data: PositionCreateManyCompanyInput | PositionCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type ResearchCreateWithoutCompanyInput = {
    id?: string
    nodeId: string
    category: string
    level?: number
    progress?: number
    status?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResearchUncheckedCreateWithoutCompanyInput = {
    id?: string
    nodeId: string
    category: string
    level?: number
    progress?: number
    status?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResearchCreateOrConnectWithoutCompanyInput = {
    where: ResearchWhereUniqueInput
    create: XOR<ResearchCreateWithoutCompanyInput, ResearchUncheckedCreateWithoutCompanyInput>
  }

  export type ResearchCreateManyCompanyInputEnvelope = {
    data: ResearchCreateManyCompanyInput | ResearchCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type VoteCreateWithoutCompanyInput = {
    id?: string
    choice: string
    weight?: number
    createdAt?: Date | string
    proposal: ProposalCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutCompanyInput = {
    id?: string
    proposalId: string
    choice: string
    weight?: number
    createdAt?: Date | string
  }

  export type VoteCreateOrConnectWithoutCompanyInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutCompanyInput, VoteUncheckedCreateWithoutCompanyInput>
  }

  export type VoteCreateManyCompanyInputEnvelope = {
    data: VoteCreateManyCompanyInput | VoteCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type CompanyQuestCreateWithoutCompanyInput = {
    id?: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    quest: QuestCreateNestedOneWithoutCompaniesInput
  }

  export type CompanyQuestUncheckedCreateWithoutCompanyInput = {
    id?: string
    questId: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type CompanyQuestCreateOrConnectWithoutCompanyInput = {
    where: CompanyQuestWhereUniqueInput
    create: XOR<CompanyQuestCreateWithoutCompanyInput, CompanyQuestUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyQuestCreateManyCompanyInputEnvelope = {
    data: CompanyQuestCreateManyCompanyInput | CompanyQuestCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type AlertCreateWithoutCompanyInput = {
    id?: string
    type: string
    category: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
  }

  export type AlertUncheckedCreateWithoutCompanyInput = {
    id?: string
    type: string
    category: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
  }

  export type AlertCreateOrConnectWithoutCompanyInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutCompanyInput, AlertUncheckedCreateWithoutCompanyInput>
  }

  export type AlertCreateManyCompanyInputEnvelope = {
    data: AlertCreateManyCompanyInput | AlertCreateManyCompanyInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCompanyInput = {
    update: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
    create: XOR<UserCreateWithoutCompanyInput, UserUncheckedCreateWithoutCompanyInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompanyInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompanyInput, UserUncheckedUpdateWithoutCompanyInput>
  }

  export type UserUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLogin?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SiteUpsertWithWhereUniqueWithoutCompanyInput = {
    where: SiteWhereUniqueInput
    update: XOR<SiteUpdateWithoutCompanyInput, SiteUncheckedUpdateWithoutCompanyInput>
    create: XOR<SiteCreateWithoutCompanyInput, SiteUncheckedCreateWithoutCompanyInput>
  }

  export type SiteUpdateWithWhereUniqueWithoutCompanyInput = {
    where: SiteWhereUniqueInput
    data: XOR<SiteUpdateWithoutCompanyInput, SiteUncheckedUpdateWithoutCompanyInput>
  }

  export type SiteUpdateManyWithWhereWithoutCompanyInput = {
    where: SiteScalarWhereInput
    data: XOR<SiteUpdateManyMutationInput, SiteUncheckedUpdateManyWithoutCompanyInput>
  }

  export type SiteScalarWhereInput = {
    AND?: SiteScalarWhereInput | SiteScalarWhereInput[]
    OR?: SiteScalarWhereInput[]
    NOT?: SiteScalarWhereInput | SiteScalarWhereInput[]
    id?: StringFilter<"Site"> | string
    companyId?: StringFilter<"Site"> | string
    name?: StringFilter<"Site"> | string
    region?: StringFilter<"Site"> | string
    gridTier?: IntFilter<"Site"> | number
    coolingType?: StringFilter<"Site"> | string
    uptime?: FloatFilter<"Site"> | number
    totalHashrate?: FloatFilter<"Site"> | number
    powerUsage?: FloatFilter<"Site"> | number
    gridWidth?: IntFilter<"Site"> | number
    gridHeight?: IntFilter<"Site"> | number
    createdAt?: DateTimeFilter<"Site"> | Date | string
    updatedAt?: DateTimeFilter<"Site"> | Date | string
  }

  export type PositionUpsertWithWhereUniqueWithoutCompanyInput = {
    where: PositionWhereUniqueInput
    update: XOR<PositionUpdateWithoutCompanyInput, PositionUncheckedUpdateWithoutCompanyInput>
    create: XOR<PositionCreateWithoutCompanyInput, PositionUncheckedCreateWithoutCompanyInput>
  }

  export type PositionUpdateWithWhereUniqueWithoutCompanyInput = {
    where: PositionWhereUniqueInput
    data: XOR<PositionUpdateWithoutCompanyInput, PositionUncheckedUpdateWithoutCompanyInput>
  }

  export type PositionUpdateManyWithWhereWithoutCompanyInput = {
    where: PositionScalarWhereInput
    data: XOR<PositionUpdateManyMutationInput, PositionUncheckedUpdateManyWithoutCompanyInput>
  }

  export type PositionScalarWhereInput = {
    AND?: PositionScalarWhereInput | PositionScalarWhereInput[]
    OR?: PositionScalarWhereInput[]
    NOT?: PositionScalarWhereInput | PositionScalarWhereInput[]
    id?: StringFilter<"Position"> | string
    companyId?: StringFilter<"Position"> | string
    instrument?: StringFilter<"Position"> | string
    side?: StringFilter<"Position"> | string
    quantity?: FloatFilter<"Position"> | number
    entryPrice?: FloatFilter<"Position"> | number
    leverage?: FloatFilter<"Position"> | number
    margin?: FloatNullableFilter<"Position"> | number | null
    liquidationPrice?: FloatNullableFilter<"Position"> | number | null
    status?: StringFilter<"Position"> | string
    pnl?: FloatFilter<"Position"> | number
    openedAt?: DateTimeFilter<"Position"> | Date | string
    closedAt?: DateTimeNullableFilter<"Position"> | Date | string | null
    createdAt?: DateTimeFilter<"Position"> | Date | string
    updatedAt?: DateTimeFilter<"Position"> | Date | string
  }

  export type ResearchUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ResearchWhereUniqueInput
    update: XOR<ResearchUpdateWithoutCompanyInput, ResearchUncheckedUpdateWithoutCompanyInput>
    create: XOR<ResearchCreateWithoutCompanyInput, ResearchUncheckedCreateWithoutCompanyInput>
  }

  export type ResearchUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ResearchWhereUniqueInput
    data: XOR<ResearchUpdateWithoutCompanyInput, ResearchUncheckedUpdateWithoutCompanyInput>
  }

  export type ResearchUpdateManyWithWhereWithoutCompanyInput = {
    where: ResearchScalarWhereInput
    data: XOR<ResearchUpdateManyMutationInput, ResearchUncheckedUpdateManyWithoutCompanyInput>
  }

  export type ResearchScalarWhereInput = {
    AND?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
    OR?: ResearchScalarWhereInput[]
    NOT?: ResearchScalarWhereInput | ResearchScalarWhereInput[]
    id?: StringFilter<"Research"> | string
    companyId?: StringFilter<"Research"> | string
    nodeId?: StringFilter<"Research"> | string
    category?: StringFilter<"Research"> | string
    level?: IntFilter<"Research"> | number
    progress?: FloatFilter<"Research"> | number
    status?: StringFilter<"Research"> | string
    startedAt?: DateTimeNullableFilter<"Research"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"Research"> | Date | string | null
    createdAt?: DateTimeFilter<"Research"> | Date | string
    updatedAt?: DateTimeFilter<"Research"> | Date | string
  }

  export type VoteUpsertWithWhereUniqueWithoutCompanyInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutCompanyInput, VoteUncheckedUpdateWithoutCompanyInput>
    create: XOR<VoteCreateWithoutCompanyInput, VoteUncheckedCreateWithoutCompanyInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutCompanyInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutCompanyInput, VoteUncheckedUpdateWithoutCompanyInput>
  }

  export type VoteUpdateManyWithWhereWithoutCompanyInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutCompanyInput>
  }

  export type VoteScalarWhereInput = {
    AND?: VoteScalarWhereInput | VoteScalarWhereInput[]
    OR?: VoteScalarWhereInput[]
    NOT?: VoteScalarWhereInput | VoteScalarWhereInput[]
    id?: StringFilter<"Vote"> | string
    proposalId?: StringFilter<"Vote"> | string
    companyId?: StringFilter<"Vote"> | string
    choice?: StringFilter<"Vote"> | string
    weight?: IntFilter<"Vote"> | number
    createdAt?: DateTimeFilter<"Vote"> | Date | string
  }

  export type CompanyQuestUpsertWithWhereUniqueWithoutCompanyInput = {
    where: CompanyQuestWhereUniqueInput
    update: XOR<CompanyQuestUpdateWithoutCompanyInput, CompanyQuestUncheckedUpdateWithoutCompanyInput>
    create: XOR<CompanyQuestCreateWithoutCompanyInput, CompanyQuestUncheckedCreateWithoutCompanyInput>
  }

  export type CompanyQuestUpdateWithWhereUniqueWithoutCompanyInput = {
    where: CompanyQuestWhereUniqueInput
    data: XOR<CompanyQuestUpdateWithoutCompanyInput, CompanyQuestUncheckedUpdateWithoutCompanyInput>
  }

  export type CompanyQuestUpdateManyWithWhereWithoutCompanyInput = {
    where: CompanyQuestScalarWhereInput
    data: XOR<CompanyQuestUpdateManyMutationInput, CompanyQuestUncheckedUpdateManyWithoutCompanyInput>
  }

  export type CompanyQuestScalarWhereInput = {
    AND?: CompanyQuestScalarWhereInput | CompanyQuestScalarWhereInput[]
    OR?: CompanyQuestScalarWhereInput[]
    NOT?: CompanyQuestScalarWhereInput | CompanyQuestScalarWhereInput[]
    id?: StringFilter<"CompanyQuest"> | string
    companyId?: StringFilter<"CompanyQuest"> | string
    questId?: StringFilter<"CompanyQuest"> | string
    status?: StringFilter<"CompanyQuest"> | string
    progress?: JsonNullableFilter<"CompanyQuest">
    startedAt?: DateTimeFilter<"CompanyQuest"> | Date | string
    completedAt?: DateTimeNullableFilter<"CompanyQuest"> | Date | string | null
  }

  export type AlertUpsertWithWhereUniqueWithoutCompanyInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutCompanyInput, AlertUncheckedUpdateWithoutCompanyInput>
    create: XOR<AlertCreateWithoutCompanyInput, AlertUncheckedCreateWithoutCompanyInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutCompanyInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutCompanyInput, AlertUncheckedUpdateWithoutCompanyInput>
  }

  export type AlertUpdateManyWithWhereWithoutCompanyInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutCompanyInput>
  }

  export type AlertScalarWhereInput = {
    AND?: AlertScalarWhereInput | AlertScalarWhereInput[]
    OR?: AlertScalarWhereInput[]
    NOT?: AlertScalarWhereInput | AlertScalarWhereInput[]
    id?: StringFilter<"Alert"> | string
    companyId?: StringFilter<"Alert"> | string
    type?: StringFilter<"Alert"> | string
    category?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    data?: JsonNullableFilter<"Alert">
    read?: BoolFilter<"Alert"> | boolean
    createdAt?: DateTimeFilter<"Alert"> | Date | string
  }

  export type CompanyCreateWithoutSitesInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompanyInput
    positions?: PositionCreateNestedManyWithoutCompanyInput
    research?: ResearchCreateNestedManyWithoutCompanyInput
    votes?: VoteCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestCreateNestedManyWithoutCompanyInput
    alerts?: AlertCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutSitesInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    positions?: PositionUncheckedCreateNestedManyWithoutCompanyInput
    research?: ResearchUncheckedCreateNestedManyWithoutCompanyInput
    votes?: VoteUncheckedCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput
    alerts?: AlertUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutSitesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
  }

  export type RigCreateWithoutSiteInput = {
    id?: string
    type: string
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear?: number
    firmware?: string
    status?: string
    purchasePrice: number
    purchasedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RigUncheckedCreateWithoutSiteInput = {
    id?: string
    type: string
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear?: number
    firmware?: string
    status?: string
    purchasePrice: number
    purchasedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RigCreateOrConnectWithoutSiteInput = {
    where: RigWhereUniqueInput
    create: XOR<RigCreateWithoutSiteInput, RigUncheckedCreateWithoutSiteInput>
  }

  export type RigCreateManySiteInputEnvelope = {
    data: RigCreateManySiteInput | RigCreateManySiteInput[]
    skipDuplicates?: boolean
  }

  export type EnergyContractCreateWithoutSiteInput = {
    id?: string
    provider: string
    pricePerKWh: number
    capacity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
  }

  export type EnergyContractUncheckedCreateWithoutSiteInput = {
    id?: string
    provider: string
    pricePerKWh: number
    capacity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
  }

  export type EnergyContractCreateOrConnectWithoutSiteInput = {
    where: EnergyContractWhereUniqueInput
    create: XOR<EnergyContractCreateWithoutSiteInput, EnergyContractUncheckedCreateWithoutSiteInput>
  }

  export type EnergyContractCreateManySiteInputEnvelope = {
    data: EnergyContractCreateManySiteInput | EnergyContractCreateManySiteInput[]
    skipDuplicates?: boolean
  }

  export type CompanyUpsertWithoutSitesInput = {
    update: XOR<CompanyUpdateWithoutSitesInput, CompanyUncheckedUpdateWithoutSitesInput>
    create: XOR<CompanyCreateWithoutSitesInput, CompanyUncheckedCreateWithoutSitesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutSitesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutSitesInput, CompanyUncheckedUpdateWithoutSitesInput>
  }

  export type CompanyUpdateWithoutSitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompanyNestedInput
    positions?: PositionUpdateManyWithoutCompanyNestedInput
    research?: ResearchUpdateManyWithoutCompanyNestedInput
    votes?: VoteUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutSitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    positions?: PositionUncheckedUpdateManyWithoutCompanyNestedInput
    research?: ResearchUncheckedUpdateManyWithoutCompanyNestedInput
    votes?: VoteUncheckedUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type RigUpsertWithWhereUniqueWithoutSiteInput = {
    where: RigWhereUniqueInput
    update: XOR<RigUpdateWithoutSiteInput, RigUncheckedUpdateWithoutSiteInput>
    create: XOR<RigCreateWithoutSiteInput, RigUncheckedCreateWithoutSiteInput>
  }

  export type RigUpdateWithWhereUniqueWithoutSiteInput = {
    where: RigWhereUniqueInput
    data: XOR<RigUpdateWithoutSiteInput, RigUncheckedUpdateWithoutSiteInput>
  }

  export type RigUpdateManyWithWhereWithoutSiteInput = {
    where: RigScalarWhereInput
    data: XOR<RigUpdateManyMutationInput, RigUncheckedUpdateManyWithoutSiteInput>
  }

  export type RigScalarWhereInput = {
    AND?: RigScalarWhereInput | RigScalarWhereInput[]
    OR?: RigScalarWhereInput[]
    NOT?: RigScalarWhereInput | RigScalarWhereInput[]
    id?: StringFilter<"Rig"> | string
    siteId?: StringFilter<"Rig"> | string
    type?: StringFilter<"Rig"> | string
    gridX?: IntFilter<"Rig"> | number
    gridY?: IntFilter<"Rig"> | number
    hashrate?: FloatFilter<"Rig"> | number
    efficiency?: FloatFilter<"Rig"> | number
    wear?: FloatFilter<"Rig"> | number
    firmware?: StringFilter<"Rig"> | string
    status?: StringFilter<"Rig"> | string
    purchasePrice?: FloatFilter<"Rig"> | number
    purchasedAt?: DateTimeFilter<"Rig"> | Date | string
    createdAt?: DateTimeFilter<"Rig"> | Date | string
    updatedAt?: DateTimeFilter<"Rig"> | Date | string
  }

  export type EnergyContractUpsertWithWhereUniqueWithoutSiteInput = {
    where: EnergyContractWhereUniqueInput
    update: XOR<EnergyContractUpdateWithoutSiteInput, EnergyContractUncheckedUpdateWithoutSiteInput>
    create: XOR<EnergyContractCreateWithoutSiteInput, EnergyContractUncheckedCreateWithoutSiteInput>
  }

  export type EnergyContractUpdateWithWhereUniqueWithoutSiteInput = {
    where: EnergyContractWhereUniqueInput
    data: XOR<EnergyContractUpdateWithoutSiteInput, EnergyContractUncheckedUpdateWithoutSiteInput>
  }

  export type EnergyContractUpdateManyWithWhereWithoutSiteInput = {
    where: EnergyContractScalarWhereInput
    data: XOR<EnergyContractUpdateManyMutationInput, EnergyContractUncheckedUpdateManyWithoutSiteInput>
  }

  export type EnergyContractScalarWhereInput = {
    AND?: EnergyContractScalarWhereInput | EnergyContractScalarWhereInput[]
    OR?: EnergyContractScalarWhereInput[]
    NOT?: EnergyContractScalarWhereInput | EnergyContractScalarWhereInput[]
    id?: StringFilter<"EnergyContract"> | string
    siteId?: StringFilter<"EnergyContract"> | string
    provider?: StringFilter<"EnergyContract"> | string
    pricePerKWh?: FloatFilter<"EnergyContract"> | number
    capacity?: FloatFilter<"EnergyContract"> | number
    startDate?: DateTimeFilter<"EnergyContract"> | Date | string
    endDate?: DateTimeFilter<"EnergyContract"> | Date | string
    createdAt?: DateTimeFilter<"EnergyContract"> | Date | string
  }

  export type SiteCreateWithoutRigsInput = {
    id?: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutSitesInput
    energyContracts?: EnergyContractCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutRigsInput = {
    id?: string
    companyId: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    energyContracts?: EnergyContractUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutRigsInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutRigsInput, SiteUncheckedCreateWithoutRigsInput>
  }

  export type SiteUpsertWithoutRigsInput = {
    update: XOR<SiteUpdateWithoutRigsInput, SiteUncheckedUpdateWithoutRigsInput>
    create: XOR<SiteCreateWithoutRigsInput, SiteUncheckedCreateWithoutRigsInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutRigsInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutRigsInput, SiteUncheckedUpdateWithoutRigsInput>
  }

  export type SiteUpdateWithoutRigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutSitesNestedInput
    energyContracts?: EnergyContractUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutRigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    energyContracts?: EnergyContractUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteCreateWithoutEnergyContractsInput = {
    id?: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateNestedOneWithoutSitesInput
    rigs?: RigCreateNestedManyWithoutSiteInput
  }

  export type SiteUncheckedCreateWithoutEnergyContractsInput = {
    id?: string
    companyId: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    rigs?: RigUncheckedCreateNestedManyWithoutSiteInput
  }

  export type SiteCreateOrConnectWithoutEnergyContractsInput = {
    where: SiteWhereUniqueInput
    create: XOR<SiteCreateWithoutEnergyContractsInput, SiteUncheckedCreateWithoutEnergyContractsInput>
  }

  export type SiteUpsertWithoutEnergyContractsInput = {
    update: XOR<SiteUpdateWithoutEnergyContractsInput, SiteUncheckedUpdateWithoutEnergyContractsInput>
    create: XOR<SiteCreateWithoutEnergyContractsInput, SiteUncheckedCreateWithoutEnergyContractsInput>
    where?: SiteWhereInput
  }

  export type SiteUpdateToOneWithWhereWithoutEnergyContractsInput = {
    where?: SiteWhereInput
    data: XOR<SiteUpdateWithoutEnergyContractsInput, SiteUncheckedUpdateWithoutEnergyContractsInput>
  }

  export type SiteUpdateWithoutEnergyContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutSitesNestedInput
    rigs?: RigUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutEnergyContractsInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rigs?: RigUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type CompanyCreateWithoutPositionsInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    research?: ResearchCreateNestedManyWithoutCompanyInput
    votes?: VoteCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestCreateNestedManyWithoutCompanyInput
    alerts?: AlertCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutPositionsInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
    research?: ResearchUncheckedCreateNestedManyWithoutCompanyInput
    votes?: VoteUncheckedCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput
    alerts?: AlertUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutPositionsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutPositionsInput, CompanyUncheckedCreateWithoutPositionsInput>
  }

  export type CompanyUpsertWithoutPositionsInput = {
    update: XOR<CompanyUpdateWithoutPositionsInput, CompanyUncheckedUpdateWithoutPositionsInput>
    create: XOR<CompanyCreateWithoutPositionsInput, CompanyUncheckedCreateWithoutPositionsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutPositionsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutPositionsInput, CompanyUncheckedUpdateWithoutPositionsInput>
  }

  export type CompanyUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    research?: ResearchUpdateManyWithoutCompanyNestedInput
    votes?: VoteUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutPositionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
    research?: ResearchUncheckedUpdateManyWithoutCompanyNestedInput
    votes?: VoteUncheckedUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyCreateWithoutResearchInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    positions?: PositionCreateNestedManyWithoutCompanyInput
    votes?: VoteCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestCreateNestedManyWithoutCompanyInput
    alerts?: AlertCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutResearchInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
    positions?: PositionUncheckedCreateNestedManyWithoutCompanyInput
    votes?: VoteUncheckedCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput
    alerts?: AlertUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutResearchInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutResearchInput, CompanyUncheckedCreateWithoutResearchInput>
  }

  export type CompanyUpsertWithoutResearchInput = {
    update: XOR<CompanyUpdateWithoutResearchInput, CompanyUncheckedUpdateWithoutResearchInput>
    create: XOR<CompanyCreateWithoutResearchInput, CompanyUncheckedCreateWithoutResearchInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutResearchInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutResearchInput, CompanyUncheckedUpdateWithoutResearchInput>
  }

  export type CompanyUpdateWithoutResearchInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    positions?: PositionUpdateManyWithoutCompanyNestedInput
    votes?: VoteUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutResearchInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
    positions?: PositionUncheckedUpdateManyWithoutCompanyNestedInput
    votes?: VoteUncheckedUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type VoteCreateWithoutProposalInput = {
    id?: string
    choice: string
    weight?: number
    createdAt?: Date | string
    company: CompanyCreateNestedOneWithoutVotesInput
  }

  export type VoteUncheckedCreateWithoutProposalInput = {
    id?: string
    companyId: string
    choice: string
    weight?: number
    createdAt?: Date | string
  }

  export type VoteCreateOrConnectWithoutProposalInput = {
    where: VoteWhereUniqueInput
    create: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput>
  }

  export type VoteCreateManyProposalInputEnvelope = {
    data: VoteCreateManyProposalInput | VoteCreateManyProposalInput[]
    skipDuplicates?: boolean
  }

  export type VoteUpsertWithWhereUniqueWithoutProposalInput = {
    where: VoteWhereUniqueInput
    update: XOR<VoteUpdateWithoutProposalInput, VoteUncheckedUpdateWithoutProposalInput>
    create: XOR<VoteCreateWithoutProposalInput, VoteUncheckedCreateWithoutProposalInput>
  }

  export type VoteUpdateWithWhereUniqueWithoutProposalInput = {
    where: VoteWhereUniqueInput
    data: XOR<VoteUpdateWithoutProposalInput, VoteUncheckedUpdateWithoutProposalInput>
  }

  export type VoteUpdateManyWithWhereWithoutProposalInput = {
    where: VoteScalarWhereInput
    data: XOR<VoteUpdateManyMutationInput, VoteUncheckedUpdateManyWithoutProposalInput>
  }

  export type ProposalCreateWithoutVotesInput = {
    id?: string
    type: string
    title: string
    description: string
    votesFor?: number
    votesAgainst?: number
    votesAbstain?: number
    deadline: Date | string
    outcome?: string | null
    createdAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ProposalUncheckedCreateWithoutVotesInput = {
    id?: string
    type: string
    title: string
    description: string
    votesFor?: number
    votesAgainst?: number
    votesAbstain?: number
    deadline: Date | string
    outcome?: string | null
    createdAt?: Date | string
    resolvedAt?: Date | string | null
  }

  export type ProposalCreateOrConnectWithoutVotesInput = {
    where: ProposalWhereUniqueInput
    create: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
  }

  export type CompanyCreateWithoutVotesInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    positions?: PositionCreateNestedManyWithoutCompanyInput
    research?: ResearchCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestCreateNestedManyWithoutCompanyInput
    alerts?: AlertCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutVotesInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
    positions?: PositionUncheckedCreateNestedManyWithoutCompanyInput
    research?: ResearchUncheckedCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput
    alerts?: AlertUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutVotesInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutVotesInput, CompanyUncheckedCreateWithoutVotesInput>
  }

  export type ProposalUpsertWithoutVotesInput = {
    update: XOR<ProposalUpdateWithoutVotesInput, ProposalUncheckedUpdateWithoutVotesInput>
    create: XOR<ProposalCreateWithoutVotesInput, ProposalUncheckedCreateWithoutVotesInput>
    where?: ProposalWhereInput
  }

  export type ProposalUpdateToOneWithWhereWithoutVotesInput = {
    where?: ProposalWhereInput
    data: XOR<ProposalUpdateWithoutVotesInput, ProposalUncheckedUpdateWithoutVotesInput>
  }

  export type ProposalUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    votesFor?: IntFieldUpdateOperationsInput | number
    votesAgainst?: IntFieldUpdateOperationsInput | number
    votesAbstain?: IntFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProposalUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    votesFor?: IntFieldUpdateOperationsInput | number
    votesAgainst?: IntFieldUpdateOperationsInput | number
    votesAbstain?: IntFieldUpdateOperationsInput | number
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    outcome?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompanyUpsertWithoutVotesInput = {
    update: XOR<CompanyUpdateWithoutVotesInput, CompanyUncheckedUpdateWithoutVotesInput>
    create: XOR<CompanyCreateWithoutVotesInput, CompanyUncheckedCreateWithoutVotesInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutVotesInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutVotesInput, CompanyUncheckedUpdateWithoutVotesInput>
  }

  export type CompanyUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    positions?: PositionUpdateManyWithoutCompanyNestedInput
    research?: ResearchUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutVotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
    positions?: PositionUncheckedUpdateManyWithoutCompanyNestedInput
    research?: ResearchUncheckedUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyQuestCreateWithoutQuestInput = {
    id?: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
    company: CompanyCreateNestedOneWithoutQuestsInput
  }

  export type CompanyQuestUncheckedCreateWithoutQuestInput = {
    id?: string
    companyId: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type CompanyQuestCreateOrConnectWithoutQuestInput = {
    where: CompanyQuestWhereUniqueInput
    create: XOR<CompanyQuestCreateWithoutQuestInput, CompanyQuestUncheckedCreateWithoutQuestInput>
  }

  export type CompanyQuestCreateManyQuestInputEnvelope = {
    data: CompanyQuestCreateManyQuestInput | CompanyQuestCreateManyQuestInput[]
    skipDuplicates?: boolean
  }

  export type CompanyQuestUpsertWithWhereUniqueWithoutQuestInput = {
    where: CompanyQuestWhereUniqueInput
    update: XOR<CompanyQuestUpdateWithoutQuestInput, CompanyQuestUncheckedUpdateWithoutQuestInput>
    create: XOR<CompanyQuestCreateWithoutQuestInput, CompanyQuestUncheckedCreateWithoutQuestInput>
  }

  export type CompanyQuestUpdateWithWhereUniqueWithoutQuestInput = {
    where: CompanyQuestWhereUniqueInput
    data: XOR<CompanyQuestUpdateWithoutQuestInput, CompanyQuestUncheckedUpdateWithoutQuestInput>
  }

  export type CompanyQuestUpdateManyWithWhereWithoutQuestInput = {
    where: CompanyQuestScalarWhereInput
    data: XOR<CompanyQuestUpdateManyMutationInput, CompanyQuestUncheckedUpdateManyWithoutQuestInput>
  }

  export type CompanyCreateWithoutQuestsInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    positions?: PositionCreateNestedManyWithoutCompanyInput
    research?: ResearchCreateNestedManyWithoutCompanyInput
    votes?: VoteCreateNestedManyWithoutCompanyInput
    alerts?: AlertCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutQuestsInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
    positions?: PositionUncheckedCreateNestedManyWithoutCompanyInput
    research?: ResearchUncheckedCreateNestedManyWithoutCompanyInput
    votes?: VoteUncheckedCreateNestedManyWithoutCompanyInput
    alerts?: AlertUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutQuestsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutQuestsInput, CompanyUncheckedCreateWithoutQuestsInput>
  }

  export type QuestCreateWithoutCompaniesInput = {
    id?: string
    type: string
    category: string
    title: string
    description: string
    requirements: JsonNullValueInput | InputJsonValue
    rewardUsd?: number
    rewardBtc?: number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type QuestUncheckedCreateWithoutCompaniesInput = {
    id?: string
    type: string
    category: string
    title: string
    description: string
    requirements: JsonNullValueInput | InputJsonValue
    rewardUsd?: number
    rewardBtc?: number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: number
    startDate?: Date | string | null
    endDate?: Date | string | null
    createdAt?: Date | string
  }

  export type QuestCreateOrConnectWithoutCompaniesInput = {
    where: QuestWhereUniqueInput
    create: XOR<QuestCreateWithoutCompaniesInput, QuestUncheckedCreateWithoutCompaniesInput>
  }

  export type CompanyUpsertWithoutQuestsInput = {
    update: XOR<CompanyUpdateWithoutQuestsInput, CompanyUncheckedUpdateWithoutQuestsInput>
    create: XOR<CompanyCreateWithoutQuestsInput, CompanyUncheckedCreateWithoutQuestsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutQuestsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutQuestsInput, CompanyUncheckedUpdateWithoutQuestsInput>
  }

  export type CompanyUpdateWithoutQuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    positions?: PositionUpdateManyWithoutCompanyNestedInput
    research?: ResearchUpdateManyWithoutCompanyNestedInput
    votes?: VoteUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutQuestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
    positions?: PositionUncheckedUpdateManyWithoutCompanyNestedInput
    research?: ResearchUncheckedUpdateManyWithoutCompanyNestedInput
    votes?: VoteUncheckedUpdateManyWithoutCompanyNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type QuestUpsertWithoutCompaniesInput = {
    update: XOR<QuestUpdateWithoutCompaniesInput, QuestUncheckedUpdateWithoutCompaniesInput>
    create: XOR<QuestCreateWithoutCompaniesInput, QuestUncheckedCreateWithoutCompaniesInput>
    where?: QuestWhereInput
  }

  export type QuestUpdateToOneWithWhereWithoutCompaniesInput = {
    where?: QuestWhereInput
    data: XOR<QuestUpdateWithoutCompaniesInput, QuestUncheckedUpdateWithoutCompaniesInput>
  }

  export type QuestUpdateWithoutCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: JsonNullValueInput | InputJsonValue
    rewardUsd?: FloatFieldUpdateOperationsInput | number
    rewardBtc?: FloatFieldUpdateOperationsInput | number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuestUncheckedUpdateWithoutCompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requirements?: JsonNullValueInput | InputJsonValue
    rewardUsd?: FloatFieldUpdateOperationsInput | number
    rewardBtc?: FloatFieldUpdateOperationsInput | number
    rewardRep?: NullableJsonNullValueInput | InputJsonValue
    rewardResearch?: IntFieldUpdateOperationsInput | number
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateWithoutAlertsInput = {
    id?: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    owner: UserCreateNestedOneWithoutCompanyInput
    sites?: SiteCreateNestedManyWithoutCompanyInput
    positions?: PositionCreateNestedManyWithoutCompanyInput
    research?: ResearchCreateNestedManyWithoutCompanyInput
    votes?: VoteCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestCreateNestedManyWithoutCompanyInput
  }

  export type CompanyUncheckedCreateWithoutAlertsInput = {
    id?: string
    ownerId: string
    name: string
    description?: string | null
    region?: string
    usdBalance?: number
    btcBalance?: number
    repMiners?: number
    repTraders?: number
    repRegulators?: number
    repAnarchists?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sites?: SiteUncheckedCreateNestedManyWithoutCompanyInput
    positions?: PositionUncheckedCreateNestedManyWithoutCompanyInput
    research?: ResearchUncheckedCreateNestedManyWithoutCompanyInput
    votes?: VoteUncheckedCreateNestedManyWithoutCompanyInput
    quests?: CompanyQuestUncheckedCreateNestedManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutAlertsInput = {
    where: CompanyWhereUniqueInput
    create: XOR<CompanyCreateWithoutAlertsInput, CompanyUncheckedCreateWithoutAlertsInput>
  }

  export type CompanyUpsertWithoutAlertsInput = {
    update: XOR<CompanyUpdateWithoutAlertsInput, CompanyUncheckedUpdateWithoutAlertsInput>
    create: XOR<CompanyCreateWithoutAlertsInput, CompanyUncheckedCreateWithoutAlertsInput>
    where?: CompanyWhereInput
  }

  export type CompanyUpdateToOneWithWhereWithoutAlertsInput = {
    where?: CompanyWhereInput
    data: XOR<CompanyUpdateWithoutAlertsInput, CompanyUncheckedUpdateWithoutAlertsInput>
  }

  export type CompanyUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    owner?: UserUpdateOneRequiredWithoutCompanyNestedInput
    sites?: SiteUpdateManyWithoutCompanyNestedInput
    positions?: PositionUpdateManyWithoutCompanyNestedInput
    research?: ResearchUpdateManyWithoutCompanyNestedInput
    votes?: VoteUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUpdateManyWithoutCompanyNestedInput
  }

  export type CompanyUncheckedUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    region?: StringFieldUpdateOperationsInput | string
    usdBalance?: FloatFieldUpdateOperationsInput | number
    btcBalance?: FloatFieldUpdateOperationsInput | number
    repMiners?: IntFieldUpdateOperationsInput | number
    repTraders?: IntFieldUpdateOperationsInput | number
    repRegulators?: IntFieldUpdateOperationsInput | number
    repAnarchists?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sites?: SiteUncheckedUpdateManyWithoutCompanyNestedInput
    positions?: PositionUncheckedUpdateManyWithoutCompanyNestedInput
    research?: ResearchUncheckedUpdateManyWithoutCompanyNestedInput
    votes?: VoteUncheckedUpdateManyWithoutCompanyNestedInput
    quests?: CompanyQuestUncheckedUpdateManyWithoutCompanyNestedInput
  }

  export type SessionCreateManyUserInput = {
    id?: string
    refreshToken: string
    expiresAt: Date | string
    createdAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SiteCreateManyCompanyInput = {
    id?: string
    name: string
    region: string
    gridTier?: number
    coolingType?: string
    uptime?: number
    totalHashrate?: number
    powerUsage?: number
    gridWidth?: number
    gridHeight?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PositionCreateManyCompanyInput = {
    id?: string
    instrument: string
    side: string
    quantity: number
    entryPrice: number
    leverage?: number
    margin?: number | null
    liquidationPrice?: number | null
    status?: string
    pnl?: number
    openedAt?: Date | string
    closedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ResearchCreateManyCompanyInput = {
    id?: string
    nodeId: string
    category: string
    level?: number
    progress?: number
    status?: string
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VoteCreateManyCompanyInput = {
    id?: string
    proposalId: string
    choice: string
    weight?: number
    createdAt?: Date | string
  }

  export type CompanyQuestCreateManyCompanyInput = {
    id?: string
    questId: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type AlertCreateManyCompanyInput = {
    id?: string
    type: string
    category: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: boolean
    createdAt?: Date | string
  }

  export type SiteUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rigs?: RigUpdateManyWithoutSiteNestedInput
    energyContracts?: EnergyContractUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rigs?: RigUncheckedUpdateManyWithoutSiteNestedInput
    energyContracts?: EnergyContractUncheckedUpdateManyWithoutSiteNestedInput
  }

  export type SiteUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    region?: StringFieldUpdateOperationsInput | string
    gridTier?: IntFieldUpdateOperationsInput | number
    coolingType?: StringFieldUpdateOperationsInput | string
    uptime?: FloatFieldUpdateOperationsInput | number
    totalHashrate?: FloatFieldUpdateOperationsInput | number
    powerUsage?: FloatFieldUpdateOperationsInput | number
    gridWidth?: IntFieldUpdateOperationsInput | number
    gridHeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrument?: StringFieldUpdateOperationsInput | string
    side?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    leverage?: FloatFieldUpdateOperationsInput | number
    margin?: NullableFloatFieldUpdateOperationsInput | number | null
    liquidationPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    pnl?: FloatFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrument?: StringFieldUpdateOperationsInput | string
    side?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    leverage?: FloatFieldUpdateOperationsInput | number
    margin?: NullableFloatFieldUpdateOperationsInput | number | null
    liquidationPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    pnl?: FloatFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PositionUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    instrument?: StringFieldUpdateOperationsInput | string
    side?: StringFieldUpdateOperationsInput | string
    quantity?: FloatFieldUpdateOperationsInput | number
    entryPrice?: FloatFieldUpdateOperationsInput | number
    leverage?: FloatFieldUpdateOperationsInput | number
    margin?: NullableFloatFieldUpdateOperationsInput | number | null
    liquidationPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    pnl?: FloatFieldUpdateOperationsInput | number
    openedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    closedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearchUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    progress?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearchUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    progress?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ResearchUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nodeId?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    progress?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proposal?: ProposalUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proposalId?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyQuestUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quest?: QuestUpdateOneRequiredWithoutCompaniesNestedInput
  }

  export type CompanyQuestUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompanyQuestUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    questId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AlertUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyWithoutCompanyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    read?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RigCreateManySiteInput = {
    id?: string
    type: string
    gridX: number
    gridY: number
    hashrate: number
    efficiency: number
    wear?: number
    firmware?: string
    status?: string
    purchasePrice: number
    purchasedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnergyContractCreateManySiteInput = {
    id?: string
    provider: string
    pricePerKWh: number
    capacity: number
    startDate: Date | string
    endDate: Date | string
    createdAt?: Date | string
  }

  export type RigUpdateWithoutSiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    gridX?: IntFieldUpdateOperationsInput | number
    gridY?: IntFieldUpdateOperationsInput | number
    hashrate?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    wear?: FloatFieldUpdateOperationsInput | number
    firmware?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RigUncheckedUpdateWithoutSiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    gridX?: IntFieldUpdateOperationsInput | number
    gridY?: IntFieldUpdateOperationsInput | number
    hashrate?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    wear?: FloatFieldUpdateOperationsInput | number
    firmware?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RigUncheckedUpdateManyWithoutSiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    gridX?: IntFieldUpdateOperationsInput | number
    gridY?: IntFieldUpdateOperationsInput | number
    hashrate?: FloatFieldUpdateOperationsInput | number
    efficiency?: FloatFieldUpdateOperationsInput | number
    wear?: FloatFieldUpdateOperationsInput | number
    firmware?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    purchasePrice?: FloatFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnergyContractUpdateWithoutSiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    pricePerKWh?: FloatFieldUpdateOperationsInput | number
    capacity?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnergyContractUncheckedUpdateWithoutSiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    pricePerKWh?: FloatFieldUpdateOperationsInput | number
    capacity?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnergyContractUncheckedUpdateManyWithoutSiteInput = {
    id?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    pricePerKWh?: FloatFieldUpdateOperationsInput | number
    capacity?: FloatFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteCreateManyProposalInput = {
    id?: string
    companyId: string
    choice: string
    weight?: number
    createdAt?: Date | string
  }

  export type VoteUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutVotesNestedInput
  }

  export type VoteUncheckedUpdateWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoteUncheckedUpdateManyWithoutProposalInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    choice?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyQuestCreateManyQuestInput = {
    id?: string
    companyId: string
    status?: string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: Date | string
    completedAt?: Date | string | null
  }

  export type CompanyQuestUpdateWithoutQuestInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company?: CompanyUpdateOneRequiredWithoutQuestsNestedInput
  }

  export type CompanyQuestUncheckedUpdateWithoutQuestInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CompanyQuestUncheckedUpdateManyWithoutQuestInput = {
    id?: StringFieldUpdateOperationsInput | string
    companyId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    progress?: NullableJsonNullValueInput | InputJsonValue
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyCountOutputTypeDefaultArgs instead
     */
    export type CompanyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteCountOutputTypeDefaultArgs instead
     */
    export type SiteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalCountOutputTypeDefaultArgs instead
     */
    export type ProposalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestCountOutputTypeDefaultArgs instead
     */
    export type QuestCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyDefaultArgs instead
     */
    export type CompanyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SiteDefaultArgs instead
     */
    export type SiteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SiteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RigDefaultArgs instead
     */
    export type RigArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RigDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnergyContractDefaultArgs instead
     */
    export type EnergyContractArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnergyContractDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PositionDefaultArgs instead
     */
    export type PositionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PositionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ResearchDefaultArgs instead
     */
    export type ResearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ResearchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProposalDefaultArgs instead
     */
    export type ProposalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProposalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VoteDefaultArgs instead
     */
    export type VoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VoteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestDefaultArgs instead
     */
    export type QuestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompanyQuestDefaultArgs instead
     */
    export type CompanyQuestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompanyQuestDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AlertDefaultArgs instead
     */
    export type AlertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AlertDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TickSnapshotDefaultArgs instead
     */
    export type TickSnapshotArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TickSnapshotDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}